{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":0},{"_id":"source/uploads/alipay-reward-image.jpg","path":"uploads/alipay-reward-image.jpg","modified":1,"renderable":0},{"_id":"source/uploads/wechat-reward-image.jpg","path":"uploads/wechat-reward-image.jpg","modified":1,"renderable":0},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/alipay-reward-image.jpg","path":"images/alipay-reward-image.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/wechat-reward-image.jpg","path":"images/wechat-reward-image.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/component/prev-net.scss","path":"sass/component/prev-net.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1a9bacbb9e077be72a300a2e4e835c4ae0ad8671","modified":1502984640204},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1500043641024},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1500043641032},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1500043641035},{"_id":"themes/fexo/_config.yml","hash":"1a8451e4fb3536c9327d81c3a6c432949fbad191","modified":1552665512329},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1500043641042},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1500043641210},{"_id":"source/_posts/JS高阶函数学习.md","hash":"e1eadcc0183cccf1e0a4913873c34cd4390ce26f","modified":1552664695623},{"_id":"source/_posts/PHP类包含的七种语法说明.md","hash":"e16e864d0567b63d379647627c632312bf409f11","modified":1500056000954},{"_id":"source/_posts/React Native开发《狗狗说》App学习总结.md","hash":"000e25f74d1e241716d32daccc7323a77881d0b8","modified":1523287833045},{"_id":"source/_posts/React 仿大众点评网App学习总结.md","hash":"a6c216b95d1f425e775be5226311520c2f5582e1","modified":1523458868539},{"_id":"source/_posts/arr.push.apply如何实现数组降维.md","hash":"86d8759bb7bf2108885ec1f1adfc154e41846332","modified":1552664695633},{"_id":"source/_posts/html5表单验证笔记.md","hash":"529d4117e56c7ef22c09496d77000b40c37af481","modified":1552664695633},{"_id":"source/_posts/js闭包学习笔记.md","hash":"6b721de13c06a9741253a27288b4e44ed8c500d9","modified":1552664695644},{"_id":"source/_posts/node.js常用知识.md","hash":"cd613ffbbea78beb6073ad8a34b844c39393a97c","modified":1523373330632},{"_id":"source/_posts/this到底是什么？.md","hash":"3b034e870b67a9cfb9b1a5eeeb96a11a6027c6ef","modified":1524496171575},{"_id":"source/_posts/underscore中的排序sortBy.md","hash":"f59e33706af81df2e7d825064c3db20d527c47d0","modified":1502982628579},{"_id":"source/_posts/vue-cli 3.0配置webpack目录别名alias.md","hash":"0da025b8685c16f2fc4f283c601aaa4c02a5061c","modified":1523204589198},{"_id":"source/_posts/vue-music 移动端音乐webApp学习总结.md","hash":"fc961a7586b156113ff9a4d3bcfb398042b176bb","modified":1523458890668},{"_id":"source/_posts/webpack前端工程化多页面配置.md","hash":"4536fad893853b7662eb8834ac677919d824e58f","modified":1523286340636},{"_id":"source/_posts/《javascript设计模式与开发实践》基础知识笔记.md","hash":"00340d54cc1106360421772a3e28dc3be2221c0f","modified":1524496485098},{"_id":"source/_posts/传统网站如何巧使webpack解决问题.md","hash":"24e74fa0da4b5e4b4f6f246fed09da7b9848e6dd","modified":1524496171576},{"_id":"source/_posts/我的前端笔记—HTML&CSS篇.md","hash":"08c00b11009477af612126dfcacdb7cd175e86da","modified":1523725347720},{"_id":"source/about/index.md","hash":"1d8afd2112c251155c3ea367f7198790318c0f61","modified":1500055355799},{"_id":"source/category/index.md","hash":"21104a614b285b316cf57b1feee6a4dede9e18a6","modified":1502983164834},{"_id":"source/project/index.md","hash":"b3473acc776d0bcd6e18da907135c7c02631f879","modified":1500055363198},{"_id":"source/search/index.md","hash":"d47447a1a7bda2c1ccafdde479cd0ca283e46f23","modified":1500055410474},{"_id":"source/tag/index.md","hash":"a487f4a9ebdf3ccc51e1ce652c0ac9e7cd082180","modified":1500055354314},{"_id":"source/uploads/avatar.jpg","hash":"58998ca0d6796818321ad843346072ce348ae87f","modified":1500047648804},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1500043641045},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1500043641049},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1500043641052},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1500043641055},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1500043641057},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1500043641176},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1500043641179},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1500043641182},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1500043641186},{"_id":"themes/fexo/layout/layout.ejs","hash":"927f508e9a2ab962d1e81dd8ab1cbf05381ffd29","modified":1523691955483},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1500043641192},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1500043641196},{"_id":"themes/fexo/layout/project.ejs","hash":"6648041e1319c8ee3e16c882b33bb457c67a9527","modified":1500043641200},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1500043641203},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1500043641207},{"_id":"source/_posts/传统网站如何巧使webpack解决问题/2.jpg","hash":"d231b779c4d57c685a4fd6257fb6b0de3c2cde21","modified":1524496171592},{"_id":"source/uploads/alipay-reward-image.jpg","hash":"76f4bf016dfc94920254591ea1499aa5f2db57a5","modified":1500043441863},{"_id":"source/uploads/wechat-reward-image.jpg","hash":"91a3a77d90870eb054dd7323e529b03168fd609a","modified":1500043441877},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"ab0adc8f18a96eab18bb584233c0e8d4ddba71fc","modified":1500043641060},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1500043641064},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1500043641067},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1500043641139},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"794916e761ea82fb606a2173af68e9bf524f6efb","modified":1500043641142},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1500043641146},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1500043641149},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"d1e80d7cf8b22929f5c6d8590eac38b069ea055d","modified":1500043641152},{"_id":"themes/fexo/source/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1500048984040},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1500043641244},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1500043641250},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1500043641254},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1500043641257},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1500043641271},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1500043641277},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1500043641274},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1500043641281},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1500043641283},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1500043641286},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1500043641294},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1500043641298},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500043641303},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1500043641308},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1500043641312},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1500043641315},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1500043641320},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1500043641322},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1500043641325},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1500043641328},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1500043641331},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1500043641336},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1500043641334},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1500043641340},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1500048984242},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1500043641428},{"_id":"themes/fexo/source/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1500048984115},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1500043641264},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1500043641268},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"58998ca0d6796818321ad843346072ce348ae87f","modified":1500047648804},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500043641425},{"_id":"source/_posts/传统网站如何巧使webpack解决问题/1.jpg","hash":"a4b951a53fe6f7f233babd6d5627dda3b2d749da","modified":1524496171590},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1500043641071},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1500043641073},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1500043641075},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"aa41542c7682d9b9e627dee046a3608ca6295692","modified":1500043641078},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1500043641081},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1500043641084},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1500043641087},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"b732200315e4c82e92bc7bd0ad33eb171d246e26","modified":1500043641090},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1500043641093},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1500043641096},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1500043641102},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1500043641099},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1500043641105},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1500043641108},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1500043641111},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1500043641114},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1500043641117},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1500043641120},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1500043641123},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1500043641127},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1500043641130},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1500043641133},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1500043641136},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1500043641248},{"_id":"themes/fexo/source/images/alipay-reward-image.jpg","hash":"76f4bf016dfc94920254591ea1499aa5f2db57a5","modified":1500055523707},{"_id":"themes/fexo/source/images/wechat-reward-image.jpg","hash":"91a3a77d90870eb054dd7323e529b03168fd609a","modified":1500055523708},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1500043641344},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1500043641347},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1500043641350},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"172a3d5f747ba028d7e10e6f03ebc1db4d487a54","modified":1500043641352},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1500043641356},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1500043641359},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1500043641362},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1500043641365},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1500043641368},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1500043641371},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1500043641373},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1500043641376},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1500043641379},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1500043641382},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1500043641384},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1500043641386},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1500043641389},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1500043641392},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1500043641394},{"_id":"themes/fexo/source/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1500043641397},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1500043641401},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1500043641403},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1500043641405},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1500043641408},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1500043641411},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1500043641414},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1500043641417},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1500043641420},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1500043641422},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1500043641261},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1500043641236},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1500043641241},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1500043641225},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1500043641231},{"_id":"public/about/index.html","hash":"d1f4e6bc12684e780bebe797335692329044b1de","modified":1552665701960},{"_id":"public/category/index.html","hash":"2dd96f15c75023c7b24cc4e23971f292dc20f8fa","modified":1552665701960},{"_id":"public/project/index.html","hash":"3bd2598869df921171e1b1dc4093c4ee362269bb","modified":1552665701960},{"_id":"public/search/index.html","hash":"c48b75f5a9713168fc8ccf7e55e11a0ca5686577","modified":1552665701960},{"_id":"public/2018/04/08/vue-cli 3.0配置webpack目录别名alias/index.html","hash":"08c3b471e77a6f7eab026f9c69301f198a8468f8","modified":1552665701960},{"_id":"public/2016/02/13/PHP类包含的七种语法说明/index.html","hash":"ff1eb696b34b9c2a5f75081537fbf95c9e63c7d9","modified":1552665701961},{"_id":"public/archives/index.html","hash":"c7de1a1be6d1bdae690da93e64ff2a9eaee40979","modified":1552665701961},{"_id":"public/archives/page/2/index.html","hash":"b379f5a20a5273a18c747c1cba6600f2c0f6b8aa","modified":1552665701961},{"_id":"public/archives/2016/index.html","hash":"c7c7340969dfb8a77dcc35b603cc6e059e99eefd","modified":1552665701961},{"_id":"public/archives/2017/index.html","hash":"01fb11c1f96433e7ff99c9fc143a42bdea9a01bf","modified":1552665701961},{"_id":"public/archives/2016/02/index.html","hash":"0c1fa304b3017ba88139117a2ea32fe47271cbf5","modified":1552665701961},{"_id":"public/archives/2017/07/index.html","hash":"5bfda2a79ea97d432fc92d017be466c01fbc63ea","modified":1552665701961},{"_id":"public/archives/2017/10/index.html","hash":"9d5f35fe8e68f2a202a82fd3b3908f62c992eedb","modified":1552665701961},{"_id":"public/archives/2017/11/index.html","hash":"b314207c63e00c616cd6c4be2c0a873a3f5f21a2","modified":1552665701961},{"_id":"public/archives/2017/12/index.html","hash":"e7fe75fced29c670345fd27ef78e247ee3b68215","modified":1552665701961},{"_id":"public/archives/2018/index.html","hash":"e16959e224850fc8fdb8775663f20f45295caeb3","modified":1552665701961},{"_id":"public/archives/2018/page/2/index.html","hash":"182e3363a9da88232737b02c969381e4942fd60e","modified":1552665701961},{"_id":"public/archives/2018/02/index.html","hash":"dec6d9bc323d811f3cecf306626fb7d36b770328","modified":1552665701961},{"_id":"public/archives/2018/03/index.html","hash":"1515a6c6676b6717bf0cd7ca68bc72db806311c8","modified":1552665701961},{"_id":"public/archives/2018/04/index.html","hash":"fcfe0affd27ccfbb32c96377bce18221d339154d","modified":1552665701961},{"_id":"public/archives/2018/05/index.html","hash":"7edfc6ea0ade98b3023801cde5fcf6099e2d1a52","modified":1552665701961},{"_id":"public/categories/读书笔记/index.html","hash":"d2dea9f8725a27c2384d7b79ee20f5208dada3f8","modified":1552665701961},{"_id":"public/categories/html5/index.html","hash":"3f5eb47ec2f4eb315fb28765cdd9105accd45978","modified":1552665701961},{"_id":"public/categories/node/index.html","hash":"e1efb5570a8c71cb83ccca3da6b2af5bf12450bc","modified":1552665701961},{"_id":"public/categories/javascript/index.html","hash":"2673f5d1f0ac5462ec56aadfe6e0036fdcadf8f9","modified":1552665701961},{"_id":"public/categories/js源码解读/index.html","hash":"d8ff1057f2a5665ca12d5d2507de82b80f2fedbd","modified":1552665701962},{"_id":"public/categories/vue/index.html","hash":"22fb31fe66e438116f707f6789b81662844d9e6e","modified":1552665701962},{"_id":"public/categories/webpack/index.html","hash":"bc64404d602933435a47fac0e07bd83e840ef09b","modified":1552665701962},{"_id":"public/categories/php/index.html","hash":"8970ea4b55b565df5164440c07fe990085f9f0ca","modified":1552665701962},{"_id":"public/categories/react-native/index.html","hash":"60780b3a51f50002f622a73bfe60929e7cbec467","modified":1552665701962},{"_id":"public/categories/react/index.html","hash":"0a1112c7299db40370d7bb000f00e7065724094e","modified":1552665701962},{"_id":"public/categories/前端/index.html","hash":"42bd3b8964f077094232d684639a5c094020a486","modified":1552665701962},{"_id":"public/page/2/index.html","hash":"f7817275420ce4f4fe9136ac1f9b2d3ceacd4349","modified":1552665701962},{"_id":"public/index.html","hash":"14f4dd151a65c96421affe2370675b8ed46f19f7","modified":1552665701962},{"_id":"public/tag/index.html","hash":"dc30444efb0f72333f3ac4b23ef8724a6a051750","modified":1552665701962},{"_id":"public/2018/05/30/html5表单验证笔记/index.html","hash":"b0387af47b95b7877cf5dd29ab0959ff0a021941","modified":1552665701962},{"_id":"public/2018/05/09/arr.push.apply如何实现数组降维/index.html","hash":"f81a9accdb050aba0f66ab24898c61bad988185e","modified":1552665701962},{"_id":"public/2018/05/08/JS高阶函数学习/index.html","hash":"f98b9f6a72dec6c489015720cb811b60c2751ac9","modified":1552665701962},{"_id":"public/2018/04/23/js闭包学习笔记/index.html","hash":"1161205d0d0bfb5ac252d9fcebd4f8293bc11b74","modified":1552665701962},{"_id":"public/2018/04/20/传统网站如何巧使webpack解决问题/index.html","hash":"145723a1eced305f266a725d26d7160e2f3efab1","modified":1552665701962},{"_id":"public/2018/04/16/this到底是什么？/index.html","hash":"54b29aeb8130e6df7416a3eeda0fd74c8998ec98","modified":1552665701962},{"_id":"public/2018/04/14/我的前端笔记—HTML&CSS篇/index.html","hash":"e539168e858b805597ebad31e11f574a76e4e85b","modified":1552665701962},{"_id":"public/2018/04/03/node.js常用知识/index.html","hash":"8703794e27670c700643cb01ebc7d32cdcb9f3e9","modified":1552665701962},{"_id":"public/2018/03/13/webpack前端工程化多页面配置/index.html","hash":"a63e321462130de986b6686b37691b05ec60e5cd","modified":1552665701963},{"_id":"public/2018/02/02/vue-music 移动端音乐webApp学习总结/index.html","hash":"ecfc09f5fcfdd923880626889fe04d7b0e662975","modified":1552665701963},{"_id":"public/2017/12/08/React Native开发《狗狗说》App学习总结/index.html","hash":"bf6f7c69d58ebb51d4ab90186dfbb89676ca7ddb","modified":1552665701963},{"_id":"public/2017/11/26/《javascript设计模式与开发实践》基础知识笔记/index.html","hash":"01f118543b8d0bd68faac2c6e5afc15f315a7294","modified":1552665701963},{"_id":"public/2017/10/18/React 仿大众点评网App学习总结/index.html","hash":"1dcd0a505fd5681b2d37f73c2a0248d3313f0da4","modified":1552665701963},{"_id":"public/2017/07/16/underscore中的排序sortBy/index.html","hash":"0b3e17911a7032077f9b2b0915920fb326e74501","modified":1552665701963},{"_id":"public/tags/javascript/index.html","hash":"7f8d6bd5b14677bc80869f97499a4712b21413e7","modified":1552665701963},{"_id":"public/tags/高阶函数/index.html","hash":"6945d955adba5ac3385a5472f140c3dd995c7291","modified":1552665701963},{"_id":"public/tags/html5/index.html","hash":"48528bf04a34553a720e0b99f4229efcea1a60cf","modified":1552665701963},{"_id":"public/tags/表单验证/index.html","hash":"04eddbab29f5a25cd18c5baf7c9fe2cbce3201ea","modified":1552665701963},{"_id":"public/tags/闭包/index.html","hash":"fbf831ff2de2724feab9a4de60453557d245dddd","modified":1552665701963},{"_id":"public/tags/node/index.html","hash":"2d3ad7172882bb5cd2d148afa8792fb16ccb718a","modified":1552665701963},{"_id":"public/tags/path/index.html","hash":"9402b32d440888516aa70971a11d9a32f9b5dd71","modified":1552665701963},{"_id":"public/tags/回调/index.html","hash":"3698ed586696ee3dc853ffb6b3a8f0a905020c64","modified":1552665701963},{"_id":"public/tags/apply/index.html","hash":"5f9f0bd1df629facb934db8d442f5710d167d27d","modified":1552665701964},{"_id":"public/tags/push/index.html","hash":"10210063cfed74acc5783a226f1335e6d18c4703","modified":1552665701964},{"_id":"public/tags/this/index.html","hash":"a33439fb8ab9ff68ded93926ab5c4f1563735920","modified":1552665701964},{"_id":"public/tags/underscore/index.html","hash":"667b3bded411855b7f6075d978c5f9d359d5a335","modified":1552665701964},{"_id":"public/tags/sortBy/index.html","hash":"68717dbeabffcf23ea90ce7ca3e2ba73ea2b49c3","modified":1552665701964},{"_id":"public/tags/vue/index.html","hash":"09bc4967a3cf3af0b8e4e0dbc310818ffea2a2ad","modified":1552665701964},{"_id":"public/tags/vue-cli/index.html","hash":"c0950fe919effeb457b82d6ffbd8e65ab433cf98","modified":1552665701964},{"_id":"public/tags/webpack/index.html","hash":"14016e11ae33653f066ba3550e75b7c0394322dd","modified":1552665701964},{"_id":"public/tags/alias/index.html","hash":"cdc064e1c0d76521514d8b3e6e56f2807fff93a3","modified":1552665701964},{"_id":"public/tags/设计模式/index.html","hash":"28c8c06936f6b1d186a523edf53a7b5e07fff24a","modified":1552665701964},{"_id":"public/tags/打包/index.html","hash":"4333f28a0a4f5337f207bb07a21ee4f9d8aea9a0","modified":1552665701964},{"_id":"public/tags/php/index.html","hash":"062eb612ee86a800884cb3a5dbb445c014b6b340","modified":1552665701964},{"_id":"public/tags/react/index.html","hash":"0e07f05a0470d5285e2cf9cd5aedc3f11be4a474","modified":1552665701964},{"_id":"public/tags/react-native/index.html","hash":"a0029cd9cdb5610716b3ff3938e82758cb03e1e6","modified":1552665701964},{"_id":"public/tags/app/index.html","hash":"3d4d2f6d80e7dc6c0bcff18263792961e21ae2fd","modified":1552665701964},{"_id":"public/tags/android/index.html","hash":"01bca36daa4c5dbb7c500691c2e21c05aaaaee02","modified":1552665701964},{"_id":"public/tags/redux/index.html","hash":"9479c348851da0b02fc65f61f3a22a0b94fbb057","modified":1552665701964},{"_id":"public/tags/react-router/index.html","hash":"1b2829ae5c3a409c26a87cdb3ec882ba4107362e","modified":1552665701965},{"_id":"public/tags/多页面/index.html","hash":"cadf6cf0b6ddd36ad8064d939bd3ae253313f802","modified":1552665701965},{"_id":"public/tags/工程化/index.html","hash":"f43c4a4f36786a020787325b179ad59e179e576a","modified":1552665701965},{"_id":"public/tags/vuex/index.html","hash":"ae4ad78ffa1b108fe300d94d85446321acf0128e","modified":1552665701965},{"_id":"public/tags/vue-router/index.html","hash":"ac7b2394ec3c5734e9bc8e4b62388cc02cadc24e","modified":1552665701965},{"_id":"public/tags/axios/index.html","hash":"b452f3a2e922a66633affb701d059c7640593030","modified":1552665701965},{"_id":"public/tags/jsonp/index.html","hash":"5103766bba9a0310ddfca7d1cc25caaf618c683e","modified":1552665701965},{"_id":"public/tags/meta/index.html","hash":"5897f83f4221bf0799cf5f852bff41dd8645087e","modified":1552665701965},{"_id":"public/tags/css3/index.html","hash":"0c5880837336e4b0a80e2e2920fc8800626cde8d","modified":1552665701965},{"_id":"public/tags/移动端/index.html","hash":"33eee3449426ee6a442ef2036474e6449aa98109","modified":1552665701965},{"_id":"public/CNAME","hash":"1a9bacbb9e077be72a300a2e4e835c4ae0ad8671","modified":1552665701982},{"_id":"public/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1552665701982},{"_id":"public/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1552665701982},{"_id":"public/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1552665701982},{"_id":"public/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1552665701982},{"_id":"public/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1552665701982},{"_id":"public/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1552665701982},{"_id":"public/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1552665701982},{"_id":"public/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1552665701982},{"_id":"public/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1552665701983},{"_id":"public/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1552665701983},{"_id":"public/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1552665701983},{"_id":"public/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1552665701983},{"_id":"public/images/avatar.jpg","hash":"58998ca0d6796818321ad843346072ce348ae87f","modified":1552665701983},{"_id":"public/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1552665701983},{"_id":"public/2018/04/20/传统网站如何巧使webpack解决问题/2.jpg","hash":"d231b779c4d57c685a4fd6257fb6b0de3c2cde21","modified":1552665701983},{"_id":"public/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1552665701993},{"_id":"public/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1552665701993},{"_id":"public/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1552665701993},{"_id":"public/uploads/avatar.jpg","hash":"58998ca0d6796818321ad843346072ce348ae87f","modified":1552665701993},{"_id":"public/uploads/wechat-reward-image.jpg","hash":"91a3a77d90870eb054dd7323e529b03168fd609a","modified":1552665701993},{"_id":"public/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1552665701993},{"_id":"public/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1552665701993},{"_id":"public/images/wechat-reward-image.jpg","hash":"91a3a77d90870eb054dd7323e529b03168fd609a","modified":1552665701993},{"_id":"public/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1552665701993},{"_id":"public/2018/04/20/传统网站如何巧使webpack解决问题/1.jpg","hash":"a4b951a53fe6f7f233babd6d5627dda3b2d749da","modified":1552665701993},{"_id":"public/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1552665702001},{"_id":"public/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1552665702001},{"_id":"public/uploads/alipay-reward-image.jpg","hash":"76f4bf016dfc94920254591ea1499aa5f2db57a5","modified":1552665702011},{"_id":"public/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1552665702023},{"_id":"public/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1552665702025},{"_id":"public/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1552665702027},{"_id":"public/images/alipay-reward-image.jpg","hash":"76f4bf016dfc94920254591ea1499aa5f2db57a5","modified":1552665702038},{"_id":"public/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1552665702064},{"_id":"public/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1552665702070},{"_id":"public/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1552665702103},{"_id":"public/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1552665702174}],"Category":[{"name":"读书笔记","_id":"cjta92g720003fc92r0wtujh8"},{"name":"html5","_id":"cjta92g790008fc928s26kz52"},{"name":"node","_id":"cjta92g7o000jfc92dkgkthrl"},{"name":"javascript","_id":"cjta92g7s000pfc92qt9hksvp"},{"name":"js源码解读","_id":"cjta92g7v000xfc9220zzbpmt"},{"name":"vue","_id":"cjta92g7y0013fc92jxbg2vba"},{"name":"webpack","_id":"cjta92g7z0016fc92yrnc5b0r"},{"name":"php","_id":"cjta92g800019fc92z26ckas9"},{"name":"react native","_id":"cjta92g8y002cfc920gu0ivp4"},{"name":"react","_id":"cjta92g95002jfc92137u1hin"},{"name":"前端","_id":"cjta92g98002nfc92kw2b0rkh"}],"Data":[],"Page":[{"title":"关于","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\ncomments: false\n---\n","date":"2017-07-14T18:02:35.799Z","updated":"2017-07-14T18:02:35.799Z","path":"about/index.html","_id":"cjta92g6w0001fc92ktn57xtw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: 分类\nlayout: category\ncomments: false\n---\n","date":"2017-08-17T15:19:24.845Z","updated":"2017-08-17T15:19:24.834Z","path":"category/index.html","_id":"cjta92g8s0028fc9239c2ujlh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"项目","layout":"project","comments":0,"_content":"","source":"project/index.md","raw":"---\ntitle: 项目\nlayout: project\ncomments: false\n---\n","date":"2019-03-15T15:52:27.419Z","updated":"2017-07-14T18:02:43.198Z","path":"project/index.html","_id":"cjta92g8v002afc92r5wretzb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: 标签\nlayout: tag\ncomments: false\n---\n","date":"2017-07-14T18:02:34.314Z","updated":"2017-07-14T18:02:34.314Z","path":"tag/index.html","_id":"cjta92g8z002efc92i8s6o92i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"搜索","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: 搜索\nlayout: search\ncomments: false\n---\n","date":"2017-07-14T18:03:30.474Z","updated":"2017-07-14T18:03:30.474Z","path":"search/index.html","_id":"cjta92g92002gfc92wld4itv7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS高阶函数学习","date":"2018-05-08T01:03:34.000Z","_content":"\n# 高阶函数\n\n> 高阶函数是`接受函数作为参数`并且/或者`返回函数作为输出`的函数。\n\n## 函数作为参数传递\n\n最经典的莫过于ajax异步请求的回调函数。\n\n```js\nvar getUserInfo = function( userId, callback ){\n    $.ajax( 'http://xxx.com/getUserInfo?' + userId, function( data ){\n        if ( typeof callback === 'function' ){\n            callback( data );\n        }\n    });\n}\ngetUserInfo( 13157, function( data ){\n    alert( data.userName );\n});\n```\n\n当我们想在 ajax请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把callback 函数当作参数传入发起 ajax 请求的方法中，待请求完成之后执行 callback 函数。\n\n## 函数作为返回值输出\n\n> ** 让函数继续返回一个可执行的函数，意味着运算过程是可延续的，** 也更能体现函数式编程的巧妙。\n\n判断数据类型的例子\n\n```js\nvar isType = function( type ){\n    return function( obj ){\n        return Object.prototype.toString.call( obj ) === '[object '+ type +']';\n    }\n};\nvar isString = isType( 'String' );\nvar isArray = isType( 'Array' );\nvar isNumber = isType( 'Number' );\nconsole.log( isArray( [ 1, 2, 3 ] ) ); // 输出： true\n```\n\n## 综合实现\n\n单例模式\n\n```js\nvar getSingle = function ( fn ) {\n    var ret;\n    return function () {\n        return ret || ( ret = fn.apply( this, arguments ) );\n    };\n};\n```\n\n既把函数当作参数传递，又让函数执行后返回了另外一个函数。\n\n```js\nvar getScript = getSingle(function(){\n    return document.createElement( 'script' );\n});\nvar script1 = getScript();\nvar script2 = getScript();\nalert ( script1 === script2 ); // 输出： true\n```\n\n# 高阶函数运用\n\n## 实现抽象\n\n> 高阶函数就是定义抽象，** 抽象让我们专注于预定的目标而无须关心底层的系统概念。**\n\n如何实现 `forEach` 函数？\n\n```js\nconst forEach = (arrry, fn) => {\n    for(let i = 0; arrry.length; i++){\n        fn(arrry[i])\n    }\n}\n```\n\n一般使用API，forEach的用户不需要理解 `forEach` 函数是如何遍历的，如此问题就被抽象出来了。\n\n因此，`forEach` 函数这样调用它：\n\n```js\nforEach([1,2,3],(data)=>{\n    // data 被作为参数从forEach函数传到当前的函数\n})\n```\n\nforEach本质上遍历了数组，那如何遍历一个对象呢？\n\n```js\nconst forEachObject = (obj, fn) => {\n    for(var property in obj){\n        if(obj.hasOwnProperty(property)){\n            // 以key和value作为参数调用fn\n            fn(property, obj[property])\n        }\n    }\n}\n```\n\n`forEachObject` 接受第一个参数为js对象，第二个参数是一个函数fn，并分别以`key`和`value`作为参数调用`fn`。\n\n运行结果：\n\n```js\nlet object = {a:1,b:2}\nforEachObject(object, (k,v) => console.log(k + \":\" + v)\n// a:1\n// b:2\n```\n\n## AOP(面向切面编程)\n\n`AOP（面向切面编程）` 的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些\n跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。\n\n这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。\n\n```js\nFunction.prototype.before = function(beforefn){\n    var _self = this;\n    return function(){\n        beforefn.apply(this, arguments);\n        return _self.apply(this, arguments);\n    }\n};\nFunction.prototype.after = function(afterfn){\n    var _self = this;\n    return function(){\n        var ret = _self.apply(this, arguments);\n        afterfn.apply(this, arguments);\n        return ret;\n    }\n};\nvar func = function(){\n    console.log(2);\n};\nfunc = func.before(function(){\n    console.log(1);\n}).after(function(){\n    console.log(3);\n});\nfunc();\n```\n\n这种使用 AOP 的方式来给函数添加职责，也是 JavaScript 语言中一种非常特别和巧妙的装饰\n者模式实现。\n\n## 函数节流\n\n`throttle` 函数的原理是，将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。\n`throttle` 函数接受2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时间。\n\n```js\nvar throttle = function(fn, interval){\n    var _self = fn,     // 保存需要被延迟执行的函数引用\n        timer,          // 定时器\n        firstTime = true;   // 是否是第一次调用\n    return function(){\n        var args = arguments,\n            _me = this;\n        if(firstTime){      // 如果是第一次调用，不需要延迟执行\n            _self.apply(_me, args);\n            return firstTime = false;\n        }\n        if(timer){          // 如果定时器还在，说明前一次延迟执行还没有完成\n            return false;\n        }\n        timer = setTimeout(function(){   // 延迟一段时间执行\n            clearTimeout(timer);\n            timer = null;\n            _self.apply(_me, args);\n        }, interval || 500);\n    }\n};\n\nwindow.onresize = throttle(function(){\n    console.log(1);\n}, 500);\n```\n\n## 分时函数\n\n有时候我们需要往页面大量添加DOM节点，但是要一次性往页面中创建成百上千个节点，短时间内显然会让浏览器吃不消，造成卡顿甚至假死。\n\n解决方案之一就是使用 `timeChunk` 函数，`timeChunk` 函数让创建节点的工作分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点。\n\n`timeChunk` 函数接受3个参数，第1个参数是创建节点时需要用到的数据，第2个参数是封装了创建节点逻辑的函数，第3个参数表示每一批创建的节点数量。\n\n```js\nvar timeChunk = function(ary, fn, count){\n    var obj,\n        t;\n    var len = ary.length;\n    var start = function(){\n        for(var i = 0; i < Math.min(count || 1, ary.length); i++){\n            var obj = ary.shift();\n            fn(obj);\n        }\n    };\n    return function(){\n        t = setInterval(function(){\n            if(ary.length === 0){     // 如果全部节点都已经被创建好\n                return clearInterval(t);\n            }\n            start();\n        }, 200);  // 分批执行的时间间隔，也可以用参数的形式传入\n    };\n};\n```\n\n测试\n\n```js\nvar ary = [];\nfor(var i = 1; i <= 1000; i++){\n    ary.push(i);\n}\n\nvar renderFriendList = timeChunk(ary, function(n){\n    var div = document.createElement('div');\n    div.innerHTML = n;\n    document.body.appendChild(div);\n}, 8);\n\nrenderFriendList();\n```\n\n# 结语\n\n高阶函数的实现得益于JS的闭包机制，让开发者在实际项目中只需要关注业务逻辑和容易变化的部分，而无须关心底层的概念，避免了多余的代码。\n\n# 参考\n\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[javascript ES6 函数式编程入门经典](https://item.jd.com/12257861.html)","source":"_posts/JS高阶函数学习.md","raw":"---\ntitle: JS高阶函数学习\ndate: 2018-05-08 09:03:34\ncategories: 读书笔记\ntags: [javascript, 高阶函数]\n---\n\n# 高阶函数\n\n> 高阶函数是`接受函数作为参数`并且/或者`返回函数作为输出`的函数。\n\n## 函数作为参数传递\n\n最经典的莫过于ajax异步请求的回调函数。\n\n```js\nvar getUserInfo = function( userId, callback ){\n    $.ajax( 'http://xxx.com/getUserInfo?' + userId, function( data ){\n        if ( typeof callback === 'function' ){\n            callback( data );\n        }\n    });\n}\ngetUserInfo( 13157, function( data ){\n    alert( data.userName );\n});\n```\n\n当我们想在 ajax请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把callback 函数当作参数传入发起 ajax 请求的方法中，待请求完成之后执行 callback 函数。\n\n## 函数作为返回值输出\n\n> ** 让函数继续返回一个可执行的函数，意味着运算过程是可延续的，** 也更能体现函数式编程的巧妙。\n\n判断数据类型的例子\n\n```js\nvar isType = function( type ){\n    return function( obj ){\n        return Object.prototype.toString.call( obj ) === '[object '+ type +']';\n    }\n};\nvar isString = isType( 'String' );\nvar isArray = isType( 'Array' );\nvar isNumber = isType( 'Number' );\nconsole.log( isArray( [ 1, 2, 3 ] ) ); // 输出： true\n```\n\n## 综合实现\n\n单例模式\n\n```js\nvar getSingle = function ( fn ) {\n    var ret;\n    return function () {\n        return ret || ( ret = fn.apply( this, arguments ) );\n    };\n};\n```\n\n既把函数当作参数传递，又让函数执行后返回了另外一个函数。\n\n```js\nvar getScript = getSingle(function(){\n    return document.createElement( 'script' );\n});\nvar script1 = getScript();\nvar script2 = getScript();\nalert ( script1 === script2 ); // 输出： true\n```\n\n# 高阶函数运用\n\n## 实现抽象\n\n> 高阶函数就是定义抽象，** 抽象让我们专注于预定的目标而无须关心底层的系统概念。**\n\n如何实现 `forEach` 函数？\n\n```js\nconst forEach = (arrry, fn) => {\n    for(let i = 0; arrry.length; i++){\n        fn(arrry[i])\n    }\n}\n```\n\n一般使用API，forEach的用户不需要理解 `forEach` 函数是如何遍历的，如此问题就被抽象出来了。\n\n因此，`forEach` 函数这样调用它：\n\n```js\nforEach([1,2,3],(data)=>{\n    // data 被作为参数从forEach函数传到当前的函数\n})\n```\n\nforEach本质上遍历了数组，那如何遍历一个对象呢？\n\n```js\nconst forEachObject = (obj, fn) => {\n    for(var property in obj){\n        if(obj.hasOwnProperty(property)){\n            // 以key和value作为参数调用fn\n            fn(property, obj[property])\n        }\n    }\n}\n```\n\n`forEachObject` 接受第一个参数为js对象，第二个参数是一个函数fn，并分别以`key`和`value`作为参数调用`fn`。\n\n运行结果：\n\n```js\nlet object = {a:1,b:2}\nforEachObject(object, (k,v) => console.log(k + \":\" + v)\n// a:1\n// b:2\n```\n\n## AOP(面向切面编程)\n\n`AOP（面向切面编程）` 的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些\n跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。\n\n这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。\n\n```js\nFunction.prototype.before = function(beforefn){\n    var _self = this;\n    return function(){\n        beforefn.apply(this, arguments);\n        return _self.apply(this, arguments);\n    }\n};\nFunction.prototype.after = function(afterfn){\n    var _self = this;\n    return function(){\n        var ret = _self.apply(this, arguments);\n        afterfn.apply(this, arguments);\n        return ret;\n    }\n};\nvar func = function(){\n    console.log(2);\n};\nfunc = func.before(function(){\n    console.log(1);\n}).after(function(){\n    console.log(3);\n});\nfunc();\n```\n\n这种使用 AOP 的方式来给函数添加职责，也是 JavaScript 语言中一种非常特别和巧妙的装饰\n者模式实现。\n\n## 函数节流\n\n`throttle` 函数的原理是，将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。\n`throttle` 函数接受2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时间。\n\n```js\nvar throttle = function(fn, interval){\n    var _self = fn,     // 保存需要被延迟执行的函数引用\n        timer,          // 定时器\n        firstTime = true;   // 是否是第一次调用\n    return function(){\n        var args = arguments,\n            _me = this;\n        if(firstTime){      // 如果是第一次调用，不需要延迟执行\n            _self.apply(_me, args);\n            return firstTime = false;\n        }\n        if(timer){          // 如果定时器还在，说明前一次延迟执行还没有完成\n            return false;\n        }\n        timer = setTimeout(function(){   // 延迟一段时间执行\n            clearTimeout(timer);\n            timer = null;\n            _self.apply(_me, args);\n        }, interval || 500);\n    }\n};\n\nwindow.onresize = throttle(function(){\n    console.log(1);\n}, 500);\n```\n\n## 分时函数\n\n有时候我们需要往页面大量添加DOM节点，但是要一次性往页面中创建成百上千个节点，短时间内显然会让浏览器吃不消，造成卡顿甚至假死。\n\n解决方案之一就是使用 `timeChunk` 函数，`timeChunk` 函数让创建节点的工作分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点。\n\n`timeChunk` 函数接受3个参数，第1个参数是创建节点时需要用到的数据，第2个参数是封装了创建节点逻辑的函数，第3个参数表示每一批创建的节点数量。\n\n```js\nvar timeChunk = function(ary, fn, count){\n    var obj,\n        t;\n    var len = ary.length;\n    var start = function(){\n        for(var i = 0; i < Math.min(count || 1, ary.length); i++){\n            var obj = ary.shift();\n            fn(obj);\n        }\n    };\n    return function(){\n        t = setInterval(function(){\n            if(ary.length === 0){     // 如果全部节点都已经被创建好\n                return clearInterval(t);\n            }\n            start();\n        }, 200);  // 分批执行的时间间隔，也可以用参数的形式传入\n    };\n};\n```\n\n测试\n\n```js\nvar ary = [];\nfor(var i = 1; i <= 1000; i++){\n    ary.push(i);\n}\n\nvar renderFriendList = timeChunk(ary, function(n){\n    var div = document.createElement('div');\n    div.innerHTML = n;\n    document.body.appendChild(div);\n}, 8);\n\nrenderFriendList();\n```\n\n# 结语\n\n高阶函数的实现得益于JS的闭包机制，让开发者在实际项目中只需要关注业务逻辑和容易变化的部分，而无须关心底层的概念，避免了多余的代码。\n\n# 参考\n\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[javascript ES6 函数式编程入门经典](https://item.jd.com/12257861.html)","slug":"JS高阶函数学习","published":1,"updated":"2019-03-15T15:44:55.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g6o0000fc926o2mal9f","content":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><blockquote>\n<p>高阶函数是<code>接受函数作为参数</code>并且/或者<code>返回函数作为输出</code>的函数。</p>\n</blockquote>\n<h2 id=\"函数作为参数传递\"><a href=\"#函数作为参数传递\" class=\"headerlink\" title=\"函数作为参数传递\"></a>函数作为参数传递</h2><p>最经典的莫过于ajax异步请求的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> userId, callback </span>)</span>&#123;</span><br><span class=\"line\">    $.ajax( <span class=\"string\">'http://xxx.com/getUserInfo?'</span> + userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> callback === <span class=\"string\">'function'</span> )&#123;</span><br><span class=\"line\">            callback( data );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserInfo( <span class=\"number\">13157</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">    alert( data.userName );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当我们想在 ajax请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把callback 函数当作参数传入发起 ajax 请求的方法中，待请求完成之后执行 callback 函数。</p>\n<h2 id=\"函数作为返回值输出\"><a href=\"#函数作为返回值输出\" class=\"headerlink\" title=\"函数作为返回值输出\"></a>函数作为返回值输出</h2><blockquote>\n<p><strong> 让函数继续返回一个可执行的函数，意味着运算过程是可延续的，</strong> 也更能体现函数式编程的巧妙。</p>\n</blockquote>\n<p>判断数据类型的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> type </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object '</span>+ type +<span class=\"string\">']'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isString = isType( <span class=\"string\">'String'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> isArray = isType( <span class=\"string\">'Array'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> isNumber = isType( <span class=\"string\">'Number'</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( isArray( [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] ) ); <span class=\"comment\">// 输出： true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"综合实现\"><a href=\"#综合实现\" class=\"headerlink\" title=\"综合实现\"></a>综合实现</h2><p>单例模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> fn </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret || ( ret = fn.apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> ) );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>既把函数当作参数传递，又让函数执行后返回了另外一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getScript = getSingle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'script'</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> script1 = getScript();</span><br><span class=\"line\"><span class=\"keyword\">var</span> script2 = getScript();</span><br><span class=\"line\">alert ( script1 === script2 ); <span class=\"comment\">// 输出： true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"高阶函数运用\"><a href=\"#高阶函数运用\" class=\"headerlink\" title=\"高阶函数运用\"></a>高阶函数运用</h1><h2 id=\"实现抽象\"><a href=\"#实现抽象\" class=\"headerlink\" title=\"实现抽象\"></a>实现抽象</h2><blockquote>\n<p>高阶函数就是定义抽象，<strong> 抽象让我们专注于预定的目标而无须关心底层的系统概念。</strong></p>\n</blockquote>\n<p>如何实现 <code>forEach</code> 函数？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> forEach = <span class=\"function\">(<span class=\"params\">arrry, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; arrry.length; i++)&#123;</span><br><span class=\"line\">        fn(arrry[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般使用API，forEach的用户不需要理解 <code>forEach</code> 函数是如何遍历的，如此问题就被抽象出来了。</p>\n<p>因此，<code>forEach</code> 函数这样调用它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">forEach([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data 被作为参数从forEach函数传到当前的函数</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>forEach本质上遍历了数组，那如何遍历一个对象呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> forEachObject = <span class=\"function\">(<span class=\"params\">obj, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.hasOwnProperty(property))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 以key和value作为参数调用fn</span></span><br><span class=\"line\">            fn(property, obj[property])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>forEachObject</code> 接受第一个参数为js对象，第二个参数是一个函数fn，并分别以<code>key</code>和<code>value</code>作为参数调用<code>fn</code>。</p>\n<p>运行结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> object = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">forEachObject(object, (k,v) =&gt; <span class=\"built_in\">console</span>.log(k + <span class=\"string\">\":\"</span> + v)</span><br><span class=\"line\"><span class=\"comment\">// a:1</span></span><br><span class=\"line\"><span class=\"comment\">// b:2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP-面向切面编程\"><a href=\"#AOP-面向切面编程\" class=\"headerlink\" title=\"AOP(面向切面编程)\"></a>AOP(面向切面编程)</h2><p><code>AOP（面向切面编程）</code> 的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些<br>跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。</p>\n<p>这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        beforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterfn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func = func.before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n<p>这种使用 AOP 的方式来给函数添加职责，也是 JavaScript 语言中一种非常特别和巧妙的装饰<br>者模式实现。</p>\n<h2 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h2><p><code>throttle</code> 函数的原理是，将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。<br><code>throttle</code> 函数接受2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = fn,     <span class=\"comment\">// 保存需要被延迟执行的函数引用</span></span><br><span class=\"line\">        timer,          <span class=\"comment\">// 定时器</span></span><br><span class=\"line\">        firstTime = <span class=\"literal\">true</span>;   <span class=\"comment\">// 是否是第一次调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            _me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTime)&#123;      <span class=\"comment\">// 如果是第一次调用，不需要延迟执行</span></span><br><span class=\"line\">            _self.apply(_me, args);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstTime = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;          <span class=\"comment\">// 如果定时器还在，说明前一次延迟执行还没有完成</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   <span class=\"comment\">// 延迟一段时间执行</span></span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            _self.apply(_me, args);</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h2><p>有时候我们需要往页面大量添加DOM节点，但是要一次性往页面中创建成百上千个节点，短时间内显然会让浏览器吃不消，造成卡顿甚至假死。</p>\n<p>解决方案之一就是使用 <code>timeChunk</code> 函数，<code>timeChunk</code> 函数让创建节点的工作分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点。</p>\n<p><code>timeChunk</code> 函数接受3个参数，第1个参数是创建节点时需要用到的数据，第2个参数是封装了创建节点逻辑的函数，第3个参数表示每一批创建的节点数量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeChunk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, fn, count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj,</span><br><span class=\"line\">        t;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = ary.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.min(count || <span class=\"number\">1</span>, ary.length); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = ary.shift();</span><br><span class=\"line\">            fn(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        t = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ary.length === <span class=\"number\">0</span>)&#123;     <span class=\"comment\">// 如果全部节点都已经被创建好</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> clearInterval(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start();</span><br><span class=\"line\">        &#125;, <span class=\"number\">200</span>);  <span class=\"comment\">// 分批执行的时间间隔，也可以用参数的形式传入</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">    ary.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> renderFriendList = timeChunk(ary, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    div.innerHTML = n;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">renderFriendList();</span><br></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>高阶函数的实现得益于JS的闭包机制，让开发者在实际项目中只需要关注业务逻辑和容易变化的部分，而无须关心底层的概念，避免了多余的代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://item.jd.com/12257861.html\" target=\"_blank\" rel=\"noopener\">javascript ES6 函数式编程入门经典</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><blockquote>\n<p>高阶函数是<code>接受函数作为参数</code>并且/或者<code>返回函数作为输出</code>的函数。</p>\n</blockquote>\n<h2 id=\"函数作为参数传递\"><a href=\"#函数作为参数传递\" class=\"headerlink\" title=\"函数作为参数传递\"></a>函数作为参数传递</h2><p>最经典的莫过于ajax异步请求的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getUserInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> userId, callback </span>)</span>&#123;</span><br><span class=\"line\">    $.ajax( <span class=\"string\">'http://xxx.com/getUserInfo?'</span> + userId, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> callback === <span class=\"string\">'function'</span> )&#123;</span><br><span class=\"line\">            callback( data );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getUserInfo( <span class=\"number\">13157</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> data </span>)</span>&#123;</span><br><span class=\"line\">    alert( data.userName );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当我们想在 ajax请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把callback 函数当作参数传入发起 ajax 请求的方法中，待请求完成之后执行 callback 函数。</p>\n<h2 id=\"函数作为返回值输出\"><a href=\"#函数作为返回值输出\" class=\"headerlink\" title=\"函数作为返回值输出\"></a>函数作为返回值输出</h2><blockquote>\n<p><strong> 让函数继续返回一个可执行的函数，意味着运算过程是可延续的，</strong> 也更能体现函数式编程的巧妙。</p>\n</blockquote>\n<p>判断数据类型的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> type </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object '</span>+ type +<span class=\"string\">']'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isString = isType( <span class=\"string\">'String'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> isArray = isType( <span class=\"string\">'Array'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> isNumber = isType( <span class=\"string\">'Number'</span> );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( isArray( [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ] ) ); <span class=\"comment\">// 输出： true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"综合实现\"><a href=\"#综合实现\" class=\"headerlink\" title=\"综合实现\"></a>综合实现</h2><p>单例模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getSingle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> fn </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret || ( ret = fn.apply( <span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span> ) );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>既把函数当作参数传递，又让函数执行后返回了另外一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getScript = getSingle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'script'</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> script1 = getScript();</span><br><span class=\"line\"><span class=\"keyword\">var</span> script2 = getScript();</span><br><span class=\"line\">alert ( script1 === script2 ); <span class=\"comment\">// 输出： true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"高阶函数运用\"><a href=\"#高阶函数运用\" class=\"headerlink\" title=\"高阶函数运用\"></a>高阶函数运用</h1><h2 id=\"实现抽象\"><a href=\"#实现抽象\" class=\"headerlink\" title=\"实现抽象\"></a>实现抽象</h2><blockquote>\n<p>高阶函数就是定义抽象，<strong> 抽象让我们专注于预定的目标而无须关心底层的系统概念。</strong></p>\n</blockquote>\n<p>如何实现 <code>forEach</code> 函数？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> forEach = <span class=\"function\">(<span class=\"params\">arrry, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; arrry.length; i++)&#123;</span><br><span class=\"line\">        fn(arrry[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般使用API，forEach的用户不需要理解 <code>forEach</code> 函数是如何遍历的，如此问题就被抽象出来了。</p>\n<p>因此，<code>forEach</code> 函数这样调用它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">forEach([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// data 被作为参数从forEach函数传到当前的函数</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>forEach本质上遍历了数组，那如何遍历一个对象呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> forEachObject = <span class=\"function\">(<span class=\"params\">obj, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.hasOwnProperty(property))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 以key和value作为参数调用fn</span></span><br><span class=\"line\">            fn(property, obj[property])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>forEachObject</code> 接受第一个参数为js对象，第二个参数是一个函数fn，并分别以<code>key</code>和<code>value</code>作为参数调用<code>fn</code>。</p>\n<p>运行结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> object = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">forEachObject(object, (k,v) =&gt; <span class=\"built_in\">console</span>.log(k + <span class=\"string\">\":\"</span> + v)</span><br><span class=\"line\"><span class=\"comment\">// a:1</span></span><br><span class=\"line\"><span class=\"comment\">// b:2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP-面向切面编程\"><a href=\"#AOP-面向切面编程\" class=\"headerlink\" title=\"AOP(面向切面编程)\"></a>AOP(面向切面编程)</h2><p><code>AOP（面向切面编程）</code> 的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些<br>跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。</p>\n<p>这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">beforefn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        beforefn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">afterfn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = _self.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        afterfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func = func.before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;).after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n<p>这种使用 AOP 的方式来给函数添加职责，也是 JavaScript 语言中一种非常特别和巧妙的装饰<br>者模式实现。</p>\n<h2 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h2><p><code>throttle</code> 函数的原理是，将即将被执行的函数用setTimeout延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。<br><code>throttle</code> 函数接受2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, interval</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _self = fn,     <span class=\"comment\">// 保存需要被延迟执行的函数引用</span></span><br><span class=\"line\">        timer,          <span class=\"comment\">// 定时器</span></span><br><span class=\"line\">        firstTime = <span class=\"literal\">true</span>;   <span class=\"comment\">// 是否是第一次调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">            _me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTime)&#123;      <span class=\"comment\">// 如果是第一次调用，不需要延迟执行</span></span><br><span class=\"line\">            _self.apply(_me, args);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> firstTime = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timer)&#123;          <span class=\"comment\">// 如果定时器还在，说明前一次延迟执行还没有完成</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   <span class=\"comment\">// 延迟一段时间执行</span></span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            _self.apply(_me, args);</span><br><span class=\"line\">        &#125;, interval || <span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"分时函数\"><a href=\"#分时函数\" class=\"headerlink\" title=\"分时函数\"></a>分时函数</h2><p>有时候我们需要往页面大量添加DOM节点，但是要一次性往页面中创建成百上千个节点，短时间内显然会让浏览器吃不消，造成卡顿甚至假死。</p>\n<p>解决方案之一就是使用 <code>timeChunk</code> 函数，<code>timeChunk</code> 函数让创建节点的工作分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点。</p>\n<p><code>timeChunk</code> 函数接受3个参数，第1个参数是创建节点时需要用到的数据，第2个参数是封装了创建节点逻辑的函数，第3个参数表示每一批创建的节点数量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeChunk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ary, fn, count</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj,</span><br><span class=\"line\">        t;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = ary.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">Math</span>.min(count || <span class=\"number\">1</span>, ary.length); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = ary.shift();</span><br><span class=\"line\">            fn(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        t = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ary.length === <span class=\"number\">0</span>)&#123;     <span class=\"comment\">// 如果全部节点都已经被创建好</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> clearInterval(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            start();</span><br><span class=\"line\">        &#125;, <span class=\"number\">200</span>);  <span class=\"comment\">// 分批执行的时间间隔，也可以用参数的形式传入</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">    ary.push(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> renderFriendList = timeChunk(ary, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    div.innerHTML = n;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\">&#125;, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">renderFriendList();</span><br></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>高阶函数的实现得益于JS的闭包机制，让开发者在实际项目中只需要关注业务逻辑和容易变化的部分，而无须关心底层的概念，避免了多余的代码。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://item.jd.com/12257861.html\" target=\"_blank\" rel=\"noopener\">javascript ES6 函数式编程入门经典</a></p>\n"},{"title":"html5表单验证笔记","date":"2018-05-30T06:29:42.000Z","_content":"\n## html5中valid、invalid、required的定义\n\n### `:required`\n必须，那input不能为空的意思。\n\n### `:valid`\n有效，即当填写的内容符合要求的时候触发。\n\n### `:invalid`\n无效，即当填写的内容不符合要求的时候触发。\n\n```css\ninput:required:invalid, input:focus:invalid, textarea:required:invalid, textarea:focus:invalid{box-shadow: none;}\n```\n\n## autocomplete属性和novalidate属性\n\n`autocomplete属性`控制自动完成功能的开启和关闭。\n\n```html\n<form action=\"#\" method=\"get\" autocomplete=\"on\">\n  请输入：<input type=\"text\"  name=\"txt\" /><br/>\n  <input type=\"submit\" />\n</form>\n```\n\n`novalidate属性`用于在提交表单时不对form或input进行验证。（默认浏览器行为）\n\n## 新增input属性\n\n1、`required属性`，用户必须填写内容才能提交，为空时提交不上。\n\n2、`placeholder属性`，提示需要输入的内容。\n\n3、`autofocus属性`，用于自动获取焦点。\n\n4、`form属性`，用于设置input元素属于哪个表单。在html4中，表单中的所以元素都必须在这个表单的开始标签和结束标签之间，\n而在html5中，如果要将表单开始和结束标签之外的元素归属到该表单，只需要设置`form属性`。\n\n```html\n<form action=\"#\" method=\"get\" id=\"myForm\">\n    常用地址：<input type=\"text\" name=\"ftxt\" />\n    <input type=\"submit\" />\n</form>\n临时地址：<input type=\"text\" name=\"ltxt\" form=\"myForm\" />\n```\n\n5、`override属性`，用于重写表单元素的某些属性，在html5中，可以重写的表单属性有`formaction`、`formmethod`、`formenctype`、`formnovalidate`和`formtarget`，这些属性分别用于重写表单的action、enctype、method、novalidate和target属性。\n\n```html\n<form action=\"a.jsp\" method=\"get\">\n    用户名：<input type=\"text\" name=\"fname\" /><br />\n    <input type=\"submit\" value=\"张三的提交\" /><br/>\n    <input type=\"submit\" formaction=\"b.jsp\" value=\"李四的提交\" />\n</form>\n```\n\n6、`list属性`，用于设置输入域的datalist元素，为list属性设置datalist的id属性值，可以将datalist元素与input元素相关联。（谷歌浏览器可用）\nlist属性适应于以下类型的input元素：text、search、url、telephone、email、date、 pickers、number、range和color。\n\n```html\n<input type=\"url\" list=\"url_list\" name=\"myUrl\" />\n<datalist id=\"url_list\">\n  <option label=\"Microsoft\" value=\"http://www.microsoft.com\" />\n  <option label=\"Google\" value=\"http://www.google.com\" />\n  <option label=\"百度\" value=\"http://www.baidu.com\" />\n</datalist>\n```\n\n7、`multiple属性`，用于设置input元素是否可以有多个值。该属性只适用于email和file类型的input元素。\n如果给email类型的input元素设置multiple属性，那么在输入框中可以输入多个email地址，多个email地址之间用逗号隔开。\n如果给file类型的input元素设置multiple属性，那么在打开的选择文件对话框中就可以选择对个文件。\n\n```html\nE-mail：<input type=\"email\" name=\"myEmail\" multiple />\nFile：<input type=\"file\" name=\"myFile\" multiple />\n```\n\n8、`pattern属性`，正则表达式由一系列字符和数字组成，用于匹配某个句法规则。\n该属性适应于text、search、url、telephone、email和password类型的input元素。\n```html\n<form>\n    <input type=\"text\" name=\"myName\" pattern=\"[a-zA-Z]\\w{5,15}$\">\n    <html>以字母开头，6-16位</html>\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n## checkValidity方法\n\nHTML5客户端校验：`checkValidity`方法可以用于检验你的输入是否合法，合法时返回true,否则返回false。\n","source":"_posts/html5表单验证笔记.md","raw":"---\ntitle: html5表单验证笔记\ndate: 2018-05-30 14:29:42\ncategories: html5\ntags: [html5,表单验证]\n---\n\n## html5中valid、invalid、required的定义\n\n### `:required`\n必须，那input不能为空的意思。\n\n### `:valid`\n有效，即当填写的内容符合要求的时候触发。\n\n### `:invalid`\n无效，即当填写的内容不符合要求的时候触发。\n\n```css\ninput:required:invalid, input:focus:invalid, textarea:required:invalid, textarea:focus:invalid{box-shadow: none;}\n```\n\n## autocomplete属性和novalidate属性\n\n`autocomplete属性`控制自动完成功能的开启和关闭。\n\n```html\n<form action=\"#\" method=\"get\" autocomplete=\"on\">\n  请输入：<input type=\"text\"  name=\"txt\" /><br/>\n  <input type=\"submit\" />\n</form>\n```\n\n`novalidate属性`用于在提交表单时不对form或input进行验证。（默认浏览器行为）\n\n## 新增input属性\n\n1、`required属性`，用户必须填写内容才能提交，为空时提交不上。\n\n2、`placeholder属性`，提示需要输入的内容。\n\n3、`autofocus属性`，用于自动获取焦点。\n\n4、`form属性`，用于设置input元素属于哪个表单。在html4中，表单中的所以元素都必须在这个表单的开始标签和结束标签之间，\n而在html5中，如果要将表单开始和结束标签之外的元素归属到该表单，只需要设置`form属性`。\n\n```html\n<form action=\"#\" method=\"get\" id=\"myForm\">\n    常用地址：<input type=\"text\" name=\"ftxt\" />\n    <input type=\"submit\" />\n</form>\n临时地址：<input type=\"text\" name=\"ltxt\" form=\"myForm\" />\n```\n\n5、`override属性`，用于重写表单元素的某些属性，在html5中，可以重写的表单属性有`formaction`、`formmethod`、`formenctype`、`formnovalidate`和`formtarget`，这些属性分别用于重写表单的action、enctype、method、novalidate和target属性。\n\n```html\n<form action=\"a.jsp\" method=\"get\">\n    用户名：<input type=\"text\" name=\"fname\" /><br />\n    <input type=\"submit\" value=\"张三的提交\" /><br/>\n    <input type=\"submit\" formaction=\"b.jsp\" value=\"李四的提交\" />\n</form>\n```\n\n6、`list属性`，用于设置输入域的datalist元素，为list属性设置datalist的id属性值，可以将datalist元素与input元素相关联。（谷歌浏览器可用）\nlist属性适应于以下类型的input元素：text、search、url、telephone、email、date、 pickers、number、range和color。\n\n```html\n<input type=\"url\" list=\"url_list\" name=\"myUrl\" />\n<datalist id=\"url_list\">\n  <option label=\"Microsoft\" value=\"http://www.microsoft.com\" />\n  <option label=\"Google\" value=\"http://www.google.com\" />\n  <option label=\"百度\" value=\"http://www.baidu.com\" />\n</datalist>\n```\n\n7、`multiple属性`，用于设置input元素是否可以有多个值。该属性只适用于email和file类型的input元素。\n如果给email类型的input元素设置multiple属性，那么在输入框中可以输入多个email地址，多个email地址之间用逗号隔开。\n如果给file类型的input元素设置multiple属性，那么在打开的选择文件对话框中就可以选择对个文件。\n\n```html\nE-mail：<input type=\"email\" name=\"myEmail\" multiple />\nFile：<input type=\"file\" name=\"myFile\" multiple />\n```\n\n8、`pattern属性`，正则表达式由一系列字符和数字组成，用于匹配某个句法规则。\n该属性适应于text、search、url、telephone、email和password类型的input元素。\n```html\n<form>\n    <input type=\"text\" name=\"myName\" pattern=\"[a-zA-Z]\\w{5,15}$\">\n    <html>以字母开头，6-16位</html>\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n## checkValidity方法\n\nHTML5客户端校验：`checkValidity`方法可以用于检验你的输入是否合法，合法时返回true,否则返回false。\n","slug":"html5表单验证笔记","published":1,"updated":"2019-03-15T15:44:55.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g6y0002fc92b0rh6flj","content":"<h2 id=\"html5中valid、invalid、required的定义\"><a href=\"#html5中valid、invalid、required的定义\" class=\"headerlink\" title=\"html5中valid、invalid、required的定义\"></a>html5中valid、invalid、required的定义</h2><h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\":required\"></a><code>:required</code></h3><p>必须，那input不能为空的意思。</p>\n<h3 id=\"valid\"><a href=\"#valid\" class=\"headerlink\" title=\":valid\"></a><code>:valid</code></h3><p>有效，即当填写的内容符合要求的时候触发。</p>\n<h3 id=\"invalid\"><a href=\"#invalid\" class=\"headerlink\" title=\":invalid\"></a><code>:invalid</code></h3><p>无效，即当填写的内容不符合要求的时候触发。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:required</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:required</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">:invalid</span>&#123;<span class=\"attribute\">box-shadow</span>: none;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"autocomplete属性和novalidate属性\"><a href=\"#autocomplete属性和novalidate属性\" class=\"headerlink\" title=\"autocomplete属性和novalidate属性\"></a>autocomplete属性和novalidate属性</h2><p><code>autocomplete属性</code>控制自动完成功能的开启和关闭。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\">  请输入：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  <span class=\"attr\">name</span>=<span class=\"string\">\"txt\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>novalidate属性</code>用于在提交表单时不对form或input进行验证。（默认浏览器行为）</p>\n<h2 id=\"新增input属性\"><a href=\"#新增input属性\" class=\"headerlink\" title=\"新增input属性\"></a>新增input属性</h2><p>1、<code>required属性</code>，用户必须填写内容才能提交，为空时提交不上。</p>\n<p>2、<code>placeholder属性</code>，提示需要输入的内容。</p>\n<p>3、<code>autofocus属性</code>，用于自动获取焦点。</p>\n<p>4、<code>form属性</code>，用于设置input元素属于哪个表单。在html4中，表单中的所以元素都必须在这个表单的开始标签和结束标签之间，<br>而在html5中，如果要将表单开始和结束标签之外的元素归属到该表单，只需要设置<code>form属性</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myForm\"</span>&gt;</span></span><br><span class=\"line\">    常用地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ftxt\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">临时地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ltxt\"</span> <span class=\"attr\">form</span>=<span class=\"string\">\"myForm\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5、<code>override属性</code>，用于重写表单元素的某些属性，在html5中，可以重写的表单属性有<code>formaction</code>、<code>formmethod</code>、<code>formenctype</code>、<code>formnovalidate</code>和<code>formtarget</code>，这些属性分别用于重写表单的action、enctype、method、novalidate和target属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"a.jsp\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fname\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张三的提交\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">formaction</span>=<span class=\"string\">\"b.jsp\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"李四的提交\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>6、<code>list属性</code>，用于设置输入域的datalist元素，为list属性设置datalist的id属性值，可以将datalist元素与input元素相关联。（谷歌浏览器可用）<br>list属性适应于以下类型的input元素：text、search、url、telephone、email、date、 pickers、number、range和color。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"url_list\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUrl\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"url_list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Microsoft\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.microsoft.com\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Google\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.google.com\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"百度\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.baidu.com\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7、<code>multiple属性</code>，用于设置input元素是否可以有多个值。该属性只适用于email和file类型的input元素。<br>如果给email类型的input元素设置multiple属性，那么在输入框中可以输入多个email地址，多个email地址之间用逗号隔开。<br>如果给file类型的input元素设置multiple属性，那么在打开的选择文件对话框中就可以选择对个文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">E-mail：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myEmail\"</span> <span class=\"attr\">multiple</span> /&gt;</span></span><br><span class=\"line\">File：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myFile\"</span> <span class=\"attr\">multiple</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>8、<code>pattern属性</code>，正则表达式由一系列字符和数字组成，用于匹配某个句法规则。<br>该属性适应于text、search、url、telephone、email和password类型的input元素。<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myName\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"[a-zA-Z]\\w&#123;5,15&#125;$\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>以字母开头，6-16位<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"checkValidity方法\"><a href=\"#checkValidity方法\" class=\"headerlink\" title=\"checkValidity方法\"></a>checkValidity方法</h2><p>HTML5客户端校验：<code>checkValidity</code>方法可以用于检验你的输入是否合法，合法时返回true,否则返回false。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"html5中valid、invalid、required的定义\"><a href=\"#html5中valid、invalid、required的定义\" class=\"headerlink\" title=\"html5中valid、invalid、required的定义\"></a>html5中valid、invalid、required的定义</h2><h3 id=\"required\"><a href=\"#required\" class=\"headerlink\" title=\":required\"></a><code>:required</code></h3><p>必须，那input不能为空的意思。</p>\n<h3 id=\"valid\"><a href=\"#valid\" class=\"headerlink\" title=\":valid\"></a><code>:valid</code></h3><p>有效，即当填写的内容符合要求的时候触发。</p>\n<h3 id=\"invalid\"><a href=\"#invalid\" class=\"headerlink\" title=\":invalid\"></a><code>:invalid</code></h3><p>无效，即当填写的内容不符合要求的时候触发。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:required</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:required</span><span class=\"selector-pseudo\">:invalid</span>, <span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">:invalid</span>&#123;<span class=\"attribute\">box-shadow</span>: none;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"autocomplete属性和novalidate属性\"><a href=\"#autocomplete属性和novalidate属性\" class=\"headerlink\" title=\"autocomplete属性和novalidate属性\"></a>autocomplete属性和novalidate属性</h2><p><code>autocomplete属性</code>控制自动完成功能的开启和关闭。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\">  请输入：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>  <span class=\"attr\">name</span>=<span class=\"string\">\"txt\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>novalidate属性</code>用于在提交表单时不对form或input进行验证。（默认浏览器行为）</p>\n<h2 id=\"新增input属性\"><a href=\"#新增input属性\" class=\"headerlink\" title=\"新增input属性\"></a>新增input属性</h2><p>1、<code>required属性</code>，用户必须填写内容才能提交，为空时提交不上。</p>\n<p>2、<code>placeholder属性</code>，提示需要输入的内容。</p>\n<p>3、<code>autofocus属性</code>，用于自动获取焦点。</p>\n<p>4、<code>form属性</code>，用于设置input元素属于哪个表单。在html4中，表单中的所以元素都必须在这个表单的开始标签和结束标签之间，<br>而在html5中，如果要将表单开始和结束标签之外的元素归属到该表单，只需要设置<code>form属性</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myForm\"</span>&gt;</span></span><br><span class=\"line\">    常用地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ftxt\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">临时地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ltxt\"</span> <span class=\"attr\">form</span>=<span class=\"string\">\"myForm\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5、<code>override属性</code>，用于重写表单元素的某些属性，在html5中，可以重写的表单属性有<code>formaction</code>、<code>formmethod</code>、<code>formenctype</code>、<code>formnovalidate</code>和<code>formtarget</code>，这些属性分别用于重写表单的action、enctype、method、novalidate和target属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"a.jsp\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fname\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张三的提交\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">formaction</span>=<span class=\"string\">\"b.jsp\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"李四的提交\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>6、<code>list属性</code>，用于设置输入域的datalist元素，为list属性设置datalist的id属性值，可以将datalist元素与input元素相关联。（谷歌浏览器可用）<br>list属性适应于以下类型的input元素：text、search、url、telephone、email、date、 pickers、number、range和color。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">list</span>=<span class=\"string\">\"url_list\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myUrl\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">datalist</span> <span class=\"attr\">id</span>=<span class=\"string\">\"url_list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Microsoft\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.microsoft.com\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Google\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.google.com\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">label</span>=<span class=\"string\">\"百度\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"http://www.baidu.com\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7、<code>multiple属性</code>，用于设置input元素是否可以有多个值。该属性只适用于email和file类型的input元素。<br>如果给email类型的input元素设置multiple属性，那么在输入框中可以输入多个email地址，多个email地址之间用逗号隔开。<br>如果给file类型的input元素设置multiple属性，那么在打开的选择文件对话框中就可以选择对个文件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">E-mail：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myEmail\"</span> <span class=\"attr\">multiple</span> /&gt;</span></span><br><span class=\"line\">File：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myFile\"</span> <span class=\"attr\">multiple</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>8、<code>pattern属性</code>，正则表达式由一系列字符和数字组成，用于匹配某个句法规则。<br>该属性适应于text、search、url、telephone、email和password类型的input元素。<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myName\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"[a-zA-Z]\\w&#123;5,15&#125;$\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>以字母开头，6-16位<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"checkValidity方法\"><a href=\"#checkValidity方法\" class=\"headerlink\" title=\"checkValidity方法\"></a>checkValidity方法</h2><p>HTML5客户端校验：<code>checkValidity</code>方法可以用于检验你的输入是否合法，合法时返回true,否则返回false。</p>\n"},{"title":"JS闭包学习笔记","date":"2018-04-23T15:12:14.000Z","_content":"\n# 闭包是什么\n\n> 从技术的角度讲，所有的JavaScript函数都是`闭包`。————《javascript权威指南》\n\n函数的执行依赖于变量作用域，而为了实现这种词法作用域，函数对象的内部状态还需要引用当前的作用域链，通过作用域相互关联起来，使得函数体内的变量都保存在函数作用域内，因此`闭包`的创建依赖于函数。\n\n```js\nfunction foo() {\n    var a = 2;   // 局部变量\n    function bar() {\n        console.log( a );\n    }\n    return bar;\n}\nvar baz = foo();\nbaz(); // 2\n```\n\n函数 `bar()` 的词法作用域能够访问 `foo()` 的内部作用域。然后我们将 `bar()` 函数本身当作一个值类型进行传递。`bar()`依然持有对该作用域的引用，而这个引用就叫作`闭包`。\n\n**简单讲，`闭包`是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。**\n\n# 闭包的作用\n\n因为局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染，即 `让外部函数访问私有变量` 。\n\n## 更多\n\n* 管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中\n\n```js\nvar report = (function(){\n    var imgs = [];\n        return function( src ){\n    var img = new Image();\n    imgs.push( img );\n        img.src = src;\n    }\n})();\n```\n\n* 将代码封装成一个闭包形式，等待时机成熟的时候再使用，比如实现柯里化和反柯里化\n\n```js\nvar currying = function( fn ){\n    var args = [];\n    return function(){\n        if ( arguments.length === 0 ){\n            return fn.apply( this, args );\n        }else{\n            [].push.apply( args, arguments );\n            return arguments.callee;\n        }\n    }\n};\nvar cost = (function(){\n    var money = 0;\n    return function(){\n        for ( var i = 0, l = arguments.length; i < l; i++ ){\n            money += arguments[ i ];\n        }\n        return money;\n    }\n})();\nvar cost = currying( cost ); // 转化成 currying 函数\ncost( 100 ); // 未真正求值\ncost( 200 ); // 未真正求值\ncost( 300 ); // 未真正求值\nalert ( cost() ); // 求值并输出： 600\n```\n\n** 需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露（将变量设置为null）**\n\n# 应用场景\n\n## 循环和回调函数\n\n```js\nfor(var i=1;i<=5;i++){\n    (function(j){\n        setTimeout(function timer(){\n            console.log(j);\n        }, j* 1000);\n    })(i);\n}\n```\n\n在循环的过程中每个迭代都需要一个闭包作用域。\n\n在定时器、事件监听器、ajax请求、跨窗口通信、web workers或者异步任务中，只要使用了`回调函数`，实际上就是在使用`闭包`。\n\n## 实现模块\n\n大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。\n\n```js\nvar MyModules = (function Manager(){\n    var modules = {};\n\n    function define(name, deps, impl){\n        for(var i=0; i<deps.length; i++){\n            deps[i] = modules[deps[i]];\n        }\n        modules[name] = impl.apply(impl, deps);  // `核心`\n    }\n\n    function get(name){\n        return modules[name];\n    }\n    return {\n        define: define,\n        get: get\n    };\n})();\n\nMyModules.define(\"bar\", [], function(){\n    function hello(who){\n        return \"Let me introduce:\" + who;\n    }\n    return {\n        hello: hello\n    };\n});\n\nMyModules.define(\"foo\", [\"bar\"], function(bar){\n    var hungry = \"hippo\";\n\n    function awesome(){\n        console.log(bar.hello(hungry).toUpperCase());\n    }\n    return {\n        awesome: awesome\n    };\n});\n\nvar bar = MyModules.get(\"bar\");\nvar foo = MyModules.get(\"foo\");\n\nconsole.log(bar.hello(\"hippo\"));\nfoo.awesome();\n```\n\n这段代码的核心是`modules[name] = impl.apply(impl, deps)`。为了模块的定义引入了包装函数（可以传入任何依赖），并且将返回值，也就是模块的API，储存在一个根据名字来管理的`模块列表`。\n\n# 参考\n\n[你不知道的JavaScript（上卷）](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes)\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[JavaScript 里的闭包是什么？应用场景有哪些？](https://www.zhihu.com/question/19554716)","source":"_posts/js闭包学习笔记.md","raw":"---\ntitle: JS闭包学习笔记\ndate: 2018-04-23 23:12:14\ncategories: 读书笔记\ntags: [javascript, 闭包]\n---\n\n# 闭包是什么\n\n> 从技术的角度讲，所有的JavaScript函数都是`闭包`。————《javascript权威指南》\n\n函数的执行依赖于变量作用域，而为了实现这种词法作用域，函数对象的内部状态还需要引用当前的作用域链，通过作用域相互关联起来，使得函数体内的变量都保存在函数作用域内，因此`闭包`的创建依赖于函数。\n\n```js\nfunction foo() {\n    var a = 2;   // 局部变量\n    function bar() {\n        console.log( a );\n    }\n    return bar;\n}\nvar baz = foo();\nbaz(); // 2\n```\n\n函数 `bar()` 的词法作用域能够访问 `foo()` 的内部作用域。然后我们将 `bar()` 函数本身当作一个值类型进行传递。`bar()`依然持有对该作用域的引用，而这个引用就叫作`闭包`。\n\n**简单讲，`闭包`是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。**\n\n# 闭包的作用\n\n因为局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染，即 `让外部函数访问私有变量` 。\n\n## 更多\n\n* 管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中\n\n```js\nvar report = (function(){\n    var imgs = [];\n        return function( src ){\n    var img = new Image();\n    imgs.push( img );\n        img.src = src;\n    }\n})();\n```\n\n* 将代码封装成一个闭包形式，等待时机成熟的时候再使用，比如实现柯里化和反柯里化\n\n```js\nvar currying = function( fn ){\n    var args = [];\n    return function(){\n        if ( arguments.length === 0 ){\n            return fn.apply( this, args );\n        }else{\n            [].push.apply( args, arguments );\n            return arguments.callee;\n        }\n    }\n};\nvar cost = (function(){\n    var money = 0;\n    return function(){\n        for ( var i = 0, l = arguments.length; i < l; i++ ){\n            money += arguments[ i ];\n        }\n        return money;\n    }\n})();\nvar cost = currying( cost ); // 转化成 currying 函数\ncost( 100 ); // 未真正求值\ncost( 200 ); // 未真正求值\ncost( 300 ); // 未真正求值\nalert ( cost() ); // 求值并输出： 600\n```\n\n** 需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露（将变量设置为null）**\n\n# 应用场景\n\n## 循环和回调函数\n\n```js\nfor(var i=1;i<=5;i++){\n    (function(j){\n        setTimeout(function timer(){\n            console.log(j);\n        }, j* 1000);\n    })(i);\n}\n```\n\n在循环的过程中每个迭代都需要一个闭包作用域。\n\n在定时器、事件监听器、ajax请求、跨窗口通信、web workers或者异步任务中，只要使用了`回调函数`，实际上就是在使用`闭包`。\n\n## 实现模块\n\n大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。\n\n```js\nvar MyModules = (function Manager(){\n    var modules = {};\n\n    function define(name, deps, impl){\n        for(var i=0; i<deps.length; i++){\n            deps[i] = modules[deps[i]];\n        }\n        modules[name] = impl.apply(impl, deps);  // `核心`\n    }\n\n    function get(name){\n        return modules[name];\n    }\n    return {\n        define: define,\n        get: get\n    };\n})();\n\nMyModules.define(\"bar\", [], function(){\n    function hello(who){\n        return \"Let me introduce:\" + who;\n    }\n    return {\n        hello: hello\n    };\n});\n\nMyModules.define(\"foo\", [\"bar\"], function(bar){\n    var hungry = \"hippo\";\n\n    function awesome(){\n        console.log(bar.hello(hungry).toUpperCase());\n    }\n    return {\n        awesome: awesome\n    };\n});\n\nvar bar = MyModules.get(\"bar\");\nvar foo = MyModules.get(\"foo\");\n\nconsole.log(bar.hello(\"hippo\"));\nfoo.awesome();\n```\n\n这段代码的核心是`modules[name] = impl.apply(impl, deps)`。为了模块的定义引入了包装函数（可以传入任何依赖），并且将返回值，也就是模块的API，储存在一个根据名字来管理的`模块列表`。\n\n# 参考\n\n[你不知道的JavaScript（上卷）](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes)\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[JavaScript 里的闭包是什么？应用场景有哪些？](https://www.zhihu.com/question/19554716)","slug":"js闭包学习笔记","published":1,"updated":"2019-03-15T15:44:55.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g750005fc92po35ular","content":"<h1 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h1><blockquote>\n<p>从技术的角度讲，所有的JavaScript函数都是<code>闭包</code>。————《javascript权威指南》</p>\n</blockquote>\n<p>函数的执行依赖于变量作用域，而为了实现这种词法作用域，函数对象的内部状态还需要引用当前的作用域链，通过作用域相互关联起来，使得函数体内的变量都保存在函数作用域内，因此<code>闭包</code>的创建依赖于函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = foo();</span><br><span class=\"line\">baz(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>函数 <code>bar()</code> 的词法作用域能够访问 <code>foo()</code> 的内部作用域。然后我们将 <code>bar()</code> 函数本身当作一个值类型进行传递。<code>bar()</code>依然持有对该作用域的引用，而这个引用就叫作<code>闭包</code>。</p>\n<p><strong>简单讲，<code>闭包</code>是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。</strong></p>\n<h1 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h1><p>因为局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染，即 <code>让外部函数访问私有变量</code> 。</p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><ul>\n<li>管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> report = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgs = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> src </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    imgs.push( img );</span><br><span class=\"line\">        img.src = src;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将代码封装成一个闭包形式，等待时机成熟的时候再使用，比如实现柯里化和反柯里化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply( <span class=\"keyword\">this</span>, args );</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            [].push.apply( args, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cost = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> money = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"built_in\">arguments</span>.length; i &lt; l; i++ )&#123;</span><br><span class=\"line\">            money += <span class=\"built_in\">arguments</span>[ i ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> cost = currying( cost ); <span class=\"comment\">// 转化成 currying 函数</span></span><br><span class=\"line\">cost( <span class=\"number\">100</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">cost( <span class=\"number\">200</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">cost( <span class=\"number\">300</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">alert ( cost() ); <span class=\"comment\">// 求值并输出： 600</span></span><br></pre></td></tr></table></figure>\n<p><strong> 需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露（将变量设置为null）</strong></p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><h2 id=\"循环和回调函数\"><a href=\"#循环和回调函数\" class=\"headerlink\" title=\"循环和回调函数\"></a>循环和回调函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">        &#125;, j* <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在循环的过程中每个迭代都需要一个闭包作用域。</p>\n<p>在定时器、事件监听器、ajax请求、跨窗口通信、web workers或者异步任务中，只要使用了<code>回调函数</code>，实际上就是在使用<code>闭包</code>。</p>\n<h2 id=\"实现模块\"><a href=\"#实现模块\" class=\"headerlink\" title=\"实现模块\"></a>实现模块</h2><p>大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;deps.length; i++)&#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply(impl, deps);  <span class=\"comment\">// `核心`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">\"bar\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce:\"</span> + who;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello: hello</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">\"foo\"</span>, [<span class=\"string\">\"bar\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        awesome: awesome</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = MyModules.get(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = MyModules.get(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">\"hippo\"</span>));</span><br><span class=\"line\">foo.awesome();</span><br></pre></td></tr></table></figure>\n<p>这段代码的核心是<code>modules[name] = impl.apply(impl, deps)</code>。为了模块的定义引入了包装函数（可以传入任何依赖），并且将返回值，也就是模块的API，储存在一个根据名字来管理的<code>模块列表</code>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes\" target=\"_blank\" rel=\"noopener\">你不知道的JavaScript（上卷）</a><br><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://www.zhihu.com/question/19554716\" target=\"_blank\" rel=\"noopener\">JavaScript 里的闭包是什么？应用场景有哪些？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h1><blockquote>\n<p>从技术的角度讲，所有的JavaScript函数都是<code>闭包</code>。————《javascript权威指南》</p>\n</blockquote>\n<p>函数的执行依赖于变量作用域，而为了实现这种词法作用域，函数对象的内部状态还需要引用当前的作用域链，通过作用域相互关联起来，使得函数体内的变量都保存在函数作用域内，因此<code>闭包</code>的创建依赖于函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;   <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( a );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = foo();</span><br><span class=\"line\">baz(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>函数 <code>bar()</code> 的词法作用域能够访问 <code>foo()</code> 的内部作用域。然后我们将 <code>bar()</code> 函数本身当作一个值类型进行传递。<code>bar()</code>依然持有对该作用域的引用，而这个引用就叫作<code>闭包</code>。</p>\n<p><strong>简单讲，<code>闭包</code>是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。</strong></p>\n<h1 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h1><p>因为局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染，即 <code>让外部函数访问私有变量</code> 。</p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><ul>\n<li>管理私有变量和私有方法，将对变量（状态）的变化封装在安全的环境中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> report = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgs = [];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> src </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    imgs.push( img );</span><br><span class=\"line\">        img.src = src;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将代码封装成一个闭包形式，等待时机成熟的时候再使用，比如实现柯里化和反柯里化</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> currying = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> fn </span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fn.apply( <span class=\"keyword\">this</span>, args );</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            [].push.apply( args, <span class=\"built_in\">arguments</span> );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cost = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> money = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"built_in\">arguments</span>.length; i &lt; l; i++ )&#123;</span><br><span class=\"line\">            money += <span class=\"built_in\">arguments</span>[ i ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> cost = currying( cost ); <span class=\"comment\">// 转化成 currying 函数</span></span><br><span class=\"line\">cost( <span class=\"number\">100</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">cost( <span class=\"number\">200</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">cost( <span class=\"number\">300</span> ); <span class=\"comment\">// 未真正求值</span></span><br><span class=\"line\">alert ( cost() ); <span class=\"comment\">// 求值并输出： 600</span></span><br></pre></td></tr></table></figure>\n<p><strong> 需要注意的，由于闭包内的部分资源无法自动释放，容易造成内存泄露（将变量设置为null）</strong></p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><h2 id=\"循环和回调函数\"><a href=\"#循环和回调函数\" class=\"headerlink\" title=\"循环和回调函数\"></a>循环和回调函数</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">        &#125;, j* <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在循环的过程中每个迭代都需要一个闭包作用域。</p>\n<p>在定时器、事件监听器、ajax请求、跨窗口通信、web workers或者异步任务中，只要使用了<code>回调函数</code>，实际上就是在使用<code>闭包</code>。</p>\n<h2 id=\"实现模块\"><a href=\"#实现模块\" class=\"headerlink\" title=\"实现模块\"></a>实现模块</h2><p>大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;deps.length; i++)&#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply(impl, deps);  <span class=\"comment\">// `核心`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">\"bar\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce:\"</span> + who;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello: hello</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">\"foo\"</span>, [<span class=\"string\">\"bar\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        awesome: awesome</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = MyModules.get(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = MyModules.get(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">\"hippo\"</span>));</span><br><span class=\"line\">foo.awesome();</span><br></pre></td></tr></table></figure>\n<p>这段代码的核心是<code>modules[name] = impl.apply(impl, deps)</code>。为了模块的定义引入了包装函数（可以传入任何依赖），并且将返回值，也就是模块的API，储存在一个根据名字来管理的<code>模块列表</code>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes\" target=\"_blank\" rel=\"noopener\">你不知道的JavaScript（上卷）</a><br><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://www.zhihu.com/question/19554716\" target=\"_blank\" rel=\"noopener\">JavaScript 里的闭包是什么？应用场景有哪些？</a></p>\n"},{"title":"node.js常用知识","date":"2018-04-02T16:00:00.000Z","_content":"\n## `process.cwd()`与`__dirname`的区别\n\n`process.cwd()` 是当前执行node命令时候的文件夹地址 ——工作目录，保证了文件在不同的目录下执行时，路径始终不变。\n`__dirname` 是被执行的js 文件的地址 ——文件所在目录\n\n## `path.join()`和`path.resolve()`的区别\n\n`path.join()` 方法使用平台特定的分隔符把全部给定的 `path` 片段连接到一起，并规范化生成的路径。\n\n```javascript\npath.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// 返回: '/foo/bar/baz/asdf'\n```\n\n`path.resolve()` 方法会把一个路径或路径片段的序列解析为一个绝对路径。其处理方式类似于对这些路径逐一进行cd操作\n\n```javascript\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n```\n```javascript\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/itbilu/node，则输出结果为\n'/home/itbilu/node/wwwroot/static_files/gif/image.gif'\n```\n\n### 对比\n\n```javascript\nconst path = require('path');\nlet myPath = path.join(__dirname,'/img/so');\nlet myPath2 = path.join(__dirname,'./img/so');\nlet myPath3 = path.resolve(__dirname,'/img/so');\nlet myPath4 = path.resolve(__dirname,'./img/so');\nconsole.log(__dirname);           //D:\\myProgram\\test\nconsole.log(myPath);     //D:\\myProgram\\test\\img\\so\nconsole.log(myPath2);   //D:\\myProgram\\test\\img\\so\nconsole.log(myPath3);   //D:\\img\\so<br>\nconsole.log(myPath4);   //D:\\myProgram\\test\\img\\so\n```\n\n## 全局变量\n\n```javascript\nglobal.xxx = 123;\n```\n\n## process进程(常用)\n\n* `process.argv` 属性返回一个数组，包含了启动Node.js进程时的命令行参数\n* `process.argv0` 属性，保存Node.js启动时传入的argv[0]参数值的一份只读副本。\n* `process.execArgv` 属性返回当Node.js进程被启动时，Node.js特定的命令行选项\n* `process.execPath` 属性，返回启动Node.js进程的可执行文件所在的绝对路径\n\n```javascript\nconst {argv, argv0, execArgv, execPath} = process;\nargv.forEach(item => {\n    console.log(item);\n});\nconsole.log(\"argv0:\"+argv0);\nconsole.log(\"execArgv:\"+execArgv);\nconsole.log(\"execPath:\"+execPath);\n```\n\n执行`node --harmony process.js --version`输出：\n\n```bash\nC:\\Program Files\\nodejs\\node.exe\nE:\\study\\nodejs\\process.js\n--version\nargv0:C:/Program Files/nodejs/node.exe\nexecArgv:--harmony\nexecPath:C:\\Program Files\\nodejs\\node.exe\n```\n\n## 事件队列\n\nsetTimeout()、setInterval()、setImmediate()、process.nextTick()\n\nnextTick.js\n\n```javascript\nsetImmediate(() => {\n    console.log('setImmediate延迟执行');\n});\nsetTimeout(() => {\n    console.log('timeout');\n}, 0);\nprocess.nextTick(() => {\n    console.log('nextTick延迟执行');\n});\nconsole.log('正常执行');\n```\n\n执行`node nextTick.js`输出：\n\n```bash\n正常执行\nnextTick延迟执行\ntimeout\nsetImmediate延迟执行\n```\n\n结果看出，`process.nextTick()`中的回调函数执行的优先级要高于setImmediate()。原因在于事件循环对观察者的检查是有先后顺序的，`process.nextTick()`属于idle观察者，`setImmediate()`属于check观察者。在每一个轮循环检查中，idle观察者先于I/O观察者，I/O观察者先于check观察者。\n\n## 解决地狱回调的方法\n\n1、promise\n\n```javascript\nconst fs = require('fs');\nconst promisify = require('util').promisify;\nconst read = promisify(fs.readFile);\nread('./promisify.js').then(data => {\n    console.log(data.toString());\n}).catch(ex => {\n    console.log(ex);\n});\n```\n\n2、async\n\n```javascript\nconst fs = require('fs');\nconst promisify = require('util').promisify;\nconst read = promisify(fs.readFile);\nasync function test(){\n    try{\n        const content = await read('./promisify.js');\n        console.log(content.toString());\n    }catch(ex){\n        console.log(ex);\n    }\n}\n```\n\n## 参考\n\n[Node.js 中文网](http://nodejs.cn/api/)\n\n本文将会持续更新~","source":"_posts/node.js常用知识.md","raw":"---\ntitle: node.js常用知识\ndate: 2018-04-03\ncategories: node\ntags: [node,path,回调]\n---\n\n## `process.cwd()`与`__dirname`的区别\n\n`process.cwd()` 是当前执行node命令时候的文件夹地址 ——工作目录，保证了文件在不同的目录下执行时，路径始终不变。\n`__dirname` 是被执行的js 文件的地址 ——文件所在目录\n\n## `path.join()`和`path.resolve()`的区别\n\n`path.join()` 方法使用平台特定的分隔符把全部给定的 `path` 片段连接到一起，并规范化生成的路径。\n\n```javascript\npath.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// 返回: '/foo/bar/baz/asdf'\n```\n\n`path.resolve()` 方法会把一个路径或路径片段的序列解析为一个绝对路径。其处理方式类似于对这些路径逐一进行cd操作\n\n```javascript\npath.resolve('/foo/bar', './baz')\n// 输出结果为\n'/foo/bar/baz'\npath.resolve('/foo/bar', '/tmp/file/')\n// 输出结果为\n'/tmp/file'\n```\n```javascript\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 当前的工作路径是 /home/itbilu/node，则输出结果为\n'/home/itbilu/node/wwwroot/static_files/gif/image.gif'\n```\n\n### 对比\n\n```javascript\nconst path = require('path');\nlet myPath = path.join(__dirname,'/img/so');\nlet myPath2 = path.join(__dirname,'./img/so');\nlet myPath3 = path.resolve(__dirname,'/img/so');\nlet myPath4 = path.resolve(__dirname,'./img/so');\nconsole.log(__dirname);           //D:\\myProgram\\test\nconsole.log(myPath);     //D:\\myProgram\\test\\img\\so\nconsole.log(myPath2);   //D:\\myProgram\\test\\img\\so\nconsole.log(myPath3);   //D:\\img\\so<br>\nconsole.log(myPath4);   //D:\\myProgram\\test\\img\\so\n```\n\n## 全局变量\n\n```javascript\nglobal.xxx = 123;\n```\n\n## process进程(常用)\n\n* `process.argv` 属性返回一个数组，包含了启动Node.js进程时的命令行参数\n* `process.argv0` 属性，保存Node.js启动时传入的argv[0]参数值的一份只读副本。\n* `process.execArgv` 属性返回当Node.js进程被启动时，Node.js特定的命令行选项\n* `process.execPath` 属性，返回启动Node.js进程的可执行文件所在的绝对路径\n\n```javascript\nconst {argv, argv0, execArgv, execPath} = process;\nargv.forEach(item => {\n    console.log(item);\n});\nconsole.log(\"argv0:\"+argv0);\nconsole.log(\"execArgv:\"+execArgv);\nconsole.log(\"execPath:\"+execPath);\n```\n\n执行`node --harmony process.js --version`输出：\n\n```bash\nC:\\Program Files\\nodejs\\node.exe\nE:\\study\\nodejs\\process.js\n--version\nargv0:C:/Program Files/nodejs/node.exe\nexecArgv:--harmony\nexecPath:C:\\Program Files\\nodejs\\node.exe\n```\n\n## 事件队列\n\nsetTimeout()、setInterval()、setImmediate()、process.nextTick()\n\nnextTick.js\n\n```javascript\nsetImmediate(() => {\n    console.log('setImmediate延迟执行');\n});\nsetTimeout(() => {\n    console.log('timeout');\n}, 0);\nprocess.nextTick(() => {\n    console.log('nextTick延迟执行');\n});\nconsole.log('正常执行');\n```\n\n执行`node nextTick.js`输出：\n\n```bash\n正常执行\nnextTick延迟执行\ntimeout\nsetImmediate延迟执行\n```\n\n结果看出，`process.nextTick()`中的回调函数执行的优先级要高于setImmediate()。原因在于事件循环对观察者的检查是有先后顺序的，`process.nextTick()`属于idle观察者，`setImmediate()`属于check观察者。在每一个轮循环检查中，idle观察者先于I/O观察者，I/O观察者先于check观察者。\n\n## 解决地狱回调的方法\n\n1、promise\n\n```javascript\nconst fs = require('fs');\nconst promisify = require('util').promisify;\nconst read = promisify(fs.readFile);\nread('./promisify.js').then(data => {\n    console.log(data.toString());\n}).catch(ex => {\n    console.log(ex);\n});\n```\n\n2、async\n\n```javascript\nconst fs = require('fs');\nconst promisify = require('util').promisify;\nconst read = promisify(fs.readFile);\nasync function test(){\n    try{\n        const content = await read('./promisify.js');\n        console.log(content.toString());\n    }catch(ex){\n        console.log(ex);\n    }\n}\n```\n\n## 参考\n\n[Node.js 中文网](http://nodejs.cn/api/)\n\n本文将会持续更新~","slug":"node.js常用知识","published":1,"updated":"2018-04-10T15:15:30.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g760006fc92mbh1lap6","content":"<h2 id=\"process-cwd-与-dirname的区别\"><a href=\"#process-cwd-与-dirname的区别\" class=\"headerlink\" title=\"process.cwd()与__dirname的区别\"></a><code>process.cwd()</code>与<code>__dirname</code>的区别</h2><p><code>process.cwd()</code> 是当前执行node命令时候的文件夹地址 ——工作目录，保证了文件在不同的目录下执行时，路径始终不变。<br><code>__dirname</code> 是被执行的js 文件的地址 ——文件所在目录</p>\n<h2 id=\"path-join-和path-resolve-的区别\"><a href=\"#path-join-和path-resolve-的区别\" class=\"headerlink\" title=\"path.join()和path.resolve()的区别\"></a><code>path.join()</code>和<code>path.resolve()</code>的区别</h2><p><code>path.join()</code> 方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'/foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'baz/asdf'</span>, <span class=\"string\">'quux'</span>, <span class=\"string\">'..'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回: '/foo/bar/baz/asdf'</span></span><br></pre></td></tr></table></figure>\n<p><code>path.resolve()</code> 方法会把一个路径或路径片段的序列解析为一个绝对路径。其处理方式类似于对这些路径逐一进行cd操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'./baz'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/foo/bar/baz'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'/tmp/file/'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/tmp/file'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.resolve(<span class=\"string\">'wwwroot'</span>, <span class=\"string\">'static_files/png/'</span>, <span class=\"string\">'../gif/image.gif'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 当前的工作路径是 /home/itbilu/node，则输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/home/itbilu/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath = path.join(__dirname,<span class=\"string\">'/img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath2 = path.join(__dirname,<span class=\"string\">'./img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath3 = path.resolve(__dirname,<span class=\"string\">'/img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath4 = path.resolve(__dirname,<span class=\"string\">'./img/so'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(__dirname);           <span class=\"comment\">//D:\\myProgram\\test</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath);     <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath2);   <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath3);   <span class=\"comment\">//D:\\img\\so&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath4);   <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">global.xxx = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"process进程-常用\"><a href=\"#process进程-常用\" class=\"headerlink\" title=\"process进程(常用)\"></a>process进程(常用)</h2><ul>\n<li><code>process.argv</code> 属性返回一个数组，包含了启动Node.js进程时的命令行参数</li>\n<li><code>process.argv0</code> 属性，保存Node.js启动时传入的argv[0]参数值的一份只读副本。</li>\n<li><code>process.execArgv</code> 属性返回当Node.js进程被启动时，Node.js特定的命令行选项</li>\n<li><code>process.execPath</code> 属性，返回启动Node.js进程的可执行文件所在的绝对路径</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;argv, argv0, execArgv, execPath&#125; = process;</span><br><span class=\"line\">argv.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"argv0:\"</span>+argv0);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"execArgv:\"</span>+execArgv);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"execPath:\"</span>+execPath);</span><br></pre></td></tr></table></figure>\n<p>执行<code>node --harmony process.js --version</code>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\nodejs\\node.exe</span><br><span class=\"line\">E:\\study\\nodejs\\process.js</span><br><span class=\"line\">--version</span><br><span class=\"line\">argv0:C:/Program Files/nodejs/node.exe</span><br><span class=\"line\">execArgv:--harmony</span><br><span class=\"line\">execPath:C:\\Program Files\\nodejs\\node.exe</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件队列\"><a href=\"#事件队列\" class=\"headerlink\" title=\"事件队列\"></a>事件队列</h2><p>setTimeout()、setInterval()、setImmediate()、process.nextTick()</p>\n<p>nextTick.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setImmediate延迟执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick延迟执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正常执行'</span>);</span><br></pre></td></tr></table></figure>\n<p>执行<code>node nextTick.js</code>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">正常执行</span><br><span class=\"line\">nextTick延迟执行</span><br><span class=\"line\">timeout</span><br><span class=\"line\">setImmediate延迟执行</span><br></pre></td></tr></table></figure>\n<p>结果看出，<code>process.nextTick()</code>中的回调函数执行的优先级要高于setImmediate()。原因在于事件循环对观察者的检查是有先后顺序的，<code>process.nextTick()</code>属于idle观察者，<code>setImmediate()</code>属于check观察者。在每一个轮循环检查中，idle观察者先于I/O观察者，I/O观察者先于check观察者。</p>\n<h2 id=\"解决地狱回调的方法\"><a href=\"#解决地狱回调的方法\" class=\"headerlink\" title=\"解决地狱回调的方法\"></a>解决地狱回调的方法</h2><p>1、promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).promisify;</span><br><span class=\"line\"><span class=\"keyword\">const</span> read = promisify(fs.readFile);</span><br><span class=\"line\">read(<span class=\"string\">'./promisify.js'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">ex</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2、async</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).promisify;</span><br><span class=\"line\"><span class=\"keyword\">const</span> read = promisify(fs.readFile);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> content = <span class=\"keyword\">await</span> read(<span class=\"string\">'./promisify.js'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ex)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://nodejs.cn/api/\" target=\"_blank\" rel=\"noopener\">Node.js 中文网</a></p>\n<p>本文将会持续更新~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"process-cwd-与-dirname的区别\"><a href=\"#process-cwd-与-dirname的区别\" class=\"headerlink\" title=\"process.cwd()与__dirname的区别\"></a><code>process.cwd()</code>与<code>__dirname</code>的区别</h2><p><code>process.cwd()</code> 是当前执行node命令时候的文件夹地址 ——工作目录，保证了文件在不同的目录下执行时，路径始终不变。<br><code>__dirname</code> 是被执行的js 文件的地址 ——文件所在目录</p>\n<h2 id=\"path-join-和path-resolve-的区别\"><a href=\"#path-join-和path-resolve-的区别\" class=\"headerlink\" title=\"path.join()和path.resolve()的区别\"></a><code>path.join()</code>和<code>path.resolve()</code>的区别</h2><p><code>path.join()</code> 方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'/foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'baz/asdf'</span>, <span class=\"string\">'quux'</span>, <span class=\"string\">'..'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回: '/foo/bar/baz/asdf'</span></span><br></pre></td></tr></table></figure>\n<p><code>path.resolve()</code> 方法会把一个路径或路径片段的序列解析为一个绝对路径。其处理方式类似于对这些路径逐一进行cd操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'./baz'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/foo/bar/baz'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'/tmp/file/'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/tmp/file'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.resolve(<span class=\"string\">'wwwroot'</span>, <span class=\"string\">'static_files/png/'</span>, <span class=\"string\">'../gif/image.gif'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 当前的工作路径是 /home/itbilu/node，则输出结果为</span></span><br><span class=\"line\"><span class=\"string\">'/home/itbilu/node/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath = path.join(__dirname,<span class=\"string\">'/img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath2 = path.join(__dirname,<span class=\"string\">'./img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath3 = path.resolve(__dirname,<span class=\"string\">'/img/so'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPath4 = path.resolve(__dirname,<span class=\"string\">'./img/so'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(__dirname);           <span class=\"comment\">//D:\\myProgram\\test</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath);     <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath2);   <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath3);   <span class=\"comment\">//D:\\img\\so&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPath4);   <span class=\"comment\">//D:\\myProgram\\test\\img\\so</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">global.xxx = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"process进程-常用\"><a href=\"#process进程-常用\" class=\"headerlink\" title=\"process进程(常用)\"></a>process进程(常用)</h2><ul>\n<li><code>process.argv</code> 属性返回一个数组，包含了启动Node.js进程时的命令行参数</li>\n<li><code>process.argv0</code> 属性，保存Node.js启动时传入的argv[0]参数值的一份只读副本。</li>\n<li><code>process.execArgv</code> 属性返回当Node.js进程被启动时，Node.js特定的命令行选项</li>\n<li><code>process.execPath</code> 属性，返回启动Node.js进程的可执行文件所在的绝对路径</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;argv, argv0, execArgv, execPath&#125; = process;</span><br><span class=\"line\">argv.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"argv0:\"</span>+argv0);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"execArgv:\"</span>+execArgv);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"execPath:\"</span>+execPath);</span><br></pre></td></tr></table></figure>\n<p>执行<code>node --harmony process.js --version</code>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\nodejs\\node.exe</span><br><span class=\"line\">E:\\study\\nodejs\\process.js</span><br><span class=\"line\">--version</span><br><span class=\"line\">argv0:C:/Program Files/nodejs/node.exe</span><br><span class=\"line\">execArgv:--harmony</span><br><span class=\"line\">execPath:C:\\Program Files\\nodejs\\node.exe</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件队列\"><a href=\"#事件队列\" class=\"headerlink\" title=\"事件队列\"></a>事件队列</h2><p>setTimeout()、setInterval()、setImmediate()、process.nextTick()</p>\n<p>nextTick.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setImmediate延迟执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick延迟执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正常执行'</span>);</span><br></pre></td></tr></table></figure>\n<p>执行<code>node nextTick.js</code>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">正常执行</span><br><span class=\"line\">nextTick延迟执行</span><br><span class=\"line\">timeout</span><br><span class=\"line\">setImmediate延迟执行</span><br></pre></td></tr></table></figure>\n<p>结果看出，<code>process.nextTick()</code>中的回调函数执行的优先级要高于setImmediate()。原因在于事件循环对观察者的检查是有先后顺序的，<code>process.nextTick()</code>属于idle观察者，<code>setImmediate()</code>属于check观察者。在每一个轮循环检查中，idle观察者先于I/O观察者，I/O观察者先于check观察者。</p>\n<h2 id=\"解决地狱回调的方法\"><a href=\"#解决地狱回调的方法\" class=\"headerlink\" title=\"解决地狱回调的方法\"></a>解决地狱回调的方法</h2><p>1、promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).promisify;</span><br><span class=\"line\"><span class=\"keyword\">const</span> read = promisify(fs.readFile);</span><br><span class=\"line\">read(<span class=\"string\">'./promisify.js'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">ex</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2、async</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).promisify;</span><br><span class=\"line\"><span class=\"keyword\">const</span> read = promisify(fs.readFile);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> content = <span class=\"keyword\">await</span> read(<span class=\"string\">'./promisify.js'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content.toString());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ex)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://nodejs.cn/api/\" target=\"_blank\" rel=\"noopener\">Node.js 中文网</a></p>\n<p>本文将会持续更新~</p>\n"},{"title":"arr.push.apply如何实现数组降维","date":"2018-05-09T08:44:11.000Z","_content":"\n# 前言\n\n这个问题是出自学习《javascript ES6 函数式编程入门经典》第五章 5-7 concatAll 函数时的疑惑。\n\n有这样的一个对象数组：\n\n```js\nlet apressBooks = [\n  {\n    name : \"beginners\",\n    bookDetails : [\n      {\n        \"id\": 111,\n        \"title\": \"C# 6.0\"\n      },\n      {\n        \"id\": 222,\n        \"title\": \"Efficient Learning Machines\"\n      }\n    ]\n  },\n  {\n      name : \"pro\",\n      bookDetails : [\n      {\n        \"id\": 333,\n        \"title\": \"Pro AngularJS\"\n      },\n      {\n        \"id\": 444,\n        \"title\": \"Pro ASP.NET\"\n      }\n    ]\n  }\n];\n```\n\n假设我们想要获取所有`bookDetails`的数据，我们先使用`map`函数。\n\n`map`函数\n\n```js\nconst map = (array,fn) => {\n  let results = []\n  for(const value of array)\n      results.push(fn(value))\n  return results;\n}\n```\n\n使用`map`函数\n\n```js\nmap(apressBooks, (book)=>{\n    return book.bookDetails\n})\n```\n\n返回结果：\n\n```js\n[\n    [\n      {\n        \"id\": 111,\n        \"title\": \"C# 6.0\"\n      },\n      {\n        \"id\": 222,\n        \"title\": \"Efficient Learning Machines\"\n      }\n    ],\n    [\n      {\n        \"id\": 333,\n        \"title\": \"Pro AngularJS\"\n      },\n      {\n        \"id\": 444,\n        \"title\": \"Pro ASP.NET\"\n      }\n    ]\n]\n```\n\n如你所见，`map`函数返回的数据包含了数组中的数组。因为 `bookDetails` 本身就是一个数组，那么我们还需要将所有嵌套数组连接到一个数组中（降维操作）！这时候要使用 `concatAll` 函数。\n\n`concatAll` 函数\n\n```js\nconst concatAll = (array, fn) => {\n    let results = [];\n    for(const value of array){\n        results.push.array(results, value);  // 为什么不是results.push(value);\n    }\n    return results;\n}\n```\n\n`concatAll` 的主要目的是`将嵌套数组转换为非嵌套的单一数据`。\n\n使用 `concatAll` 函数\n\n```js\nconcatAll(\n    map(apressBooks, (book)=>{\n        return book.bookDetails\n    })\n)\n```\n\n返回结果（正是我们想要的结果）：\n\n```js\n[\n  {\n    \"id\": 111,\n    \"title\": \"C# 6.0\"\n  },\n  {\n    \"id\": 222,\n    \"title\": \"Efficient Learning Machines\"\n  },\n  {\n    \"id\": 333,\n    \"title\": \"Pro AngularJS\"\n  },\n  {\n    \"id\": 444,\n    \"title\": \"Pro ASP.NET\"\n  }\n]\n```\n\n# 疑惑\n\n`concatAll` 函数中的 `results.push.array(results, value)` 为什么要这么调用，不能直接 `results.push(value)` ？\n\n我们打印一下`value`是什么值。\n\n```js\n[\n  {\n    \"id\": 111,\n    \"title\": \"C# 6.0\"\n  },\n  {\n    \"id\": 222,\n    \"title\": \"Efficient Learning Machines\"\n  }\n]\n[\n  {\n    \"id\": 333,\n    \"title\": \"Pro AngularJS\"\n  },\n  {\n    \"id\": 444,\n    \"title\": \"Pro ASP.NET\"\n  }\n]\n```\n\n是两个数组，那直接 `results.push(value)` 调用的话，\n\n```js\nconst concatAll = (array, fn) => {\n    let results = [];\n    for(const value of array){\n        results.push(value);\n    }\n    return results;\n}\n```\n\n可想而知，结果自然还是不对的。也就是 `map` 函数返回的结果，看上。\n\n# 答案\n\n`call`和`apply`的区别\n\n> `Function.prototype.call` 和 `Function.prototype.apply` 都是非常常用的方法。它们的作用一模一样，区别仅在于传入参数形式的不同。\n\napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，** 这个集合可以为数组，也可以为类数组 **， apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n```js\nvar func1 = function(arg1, arg2) {};\n```\n\n就可以通过 `func1.call(this, arg1, arg2)` 或者 `func1.apply(this, [arg1, arg2])` 来调用。\n\n所以，** `apply`第二个参数放的是数组形式 ** ，`results.push.array(results, value)` 这里的`value`就解释为 `[arg1, arg2]`，自然而然可以 `push` 到 `map`函数返回的每个实参，从而实现将嵌套数组转换为非嵌套的单一数据。\n\n# 结语\n\n学习每一个知识的时候，如果不去深究其原因，学到的只是表面的皮毛。\n\n还有，函数式编程真的很优雅及强大~\n\n# 参考\n\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[javascript ES6 函数式编程入门经典](https://item.jd.com/12257861.html)\n[关于红宝石书里的一个问题.push.apply()?](https://www.zhihu.com/question/60828411)\n[如何理解和熟练运用js中的call及apply？](https://www.zhihu.com/question/20289071/answer/14745394)","source":"_posts/arr.push.apply如何实现数组降维.md","raw":"---\ntitle: 'arr.push.apply如何实现数组降维'\ndate: 2018-05-09 16:44:11\ncategories: javascript\ntags: [javascript, apply, push]\n---\n\n# 前言\n\n这个问题是出自学习《javascript ES6 函数式编程入门经典》第五章 5-7 concatAll 函数时的疑惑。\n\n有这样的一个对象数组：\n\n```js\nlet apressBooks = [\n  {\n    name : \"beginners\",\n    bookDetails : [\n      {\n        \"id\": 111,\n        \"title\": \"C# 6.0\"\n      },\n      {\n        \"id\": 222,\n        \"title\": \"Efficient Learning Machines\"\n      }\n    ]\n  },\n  {\n      name : \"pro\",\n      bookDetails : [\n      {\n        \"id\": 333,\n        \"title\": \"Pro AngularJS\"\n      },\n      {\n        \"id\": 444,\n        \"title\": \"Pro ASP.NET\"\n      }\n    ]\n  }\n];\n```\n\n假设我们想要获取所有`bookDetails`的数据，我们先使用`map`函数。\n\n`map`函数\n\n```js\nconst map = (array,fn) => {\n  let results = []\n  for(const value of array)\n      results.push(fn(value))\n  return results;\n}\n```\n\n使用`map`函数\n\n```js\nmap(apressBooks, (book)=>{\n    return book.bookDetails\n})\n```\n\n返回结果：\n\n```js\n[\n    [\n      {\n        \"id\": 111,\n        \"title\": \"C# 6.0\"\n      },\n      {\n        \"id\": 222,\n        \"title\": \"Efficient Learning Machines\"\n      }\n    ],\n    [\n      {\n        \"id\": 333,\n        \"title\": \"Pro AngularJS\"\n      },\n      {\n        \"id\": 444,\n        \"title\": \"Pro ASP.NET\"\n      }\n    ]\n]\n```\n\n如你所见，`map`函数返回的数据包含了数组中的数组。因为 `bookDetails` 本身就是一个数组，那么我们还需要将所有嵌套数组连接到一个数组中（降维操作）！这时候要使用 `concatAll` 函数。\n\n`concatAll` 函数\n\n```js\nconst concatAll = (array, fn) => {\n    let results = [];\n    for(const value of array){\n        results.push.array(results, value);  // 为什么不是results.push(value);\n    }\n    return results;\n}\n```\n\n`concatAll` 的主要目的是`将嵌套数组转换为非嵌套的单一数据`。\n\n使用 `concatAll` 函数\n\n```js\nconcatAll(\n    map(apressBooks, (book)=>{\n        return book.bookDetails\n    })\n)\n```\n\n返回结果（正是我们想要的结果）：\n\n```js\n[\n  {\n    \"id\": 111,\n    \"title\": \"C# 6.0\"\n  },\n  {\n    \"id\": 222,\n    \"title\": \"Efficient Learning Machines\"\n  },\n  {\n    \"id\": 333,\n    \"title\": \"Pro AngularJS\"\n  },\n  {\n    \"id\": 444,\n    \"title\": \"Pro ASP.NET\"\n  }\n]\n```\n\n# 疑惑\n\n`concatAll` 函数中的 `results.push.array(results, value)` 为什么要这么调用，不能直接 `results.push(value)` ？\n\n我们打印一下`value`是什么值。\n\n```js\n[\n  {\n    \"id\": 111,\n    \"title\": \"C# 6.0\"\n  },\n  {\n    \"id\": 222,\n    \"title\": \"Efficient Learning Machines\"\n  }\n]\n[\n  {\n    \"id\": 333,\n    \"title\": \"Pro AngularJS\"\n  },\n  {\n    \"id\": 444,\n    \"title\": \"Pro ASP.NET\"\n  }\n]\n```\n\n是两个数组，那直接 `results.push(value)` 调用的话，\n\n```js\nconst concatAll = (array, fn) => {\n    let results = [];\n    for(const value of array){\n        results.push(value);\n    }\n    return results;\n}\n```\n\n可想而知，结果自然还是不对的。也就是 `map` 函数返回的结果，看上。\n\n# 答案\n\n`call`和`apply`的区别\n\n> `Function.prototype.call` 和 `Function.prototype.apply` 都是非常常用的方法。它们的作用一模一样，区别仅在于传入参数形式的不同。\n\napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，** 这个集合可以为数组，也可以为类数组 **， apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n```js\nvar func1 = function(arg1, arg2) {};\n```\n\n就可以通过 `func1.call(this, arg1, arg2)` 或者 `func1.apply(this, [arg1, arg2])` 来调用。\n\n所以，** `apply`第二个参数放的是数组形式 ** ，`results.push.array(results, value)` 这里的`value`就解释为 `[arg1, arg2]`，自然而然可以 `push` 到 `map`函数返回的每个实参，从而实现将嵌套数组转换为非嵌套的单一数据。\n\n# 结语\n\n学习每一个知识的时候，如果不去深究其原因，学到的只是表面的皮毛。\n\n还有，函数式编程真的很优雅及强大~\n\n# 参考\n\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n[javascript ES6 函数式编程入门经典](https://item.jd.com/12257861.html)\n[关于红宝石书里的一个问题.push.apply()?](https://www.zhihu.com/question/60828411)\n[如何理解和熟练运用js中的call及apply？](https://www.zhihu.com/question/20289071/answer/14745394)","slug":"arr.push.apply如何实现数组降维","published":1,"updated":"2019-03-15T15:44:55.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g780007fc92ri4632s3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这个问题是出自学习《javascript ES6 函数式编程入门经典》第五章 5-7 concatAll 函数时的疑惑。</p>\n<p>有这样的一个对象数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> apressBooks = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"beginners\"</span>,</span><br><span class=\"line\">    bookDetails : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      name : <span class=\"string\">\"pro\"</span>,</span><br><span class=\"line\">      bookDetails : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>假设我们想要获取所有<code>bookDetails</code>的数据，我们先使用<code>map</code>函数。</p>\n<p><code>map</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">array,fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)</span><br><span class=\"line\">      results.push(fn(value))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>map</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">map(apressBooks, (book)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book.bookDetails</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>如你所见，<code>map</code>函数返回的数据包含了数组中的数组。因为 <code>bookDetails</code> 本身就是一个数组，那么我们还需要将所有嵌套数组连接到一个数组中（降维操作）！这时候要使用 <code>concatAll</code> 函数。</p>\n<p><code>concatAll</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> concatAll = <span class=\"function\">(<span class=\"params\">array, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)&#123;</span><br><span class=\"line\">        results.push.array(results, value);  <span class=\"comment\">// 为什么不是results.push(value);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>concatAll</code> 的主要目的是<code>将嵌套数组转换为非嵌套的单一数据</code>。</p>\n<p>使用 <code>concatAll</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">concatAll(</span><br><span class=\"line\">    map(apressBooks, (book)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> book.bookDetails</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>返回结果（正是我们想要的结果）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><p><code>concatAll</code> 函数中的 <code>results.push.array(results, value)</code> 为什么要这么调用，不能直接 <code>results.push(value)</code> ？</p>\n<p>我们打印一下<code>value</code>是什么值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>是两个数组，那直接 <code>results.push(value)</code> 调用的话，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> concatAll = <span class=\"function\">(<span class=\"params\">array, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)&#123;</span><br><span class=\"line\">        results.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可想而知，结果自然还是不对的。也就是 <code>map</code> 函数返回的结果，看上。</p>\n<h1 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h1><p><code>call</code>和<code>apply</code>的区别</p>\n<blockquote>\n<p><code>Function.prototype.call</code> 和 <code>Function.prototype.apply</code> 都是非常常用的方法。它们的作用一模一样，区别仅在于传入参数形式的不同。</p>\n</blockquote>\n<p>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，<strong> 这个集合可以为数组，也可以为类数组 </strong>， apply 方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n<p>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>就可以通过 <code>func1.call(this, arg1, arg2)</code> 或者 <code>func1.apply(this, [arg1, arg2])</code> 来调用。</p>\n<p>所以，<strong> <code>apply</code>第二个参数放的是数组形式 </strong> ，<code>results.push.array(results, value)</code> 这里的<code>value</code>就解释为 <code>[arg1, arg2]</code>，自然而然可以 <code>push</code> 到 <code>map</code>函数返回的每个实参，从而实现将嵌套数组转换为非嵌套的单一数据。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>学习每一个知识的时候，如果不去深究其原因，学到的只是表面的皮毛。</p>\n<p>还有，函数式编程真的很优雅及强大~</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://item.jd.com/12257861.html\" target=\"_blank\" rel=\"noopener\">javascript ES6 函数式编程入门经典</a><br><a href=\"https://www.zhihu.com/question/60828411\" target=\"_blank\" rel=\"noopener\">关于红宝石书里的一个问题.push.apply()?</a><br><a href=\"https://www.zhihu.com/question/20289071/answer/14745394\" target=\"_blank\" rel=\"noopener\">如何理解和熟练运用js中的call及apply？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这个问题是出自学习《javascript ES6 函数式编程入门经典》第五章 5-7 concatAll 函数时的疑惑。</p>\n<p>有这样的一个对象数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> apressBooks = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"beginners\"</span>,</span><br><span class=\"line\">    bookDetails : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      name : <span class=\"string\">\"pro\"</span>,</span><br><span class=\"line\">      bookDetails : [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>假设我们想要获取所有<code>bookDetails</code>的数据，我们先使用<code>map</code>函数。</p>\n<p><code>map</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">array,fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> results = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)</span><br><span class=\"line\">      results.push(fn(value))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>map</code>函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">map(apressBooks, (book)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book.bookDetails</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>如你所见，<code>map</code>函数返回的数据包含了数组中的数组。因为 <code>bookDetails</code> 本身就是一个数组，那么我们还需要将所有嵌套数组连接到一个数组中（降维操作）！这时候要使用 <code>concatAll</code> 函数。</p>\n<p><code>concatAll</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> concatAll = <span class=\"function\">(<span class=\"params\">array, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)&#123;</span><br><span class=\"line\">        results.push.array(results, value);  <span class=\"comment\">// 为什么不是results.push(value);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>concatAll</code> 的主要目的是<code>将嵌套数组转换为非嵌套的单一数据</code>。</p>\n<p>使用 <code>concatAll</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">concatAll(</span><br><span class=\"line\">    map(apressBooks, (book)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> book.bookDetails</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>返回结果（正是我们想要的结果）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><p><code>concatAll</code> 函数中的 <code>results.push.array(results, value)</code> 为什么要这么调用，不能直接 <code>results.push(value)</code> ？</p>\n<p>我们打印一下<code>value</code>是什么值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"C# 6.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Efficient Learning Machines\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">333</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro AngularJS\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"number\">444</span>,</span><br><span class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Pro ASP.NET\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>是两个数组，那直接 <code>results.push(value)</code> 调用的话，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> concatAll = <span class=\"function\">(<span class=\"params\">array, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> value <span class=\"keyword\">of</span> array)&#123;</span><br><span class=\"line\">        results.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可想而知，结果自然还是不对的。也就是 <code>map</code> 函数返回的结果，看上。</p>\n<h1 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h1><p><code>call</code>和<code>apply</code>的区别</p>\n<blockquote>\n<p><code>Function.prototype.call</code> 和 <code>Function.prototype.apply</code> 都是非常常用的方法。它们的作用一模一样，区别仅在于传入参数形式的不同。</p>\n</blockquote>\n<p>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，<strong> 这个集合可以为数组，也可以为类数组 </strong>， apply 方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n<p>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>就可以通过 <code>func1.call(this, arg1, arg2)</code> 或者 <code>func1.apply(this, [arg1, arg2])</code> 来调用。</p>\n<p>所以，<strong> <code>apply</code>第二个参数放的是数组形式 </strong> ，<code>results.push.array(results, value)</code> 这里的<code>value</code>就解释为 <code>[arg1, arg2]</code>，自然而然可以 <code>push</code> 到 <code>map</code>函数返回的每个实参，从而实现将嵌套数组转换为非嵌套的单一数据。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>学习每一个知识的时候，如果不去深究其原因，学到的只是表面的皮毛。</p>\n<p>还有，函数式编程真的很优雅及强大~</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a><br><a href=\"https://item.jd.com/12257861.html\" target=\"_blank\" rel=\"noopener\">javascript ES6 函数式编程入门经典</a><br><a href=\"https://www.zhihu.com/question/60828411\" target=\"_blank\" rel=\"noopener\">关于红宝石书里的一个问题.push.apply()?</a><br><a href=\"https://www.zhihu.com/question/20289071/answer/14745394\" target=\"_blank\" rel=\"noopener\">如何理解和熟练运用js中的call及apply？</a></p>\n"},{"title":"this到底是什么？","date":"2018-04-15T16:00:00.000Z","line_number":false,"_content":"\n# 为什么要使用this\n\n记得小学上英语课的时候，学着介绍自己的名字，每个人都是造一个同样的句型。\n\n`普通函数`写法\n\n```javascript\nfunction myName(name){\n    console.log('my name is ' + name);\n}\nmyName('xiaoming'); // my name is xiaoming\nmyName('xiaohong'); // my name is xiaohong\n```\n\n使用`this`写法\n\n```javascript\nfunction myName(){\n    console.log('my name is ' + this.name);\n}\nvar a = { name: 'xiaoming' };\nvar b = { name: 'xiaohong' };\nmyName.call(a); // my name is xiaoming\nmyName.call(b); // my name is xiaohong\n```\n\n介绍自己的名字当然比较简单，那么我们来增加点难度。\n\n`普通函数`写法\n\n```javascript\nfunction myName(name){\n    return \"my name is \" + name;\n}\n\nfunction mySex(sex){\n    return \"I'm a \" + sex;\n}\n\nfunction myAge(age){\n    return \"I'm \" + age + \" years old\";\n}\n\nfunction introduce(name, sex, age){\n    var greeting = myName(name) + '. ' + mySex(sex) + '. ' + myAge(age);\n    console.log(greeting);\n}\nintroduce('xiaoming','boy','9'); // my name is xiaoming. I'm a boy. I'm 9 years old\nintroduce('xiaohong','girl','7'); // my name is xiaohong. I'm a girl. I'm 7 years old\n```\n\n使用`this`写法\n\n```javascript\nfunction myName(){\n    return \"my name is \" + this.name;\n}\n\nfunction mySex(){\n    return \"I'm a \" + this.sex;\n}\n\nfunction myAge(){\n    return \"I'm \" + this.age + \" years old\";\n}\n\nfunction introduce(){\n    var greeting = myName.call(this) + '. ' + mySex.call(this) + '. ' + myAge.call(this);\n    console.log(greeting);\n}\n\nvar a = {\n    name: 'xiaoming',\n    sex: 'boy',\n    age: '9'\n};\n\nvar b = {\n    name: 'xiaohong',\n    sex: 'girl',\n    age: '7'\n};\n\nintroduce.call(a); // my name is xiaoming. I'm a boy. I'm 9 years old\nintroduce.call(b); // my name is xiaohong. I'm a girl. I'm 7 years old\n```\n\n如果不使用`this`，那么就需要给`myName()`函数显式的传入一个参数`name`来代替不同的上下文对象，单单一个参数还可以接受，可随着你的使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱。所以，`this`提供了一种更优雅的方式来隐式“传递”一个对象的引用，可以将API设计的更加`简洁`易于`复用`。\n\n# this到底是什么？\n\n> `this`是运行时进行绑定的，是基于`函数的执行环境动态绑定`的，而非函数被声明时的环境。\n\n当一个函数被调用时，会创建一个活动记录（也称为上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数 等信息。`this`就是这个记录的一个函数，会在函数执行的过程中用到。\n\n# this的指向\n\n* 默认绑定（作为普通函数调用，指向`全局对象`）\n* 隐式绑定（作为对象的方法调用，指向`该调用对象`）\n* 显式绑定（使用call和apply方法，指向`第一个参数对象`）\n* new绑定（作为构造函数调用，指向`新创建的对象`）\n\n## 默认绑定\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的`this`总是指向`全局对象`。\n\n```javascript\nwindow.name = 'globalName';\n\nfunction getName(){\n    var name = 'functionName';\n    console.log(this.name);  // globalName\n}\n\ngetName();\n```\n\n严格模式\n\n```javascript\nwindow.name = 'globalName';\n\nfunction getName(){\n    \"use strict\";\n    var name = 'functionName';\n    console.log(this.name);  // Uncaught TypeError: Cannot read property 'name' of undefined\n}\n\ngetName();\n```\n\n如果使用`严格模式`，则不能将全局对象用于默认绑定。\n\n## 隐式绑定\n\n当函数作为对象的方法被调用时，`this`指向`该对象`。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj = {\n    a: 2,\n    foo: foo\n};\n\nobj.foo(); // 2\n```\n\n对象属性引用链中只有`上一层`或者说是`最后一层`在调用位置中起作用。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj2 = {\n    a: 42,\n    foo: foo\n};\n\nvar obj1 = {\n    a: 2,\n    obj2: obj2\n}\n\nobj1.obj2.foo(); // 42\n```\n\n## 显式绑定\n\n`Function`的原型定义了两个方法，它们是`Function.prototype.call`和`Function.prototype.apply`。它们的第一个参数，允许直接指定`this`的绑定对象。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj = {\n    a: 2\n};\n\nfoo.call(obj); // 2\n```\n\n### call和apply的区别\n\n`apply`接收两个参数，第一个参数指定了函数体内`this`对象的指向，第二个参数为一个带下标的集合，可以是`数组`或`类数组`，可以将这个集合中的元素作为参数传递。\n\n```javascript\nvar func = function(a,b,c){\n    alert([a,b,c]);  // 输出 [1,2,3]\n};\n\nfunc.apply(null, [1,2,3]);\n```\n\n`call`传入的参数数量不固定，但是跟`apply`相同的是，第一个参数也是代表了函数体内`this`对象的指向，之后的参数每个依次传入函数。\n\n```javascript\nvar func = function(a,b,c){\n    alert([a,b,c]);  // 输出 [1,2,3]\n};\n\nfunc.call(null,1,2,3);\n```\n\n### bind的用法\n\n`bind`是把它的上下文绑定到`bind()`括号中的参数上，它`不会执行`，而只是返回一个改变了上下文的函数副本，而call和apply是`直接执行`函数。\n\n```javascript\nvar button = document.getElementById(\"button\"),\n    text = document.getElementById(\"text\");\nbutton.onclick = function() {\n    alert(this.id); // 弹出text\n}.bind(text);\n```\n\n## new绑定\n\n当用`new`调用函数时，会执行以下操作：\n\n* 创建一个全新的对象。\n* 新的对象会被执行[Prototype]链接。\n* 新对象会绑定到函数调用的`this`。\n* 如果函数没有返回其他对象，那么`new`中的函数调用会自动返回这个新对象。\n\n```javascript\nvar myClass = function(){\n    this.name = 'javascript';\n};\n\nvar obj = new myClass();\nconsole.log(obj.name); // javascript\n```\n\n# 判断this && 优先级\n\n优先级\n\n> new绑定 > 显示绑定 > 隐式绑定 > 默认绑定\n\n按以下顺序判断：\n\n1、函数是否在 `new` 中调用（new绑定）？如果是的话`this`绑定的是`新创建的对象`。\n\n```javascript\nvar bar = new foo();  // bar\n```\n\n2、函数是否通过`call`、`apply`（显示绑定）或`bind`硬绑定？如果是的话`this`绑定的是`指定的对象`。\n\n```javascript\nvar bar = foo.call(obj2);  // obj2\n```\n\n3、函数是否在某个上下文对象调用（隐式绑定）？如果是的话`this`绑定的是`那个上下文对象`。\n\n```javascript\nvar bar = obj1.foo();  // obj1\n```\n\n4、如果都不是的话，使用默认绑定。如果在`严格模式`下，就绑定到`undefined`，否则绑定到`全局对象`。\n\n```javascript\nvar bar = foo();\n```\n\n# 参考\n\n[你不知道的JavaScript（上卷）](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes)\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n\n仅供个人学习记录~","source":"_posts/this到底是什么？.md","raw":"---\ntitle: this到底是什么？\ndate: 2018-04-16\ncategories: javascript\ntags: [javascript, this]\nline_number: false\n---\n\n# 为什么要使用this\n\n记得小学上英语课的时候，学着介绍自己的名字，每个人都是造一个同样的句型。\n\n`普通函数`写法\n\n```javascript\nfunction myName(name){\n    console.log('my name is ' + name);\n}\nmyName('xiaoming'); // my name is xiaoming\nmyName('xiaohong'); // my name is xiaohong\n```\n\n使用`this`写法\n\n```javascript\nfunction myName(){\n    console.log('my name is ' + this.name);\n}\nvar a = { name: 'xiaoming' };\nvar b = { name: 'xiaohong' };\nmyName.call(a); // my name is xiaoming\nmyName.call(b); // my name is xiaohong\n```\n\n介绍自己的名字当然比较简单，那么我们来增加点难度。\n\n`普通函数`写法\n\n```javascript\nfunction myName(name){\n    return \"my name is \" + name;\n}\n\nfunction mySex(sex){\n    return \"I'm a \" + sex;\n}\n\nfunction myAge(age){\n    return \"I'm \" + age + \" years old\";\n}\n\nfunction introduce(name, sex, age){\n    var greeting = myName(name) + '. ' + mySex(sex) + '. ' + myAge(age);\n    console.log(greeting);\n}\nintroduce('xiaoming','boy','9'); // my name is xiaoming. I'm a boy. I'm 9 years old\nintroduce('xiaohong','girl','7'); // my name is xiaohong. I'm a girl. I'm 7 years old\n```\n\n使用`this`写法\n\n```javascript\nfunction myName(){\n    return \"my name is \" + this.name;\n}\n\nfunction mySex(){\n    return \"I'm a \" + this.sex;\n}\n\nfunction myAge(){\n    return \"I'm \" + this.age + \" years old\";\n}\n\nfunction introduce(){\n    var greeting = myName.call(this) + '. ' + mySex.call(this) + '. ' + myAge.call(this);\n    console.log(greeting);\n}\n\nvar a = {\n    name: 'xiaoming',\n    sex: 'boy',\n    age: '9'\n};\n\nvar b = {\n    name: 'xiaohong',\n    sex: 'girl',\n    age: '7'\n};\n\nintroduce.call(a); // my name is xiaoming. I'm a boy. I'm 9 years old\nintroduce.call(b); // my name is xiaohong. I'm a girl. I'm 7 years old\n```\n\n如果不使用`this`，那么就需要给`myName()`函数显式的传入一个参数`name`来代替不同的上下文对象，单单一个参数还可以接受，可随着你的使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱。所以，`this`提供了一种更优雅的方式来隐式“传递”一个对象的引用，可以将API设计的更加`简洁`易于`复用`。\n\n# this到底是什么？\n\n> `this`是运行时进行绑定的，是基于`函数的执行环境动态绑定`的，而非函数被声明时的环境。\n\n当一个函数被调用时，会创建一个活动记录（也称为上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数 等信息。`this`就是这个记录的一个函数，会在函数执行的过程中用到。\n\n# this的指向\n\n* 默认绑定（作为普通函数调用，指向`全局对象`）\n* 隐式绑定（作为对象的方法调用，指向`该调用对象`）\n* 显式绑定（使用call和apply方法，指向`第一个参数对象`）\n* new绑定（作为构造函数调用，指向`新创建的对象`）\n\n## 默认绑定\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的`this`总是指向`全局对象`。\n\n```javascript\nwindow.name = 'globalName';\n\nfunction getName(){\n    var name = 'functionName';\n    console.log(this.name);  // globalName\n}\n\ngetName();\n```\n\n严格模式\n\n```javascript\nwindow.name = 'globalName';\n\nfunction getName(){\n    \"use strict\";\n    var name = 'functionName';\n    console.log(this.name);  // Uncaught TypeError: Cannot read property 'name' of undefined\n}\n\ngetName();\n```\n\n如果使用`严格模式`，则不能将全局对象用于默认绑定。\n\n## 隐式绑定\n\n当函数作为对象的方法被调用时，`this`指向`该对象`。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj = {\n    a: 2,\n    foo: foo\n};\n\nobj.foo(); // 2\n```\n\n对象属性引用链中只有`上一层`或者说是`最后一层`在调用位置中起作用。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj2 = {\n    a: 42,\n    foo: foo\n};\n\nvar obj1 = {\n    a: 2,\n    obj2: obj2\n}\n\nobj1.obj2.foo(); // 42\n```\n\n## 显式绑定\n\n`Function`的原型定义了两个方法，它们是`Function.prototype.call`和`Function.prototype.apply`。它们的第一个参数，允许直接指定`this`的绑定对象。\n\n```javascript\nfunction foo(){\n    console.log(this.a);\n}\n\nvar obj = {\n    a: 2\n};\n\nfoo.call(obj); // 2\n```\n\n### call和apply的区别\n\n`apply`接收两个参数，第一个参数指定了函数体内`this`对象的指向，第二个参数为一个带下标的集合，可以是`数组`或`类数组`，可以将这个集合中的元素作为参数传递。\n\n```javascript\nvar func = function(a,b,c){\n    alert([a,b,c]);  // 输出 [1,2,3]\n};\n\nfunc.apply(null, [1,2,3]);\n```\n\n`call`传入的参数数量不固定，但是跟`apply`相同的是，第一个参数也是代表了函数体内`this`对象的指向，之后的参数每个依次传入函数。\n\n```javascript\nvar func = function(a,b,c){\n    alert([a,b,c]);  // 输出 [1,2,3]\n};\n\nfunc.call(null,1,2,3);\n```\n\n### bind的用法\n\n`bind`是把它的上下文绑定到`bind()`括号中的参数上，它`不会执行`，而只是返回一个改变了上下文的函数副本，而call和apply是`直接执行`函数。\n\n```javascript\nvar button = document.getElementById(\"button\"),\n    text = document.getElementById(\"text\");\nbutton.onclick = function() {\n    alert(this.id); // 弹出text\n}.bind(text);\n```\n\n## new绑定\n\n当用`new`调用函数时，会执行以下操作：\n\n* 创建一个全新的对象。\n* 新的对象会被执行[Prototype]链接。\n* 新对象会绑定到函数调用的`this`。\n* 如果函数没有返回其他对象，那么`new`中的函数调用会自动返回这个新对象。\n\n```javascript\nvar myClass = function(){\n    this.name = 'javascript';\n};\n\nvar obj = new myClass();\nconsole.log(obj.name); // javascript\n```\n\n# 判断this && 优先级\n\n优先级\n\n> new绑定 > 显示绑定 > 隐式绑定 > 默认绑定\n\n按以下顺序判断：\n\n1、函数是否在 `new` 中调用（new绑定）？如果是的话`this`绑定的是`新创建的对象`。\n\n```javascript\nvar bar = new foo();  // bar\n```\n\n2、函数是否通过`call`、`apply`（显示绑定）或`bind`硬绑定？如果是的话`this`绑定的是`指定的对象`。\n\n```javascript\nvar bar = foo.call(obj2);  // obj2\n```\n\n3、函数是否在某个上下文对象调用（隐式绑定）？如果是的话`this`绑定的是`那个上下文对象`。\n\n```javascript\nvar bar = obj1.foo();  // obj1\n```\n\n4、如果都不是的话，使用默认绑定。如果在`严格模式`下，就绑定到`undefined`，否则绑定到`全局对象`。\n\n```javascript\nvar bar = foo();\n```\n\n# 参考\n\n[你不知道的JavaScript（上卷）](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes)\n[javascript设计模式与开发实践](https://item.jd.com/11686375.html)\n\n仅供个人学习记录~","slug":"this到底是什么？","published":1,"updated":"2018-04-23T15:09:31.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7a000afc92cn67c6xd","content":"<h1 id=\"为什么要使用this\"><a href=\"#为什么要使用this\" class=\"headerlink\" title=\"为什么要使用this\"></a>为什么要使用this</h1><p>记得小学上英语课的时候，学着介绍自己的名字，每个人都是造一个同样的句型。</p>\n<p><code>普通函数</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myName(<span class=\"string\">'xiaoming'</span>); <span class=\"comment\">// my name is xiaoming</span></span><br><span class=\"line\">myName(<span class=\"string\">'xiaohong'</span>); <span class=\"comment\">// my name is xiaohong</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>this</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'xiaoming'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'xiaohong'</span> &#125;;</span><br><span class=\"line\">myName.call(a); <span class=\"comment\">// my name is xiaoming</span></span><br><span class=\"line\">myName.call(b); <span class=\"comment\">// my name is xiaohong</span></span><br></pre></td></tr></table></figure>\n<p>介绍自己的名字当然比较简单，那么我们来增加点难度。</p>\n<p><code>普通函数</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"my name is \"</span> + name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySex</span>(<span class=\"params\">sex</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm a \"</span> + sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAge</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm \"</span> + age + <span class=\"string\">\" years old\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\">name, sex, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = myName(name) + <span class=\"string\">'. '</span> + mySex(sex) + <span class=\"string\">'. '</span> + myAge(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">introduce(<span class=\"string\">'xiaoming'</span>,<span class=\"string\">'boy'</span>,<span class=\"string\">'9'</span>); <span class=\"comment\">// my name is xiaoming. I'm a boy. I'm 9 years old</span></span><br><span class=\"line\">introduce(<span class=\"string\">'xiaohong'</span>,<span class=\"string\">'girl'</span>,<span class=\"string\">'7'</span>); <span class=\"comment\">// my name is xiaohong. I'm a girl. I'm 7 years old</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>this</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"my name is \"</span> + <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySex</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm a \"</span> + <span class=\"keyword\">this</span>.sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAge</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = myName.call(<span class=\"keyword\">this</span>) + <span class=\"string\">'. '</span> + mySex.call(<span class=\"keyword\">this</span>) + <span class=\"string\">'. '</span> + myAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'boy'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'9'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xiaohong'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'girl'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'7'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.call(a); <span class=\"comment\">// my name is xiaoming. I'm a boy. I'm 9 years old</span></span><br><span class=\"line\">introduce.call(b); <span class=\"comment\">// my name is xiaohong. I'm a girl. I'm 7 years old</span></span><br></pre></td></tr></table></figure>\n<p>如果不使用<code>this</code>，那么就需要给<code>myName()</code>函数显式的传入一个参数<code>name</code>来代替不同的上下文对象，单单一个参数还可以接受，可随着你的使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱。所以，<code>this</code>提供了一种更优雅的方式来隐式“传递”一个对象的引用，可以将API设计的更加<code>简洁</code>易于<code>复用</code>。</p>\n<h1 id=\"this到底是什么？\"><a href=\"#this到底是什么？\" class=\"headerlink\" title=\"this到底是什么？\"></a>this到底是什么？</h1><blockquote>\n<p><code>this</code>是运行时进行绑定的，是基于<code>函数的执行环境动态绑定</code>的，而非函数被声明时的环境。</p>\n</blockquote>\n<p>当一个函数被调用时，会创建一个活动记录（也称为上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数 等信息。<code>this</code>就是这个记录的一个函数，会在函数执行的过程中用到。</p>\n<h1 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h1><ul>\n<li>默认绑定（作为普通函数调用，指向<code>全局对象</code>）</li>\n<li>隐式绑定（作为对象的方法调用，指向<code>该调用对象</code>）</li>\n<li>显式绑定（使用call和apply方法，指向<code>第一个参数对象</code>）</li>\n<li>new绑定（作为构造函数调用，指向<code>新创建的对象</code>）</li>\n</ul>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的<code>this</code>总是指向<code>全局对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'globalName'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'functionName'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// globalName</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();</span><br></pre></td></tr></table></figure>\n<p>严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'globalName'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'functionName'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();</span><br></pre></td></tr></table></figure>\n<p>如果使用<code>严格模式</code>，则不能将全局对象用于默认绑定。</p>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>当函数作为对象的方法被调用时，<code>this</code>指向<code>该对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>对象属性引用链中只有<code>上一层</code>或者说是<code>最后一层</code>在调用位置中起作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">42</span>,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    obj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.obj2.foo(); <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h2><p><code>Function</code>的原型定义了两个方法，它们是<code>Function.prototype.call</code>和<code>Function.prototype.apply</code>。它们的第一个参数，允许直接指定<code>this</code>的绑定对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(obj); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call和apply的区别\"><a href=\"#call和apply的区别\" class=\"headerlink\" title=\"call和apply的区别\"></a>call和apply的区别</h3><p><code>apply</code>接收两个参数，第一个参数指定了函数体内<code>this</code>对象的指向，第二个参数为一个带下标的集合，可以是<code>数组</code>或<code>类数组</code>，可以将这个集合中的元素作为参数传递。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    alert([a,b,c]);  <span class=\"comment\">// 输出 [1,2,3]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">func.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n<p><code>call</code>传入的参数数量不固定，但是跟<code>apply</code>相同的是，第一个参数也是代表了函数体内<code>this</code>对象的指向，之后的参数每个依次传入函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    alert([a,b,c]);  <span class=\"comment\">// 输出 [1,2,3]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">func.call(<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"bind的用法\"><a href=\"#bind的用法\" class=\"headerlink\" title=\"bind的用法\"></a>bind的用法</h3><p><code>bind</code>是把它的上下文绑定到<code>bind()</code>括号中的参数上，它<code>不会执行</code>，而只是返回一个改变了上下文的函数副本，而call和apply是<code>直接执行</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>),</span><br><span class=\"line\">    text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>);</span><br><span class=\"line\">button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 弹出text</span></span><br><span class=\"line\">&#125;.bind(text);</span><br></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>当用<code>new</code>调用函数时，会执行以下操作：</p>\n<ul>\n<li>创建一个全新的对象。</li>\n<li>新的对象会被执行[Prototype]链接。</li>\n<li>新对象会绑定到函数调用的<code>this</code>。</li>\n<li>如果函数没有返回其他对象，那么<code>new</code>中的函数调用会自动返回这个新对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'javascript'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> myClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// javascript</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"判断this-amp-amp-优先级\"><a href=\"#判断this-amp-amp-优先级\" class=\"headerlink\" title=\"判断this &amp;&amp; 优先级\"></a>判断this &amp;&amp; 优先级</h1><p>优先级</p>\n<blockquote>\n<p>new绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n</blockquote>\n<p>按以下顺序判断：</p>\n<p>1、函数是否在 <code>new</code> 中调用（new绑定）？如果是的话<code>this</code>绑定的是<code>新创建的对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo();  <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure>\n<p>2、函数是否通过<code>call</code>、<code>apply</code>（显示绑定）或<code>bind</code>硬绑定？如果是的话<code>this</code>绑定的是<code>指定的对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj2);  <span class=\"comment\">// obj2</span></span><br></pre></td></tr></table></figure>\n<p>3、函数是否在某个上下文对象调用（隐式绑定）？如果是的话<code>this</code>绑定的是<code>那个上下文对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = obj1.foo();  <span class=\"comment\">// obj1</span></span><br></pre></td></tr></table></figure>\n<p>4、如果都不是的话，使用默认绑定。如果在<code>严格模式</code>下，就绑定到<code>undefined</code>，否则绑定到<code>全局对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = foo();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes\" target=\"_blank\" rel=\"noopener\">你不知道的JavaScript（上卷）</a><br><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a></p>\n<p>仅供个人学习记录~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么要使用this\"><a href=\"#为什么要使用this\" class=\"headerlink\" title=\"为什么要使用this\"></a>为什么要使用this</h1><p>记得小学上英语课的时候，学着介绍自己的名字，每个人都是造一个同样的句型。</p>\n<p><code>普通函数</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myName(<span class=\"string\">'xiaoming'</span>); <span class=\"comment\">// my name is xiaoming</span></span><br><span class=\"line\">myName(<span class=\"string\">'xiaohong'</span>); <span class=\"comment\">// my name is xiaohong</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>this</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'xiaoming'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'xiaohong'</span> &#125;;</span><br><span class=\"line\">myName.call(a); <span class=\"comment\">// my name is xiaoming</span></span><br><span class=\"line\">myName.call(b); <span class=\"comment\">// my name is xiaohong</span></span><br></pre></td></tr></table></figure>\n<p>介绍自己的名字当然比较简单，那么我们来增加点难度。</p>\n<p><code>普通函数</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"my name is \"</span> + name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySex</span>(<span class=\"params\">sex</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm a \"</span> + sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAge</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm \"</span> + age + <span class=\"string\">\" years old\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\">name, sex, age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = myName(name) + <span class=\"string\">'. '</span> + mySex(sex) + <span class=\"string\">'. '</span> + myAge(age);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">introduce(<span class=\"string\">'xiaoming'</span>,<span class=\"string\">'boy'</span>,<span class=\"string\">'9'</span>); <span class=\"comment\">// my name is xiaoming. I'm a boy. I'm 9 years old</span></span><br><span class=\"line\">introduce(<span class=\"string\">'xiaohong'</span>,<span class=\"string\">'girl'</span>,<span class=\"string\">'7'</span>); <span class=\"comment\">// my name is xiaohong. I'm a girl. I'm 7 years old</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>this</code>写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"my name is \"</span> + <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySex</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm a \"</span> + <span class=\"keyword\">this</span>.sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAge</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"I'm \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">introduce</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> greeting = myName.call(<span class=\"keyword\">this</span>) + <span class=\"string\">'. '</span> + mySex.call(<span class=\"keyword\">this</span>) + <span class=\"string\">'. '</span> + myAge.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'boy'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'9'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xiaohong'</span>,</span><br><span class=\"line\">    sex: <span class=\"string\">'girl'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'7'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">introduce.call(a); <span class=\"comment\">// my name is xiaoming. I'm a boy. I'm 9 years old</span></span><br><span class=\"line\">introduce.call(b); <span class=\"comment\">// my name is xiaohong. I'm a girl. I'm 7 years old</span></span><br></pre></td></tr></table></figure>\n<p>如果不使用<code>this</code>，那么就需要给<code>myName()</code>函数显式的传入一个参数<code>name</code>来代替不同的上下文对象，单单一个参数还可以接受，可随着你的使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱。所以，<code>this</code>提供了一种更优雅的方式来隐式“传递”一个对象的引用，可以将API设计的更加<code>简洁</code>易于<code>复用</code>。</p>\n<h1 id=\"this到底是什么？\"><a href=\"#this到底是什么？\" class=\"headerlink\" title=\"this到底是什么？\"></a>this到底是什么？</h1><blockquote>\n<p><code>this</code>是运行时进行绑定的，是基于<code>函数的执行环境动态绑定</code>的，而非函数被声明时的环境。</p>\n</blockquote>\n<p>当一个函数被调用时，会创建一个活动记录（也称为上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数 等信息。<code>this</code>就是这个记录的一个函数，会在函数执行的过程中用到。</p>\n<h1 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h1><ul>\n<li>默认绑定（作为普通函数调用，指向<code>全局对象</code>）</li>\n<li>隐式绑定（作为对象的方法调用，指向<code>该调用对象</code>）</li>\n<li>显式绑定（使用call和apply方法，指向<code>第一个参数对象</code>）</li>\n<li>new绑定（作为构造函数调用，指向<code>新创建的对象</code>）</li>\n</ul>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的<code>this</code>总是指向<code>全局对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'globalName'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'functionName'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// globalName</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();</span><br></pre></td></tr></table></figure>\n<p>严格模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'globalName'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'functionName'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);  <span class=\"comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName();</span><br></pre></td></tr></table></figure>\n<p>如果使用<code>严格模式</code>，则不能将全局对象用于默认绑定。</p>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>当函数作为对象的方法被调用时，<code>this</code>指向<code>该对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>对象属性引用链中只有<code>上一层</code>或者说是<code>最后一层</code>在调用位置中起作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">42</span>,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span>,</span><br><span class=\"line\">    obj2: obj2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.obj2.foo(); <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h2><p><code>Function</code>的原型定义了两个方法，它们是<code>Function.prototype.call</code>和<code>Function.prototype.apply</code>。它们的第一个参数，允许直接指定<code>this</code>的绑定对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(obj); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call和apply的区别\"><a href=\"#call和apply的区别\" class=\"headerlink\" title=\"call和apply的区别\"></a>call和apply的区别</h3><p><code>apply</code>接收两个参数，第一个参数指定了函数体内<code>this</code>对象的指向，第二个参数为一个带下标的集合，可以是<code>数组</code>或<code>类数组</code>，可以将这个集合中的元素作为参数传递。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    alert([a,b,c]);  <span class=\"comment\">// 输出 [1,2,3]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">func.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br></pre></td></tr></table></figure>\n<p><code>call</code>传入的参数数量不固定，但是跟<code>apply</code>相同的是，第一个参数也是代表了函数体内<code>this</code>对象的指向，之后的参数每个依次传入函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    alert([a,b,c]);  <span class=\"comment\">// 输出 [1,2,3]</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">func.call(<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"bind的用法\"><a href=\"#bind的用法\" class=\"headerlink\" title=\"bind的用法\"></a>bind的用法</h3><p><code>bind</code>是把它的上下文绑定到<code>bind()</code>括号中的参数上，它<code>不会执行</code>，而只是返回一个改变了上下文的函数副本，而call和apply是<code>直接执行</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>),</span><br><span class=\"line\">    text = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"text\"</span>);</span><br><span class=\"line\">button.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>.id); <span class=\"comment\">// 弹出text</span></span><br><span class=\"line\">&#125;.bind(text);</span><br></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>当用<code>new</code>调用函数时，会执行以下操作：</p>\n<ul>\n<li>创建一个全新的对象。</li>\n<li>新的对象会被执行[Prototype]链接。</li>\n<li>新对象会绑定到函数调用的<code>this</code>。</li>\n<li>如果函数没有返回其他对象，那么<code>new</code>中的函数调用会自动返回这个新对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'javascript'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> myClass();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// javascript</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"判断this-amp-amp-优先级\"><a href=\"#判断this-amp-amp-优先级\" class=\"headerlink\" title=\"判断this &amp;&amp; 优先级\"></a>判断this &amp;&amp; 优先级</h1><p>优先级</p>\n<blockquote>\n<p>new绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n</blockquote>\n<p>按以下顺序判断：</p>\n<p>1、函数是否在 <code>new</code> 中调用（new绑定）？如果是的话<code>this</code>绑定的是<code>新创建的对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo();  <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></figure>\n<p>2、函数是否通过<code>call</code>、<code>apply</code>（显示绑定）或<code>bind</code>硬绑定？如果是的话<code>this</code>绑定的是<code>指定的对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj2);  <span class=\"comment\">// obj2</span></span><br></pre></td></tr></table></figure>\n<p>3、函数是否在某个上下文对象调用（隐式绑定）？如果是的话<code>this</code>绑定的是<code>那个上下文对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = obj1.foo();  <span class=\"comment\">// obj1</span></span><br></pre></td></tr></table></figure>\n<p>4、如果都不是的话，使用默认绑定。如果在<code>严格模式</code>下，就绑定到<code>undefined</code>，否则绑定到<code>全局对象</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = foo();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes\" target=\"_blank\" rel=\"noopener\">你不知道的JavaScript（上卷）</a><br><a href=\"https://item.jd.com/11686375.html\" target=\"_blank\" rel=\"noopener\">javascript设计模式与开发实践</a></p>\n<p>仅供个人学习记录~</p>\n"},{"title":"underscore中的排序sortBy","date":"2017-07-15T17:05:18.000Z","_content":"优秀博客文章网络上有很多，一直以来都是读别人的文章。自己嘛，一来文笔不好，二来毫无头绪不知道想分享些什么，于是越是不开始就越不知道怎么写。看了很多鸡汤文，鼓励写博客的文章，终于鼓起勇气写写。目的呢，记录平时所看的书，所想的事，还有想说的话。这可能是今年来的第一篇博文吧，万事开头难，加油咯！\n\n前端技术日新月异，更新的频率太快了，回头想想自己掌握的知识还是很薄弱，谈不上精通，更还有些许浮躁。一想至此，决定开始分析一些经典的js源码，这次先从underscore开始分析，结构性上jquery那么复杂，也能更好的学习函数式编程。\n\n[underscore 1.8.2 源码地址](http://www.css88.com/doc/underscore1.8.2/docs/underscore.html)\n[underscore 1.8.2 中文文档](http://www.css88.com/doc/underscore1.8.2/)\n\n# Array.prototype.sort\n\nES5中，已对集合提供一个排序方法 [Array.prototype.sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\n``` bash\nvar students = [\n  {name: 'wxj', age: 18},\n  {name: 'john', age: 14},\n  {name: 'bob', age: 23}\n];\nvar sortedStudents = students.sort(function(left, right) {\n  return right.age < left.age;\n});\n# => sortStudents: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n# ]\n```\n\n# _.sortBy\n``` bash\n_.sortBy(list, iteratee, [context]) \n```\n返回一个排序后的list拷贝副本。如果传递iteratee参数，`iteratee将作为list中每个值的排序依据`。迭代器也可以是字符串的属性的名称进行排序的(比如 length)。[api戳这里](http://www.css88.com/doc/underscore1.8.2/#sortBy)\n\n## 用法\n``` bash\n# iteratee将作为list中每个值的排序依据\n_.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });\n# => [5, 4, 6, 3, 1, 2]\n```\n``` bash\n# 根据属性的名称进行排序\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.sortBy(stooges, 'name');\n=> [{name: 'curly', age: 60}, {name: 'larry', age: 50}, {name: 'moe', age: 40}];\n```\n\n## 源码\n``` bash\n  _.sortBy = function(obj, iteratee, context) {\n    # 内部函数，优化回调\n    iteratee = cb(iteratee, context);\n    # 先通过map生成新的对象集合,该对象提供了通过iteratee计算后的值, 方便排序\n    # [{value:1,index:0,criteria: sin(1)}, ...]\n    # 再排序.sort\n    # 最后再通过pluck把值摘出来\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n```\n# 开始分析\n\n`_.sortBy`的工作流程：\n\n## cb\n\n`cb` 函数将根据不同情况来为我们的迭代创建一个迭代过程 `iteratee`。[迭代！迭代！迭代！](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html)\n\n## _.map\n\n通过 [_.map](http://www.css88.com/doc/underscore1.8.2/#map) 生成一个新的集合，该集合的每个元素是一个对象，他具有三个属性：\n* value:元素值\n* index:索引位置\n* criteria:排序准则，该准则将通过被优化的 iteratee 计算得到。underscore 看到了元素间的比较仍将落脚到“值比较”的本质。\n\n假设我们现在有集合：\n``` bash\nvar students = [\n    {name: 'wxj', age: 18},\n    {name: 'john', age: 14},\n    {name: 'bob', age: 23}\n];  \nvar sortedStudents = _.sortBy(students, 'age');  \n# sortStudents: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n# ]\n```\n\n假设我们需要按照年龄进行排序，那么传入的 iteratee 为：\n``` bash\nvar iteratee = function(value, key, index, elem) {\n    return elem.age;\n}\n```\n经过该过程，该集合将变为：\n``` bash\nvar newStudents = [\n    {\n      value: {name: 'wxj', age: 18},\n      index: 0,\n      criteria: 18\n    },\n    {\n      value: {name: 'john', age: 14},\n      index: 0,\n      criteria: 14\n    },\n    {\n      value: {name: 'bob', age: 23},\n      index: 0,\n      criteria: 23\n    }\n];\n```\n\n利用 [Array.prototype.sort](#Array-prototype-sort) 以及我们确定的排序准则 criteria 对新生成的集合进行排序：\n\n``` bash\nvar sortedStudents = newStudents.sort(function (left, right) {\n  var a = left.criteria;\n  var b = right.criteria;\n  if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n  }\n  return left.index - right.index;\n});\n# => sortedStudents: [\n#    {\n#      value: {name: 'john', age: 14},\n#      index: 0,\n#      criteria: 14\n#    },\n#    {\n#      value: {name: 'wxj', age: 18},\n#      index: 0,\n#      criteria: 18\n#    },\n#    {\n#      value: {name: 'bob', age: 23},\n#      index: 0,\n#      criteria: 23\n#    }\n#];\n```\n\n## _.pluck\n\n再通过 [_.pluck](http://www.css88.com/doc/underscore1.8.2/#pluck) 取出 value 属性，过滤掉不需要的 index 及 criteria 属性。\n\n``` bash\nvar ret = _.pluck(sortedStudents, 'value');\n# => ret: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n#]\n```\n大功告成！感谢[@yoyoyohamapi](https://github.com/yoyoyohamapi)童鞋，文章是转载的，勿喷。搬运一番，也深入理解了一层。\n\n# 参考\n> * [更好用的排序](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/collection/更好用的排序.html)\n> * [迭代！迭代！迭代](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html)","source":"_posts/underscore中的排序sortBy.md","raw":"---\ntitle: underscore中的排序sortBy\ndate: 2017-07-16 01:05:18\ncategories: js源码解读\ntags: [underscore,sortBy]\n---\n优秀博客文章网络上有很多，一直以来都是读别人的文章。自己嘛，一来文笔不好，二来毫无头绪不知道想分享些什么，于是越是不开始就越不知道怎么写。看了很多鸡汤文，鼓励写博客的文章，终于鼓起勇气写写。目的呢，记录平时所看的书，所想的事，还有想说的话。这可能是今年来的第一篇博文吧，万事开头难，加油咯！\n\n前端技术日新月异，更新的频率太快了，回头想想自己掌握的知识还是很薄弱，谈不上精通，更还有些许浮躁。一想至此，决定开始分析一些经典的js源码，这次先从underscore开始分析，结构性上jquery那么复杂，也能更好的学习函数式编程。\n\n[underscore 1.8.2 源码地址](http://www.css88.com/doc/underscore1.8.2/docs/underscore.html)\n[underscore 1.8.2 中文文档](http://www.css88.com/doc/underscore1.8.2/)\n\n# Array.prototype.sort\n\nES5中，已对集合提供一个排序方法 [Array.prototype.sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n\n``` bash\nvar students = [\n  {name: 'wxj', age: 18},\n  {name: 'john', age: 14},\n  {name: 'bob', age: 23}\n];\nvar sortedStudents = students.sort(function(left, right) {\n  return right.age < left.age;\n});\n# => sortStudents: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n# ]\n```\n\n# _.sortBy\n``` bash\n_.sortBy(list, iteratee, [context]) \n```\n返回一个排序后的list拷贝副本。如果传递iteratee参数，`iteratee将作为list中每个值的排序依据`。迭代器也可以是字符串的属性的名称进行排序的(比如 length)。[api戳这里](http://www.css88.com/doc/underscore1.8.2/#sortBy)\n\n## 用法\n``` bash\n# iteratee将作为list中每个值的排序依据\n_.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });\n# => [5, 4, 6, 3, 1, 2]\n```\n``` bash\n# 根据属性的名称进行排序\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.sortBy(stooges, 'name');\n=> [{name: 'curly', age: 60}, {name: 'larry', age: 50}, {name: 'moe', age: 40}];\n```\n\n## 源码\n``` bash\n  _.sortBy = function(obj, iteratee, context) {\n    # 内部函数，优化回调\n    iteratee = cb(iteratee, context);\n    # 先通过map生成新的对象集合,该对象提供了通过iteratee计算后的值, 方便排序\n    # [{value:1,index:0,criteria: sin(1)}, ...]\n    # 再排序.sort\n    # 最后再通过pluck把值摘出来\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n```\n# 开始分析\n\n`_.sortBy`的工作流程：\n\n## cb\n\n`cb` 函数将根据不同情况来为我们的迭代创建一个迭代过程 `iteratee`。[迭代！迭代！迭代！](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html)\n\n## _.map\n\n通过 [_.map](http://www.css88.com/doc/underscore1.8.2/#map) 生成一个新的集合，该集合的每个元素是一个对象，他具有三个属性：\n* value:元素值\n* index:索引位置\n* criteria:排序准则，该准则将通过被优化的 iteratee 计算得到。underscore 看到了元素间的比较仍将落脚到“值比较”的本质。\n\n假设我们现在有集合：\n``` bash\nvar students = [\n    {name: 'wxj', age: 18},\n    {name: 'john', age: 14},\n    {name: 'bob', age: 23}\n];  \nvar sortedStudents = _.sortBy(students, 'age');  \n# sortStudents: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n# ]\n```\n\n假设我们需要按照年龄进行排序，那么传入的 iteratee 为：\n``` bash\nvar iteratee = function(value, key, index, elem) {\n    return elem.age;\n}\n```\n经过该过程，该集合将变为：\n``` bash\nvar newStudents = [\n    {\n      value: {name: 'wxj', age: 18},\n      index: 0,\n      criteria: 18\n    },\n    {\n      value: {name: 'john', age: 14},\n      index: 0,\n      criteria: 14\n    },\n    {\n      value: {name: 'bob', age: 23},\n      index: 0,\n      criteria: 23\n    }\n];\n```\n\n利用 [Array.prototype.sort](#Array-prototype-sort) 以及我们确定的排序准则 criteria 对新生成的集合进行排序：\n\n``` bash\nvar sortedStudents = newStudents.sort(function (left, right) {\n  var a = left.criteria;\n  var b = right.criteria;\n  if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n  }\n  return left.index - right.index;\n});\n# => sortedStudents: [\n#    {\n#      value: {name: 'john', age: 14},\n#      index: 0,\n#      criteria: 14\n#    },\n#    {\n#      value: {name: 'wxj', age: 18},\n#      index: 0,\n#      criteria: 18\n#    },\n#    {\n#      value: {name: 'bob', age: 23},\n#      index: 0,\n#      criteria: 23\n#    }\n#];\n```\n\n## _.pluck\n\n再通过 [_.pluck](http://www.css88.com/doc/underscore1.8.2/#pluck) 取出 value 属性，过滤掉不需要的 index 及 criteria 属性。\n\n``` bash\nvar ret = _.pluck(sortedStudents, 'value');\n# => ret: [\n#  {name: 'john', age: 14},\n#  {name: 'wxj', age: 18},\n#  {name: 'bob', age: 23},\n#]\n```\n大功告成！感谢[@yoyoyohamapi](https://github.com/yoyoyohamapi)童鞋，文章是转载的，勿喷。搬运一番，也深入理解了一层。\n\n# 参考\n> * [更好用的排序](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/collection/更好用的排序.html)\n> * [迭代！迭代！迭代](https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html)","slug":"underscore中的排序sortBy","published":1,"updated":"2017-08-17T15:10:28.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7c000bfc926ca6imz8","content":"<p>优秀博客文章网络上有很多，一直以来都是读别人的文章。自己嘛，一来文笔不好，二来毫无头绪不知道想分享些什么，于是越是不开始就越不知道怎么写。看了很多鸡汤文，鼓励写博客的文章，终于鼓起勇气写写。目的呢，记录平时所看的书，所想的事，还有想说的话。这可能是今年来的第一篇博文吧，万事开头难，加油咯！</p>\n<p>前端技术日新月异，更新的频率太快了，回头想想自己掌握的知识还是很薄弱，谈不上精通，更还有些许浮躁。一想至此，决定开始分析一些经典的js源码，这次先从underscore开始分析，结构性上jquery那么复杂，也能更好的学习函数式编程。</p>\n<p><a href=\"http://www.css88.com/doc/underscore1.8.2/docs/underscore.html\" target=\"_blank\" rel=\"noopener\">underscore 1.8.2 源码地址</a><br><a href=\"http://www.css88.com/doc/underscore1.8.2/\" target=\"_blank\" rel=\"noopener\">underscore 1.8.2 中文文档</a></p>\n<h1 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort\"></a>Array.prototype.sort</h1><p>ES5中，已对集合提供一个排序方法 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener\">Array.prototype.sort</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var students = [</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">var sortedStudents = students.sort(<span class=\"keyword\">function</span>(left, right) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> right.age &lt; left.age;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; sortStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a>_.sortBy</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">_.sortBy(list, iteratee, [context])</span><br></pre></td></tr></table></figure>\n<p>返回一个排序后的list拷贝副本。如果传递iteratee参数，<code>iteratee将作为list中每个值的排序依据</code>。迭代器也可以是字符串的属性的名称进行排序的(比如 length)。<a href=\"http://www.css88.com/doc/underscore1.8.2/#sortBy\" target=\"_blank\" rel=\"noopener\">api戳这里</a></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iteratee将作为list中每个值的排序依据</span></span><br><span class=\"line\">_.sortBy([1, 2, 3, 4, 5, 6], <span class=\"keyword\">function</span>(num)&#123; <span class=\"built_in\">return</span> Math.sin(num); &#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; [5, 4, 6, 3, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据属性的名称进行排序</span></span><br><span class=\"line\">var stooges = [&#123;name: <span class=\"string\">'moe'</span>, age: 40&#125;, &#123;name: <span class=\"string\">'larry'</span>, age: 50&#125;, &#123;name: <span class=\"string\">'curly'</span>, age: 60&#125;];</span><br><span class=\"line\">_.sortBy(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [&#123;name: <span class=\"string\">'curly'</span>, age: 60&#125;, &#123;name: <span class=\"string\">'larry'</span>, age: 50&#125;, &#123;name: <span class=\"string\">'moe'</span>, age: 40&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"keyword\">function</span>(obj, iteratee, context) &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 内部函数，优化回调</span></span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\"># 先通过map生成新的对象集合,该对象提供了通过iteratee计算后的值, 方便排序</span></span><br><span class=\"line\">  <span class=\"comment\"># [&#123;value:1,index:0,criteria: sin(1)&#125;, ...]</span></span><br><span class=\"line\">  <span class=\"comment\"># 再排序.sort</span></span><br><span class=\"line\">  <span class=\"comment\"># 最后再通过pluck把值摘出来</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> _.pluck(_.map(obj, <span class=\"keyword\">function</span>(value, index, list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      value: value,</span><br><span class=\"line\">      index: index,</span><br><span class=\"line\">      criteria: iteratee(value, index, list)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;).sort(<span class=\"keyword\">function</span>(left, right) &#123;</span><br><span class=\"line\">    var a = left.criteria;</span><br><span class=\"line\">    var b = right.criteria;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a !== b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &gt; b || a === void 0) <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; b || b === void 0) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> left.index - right.index;</span><br><span class=\"line\">  &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开始分析\"><a href=\"#开始分析\" class=\"headerlink\" title=\"开始分析\"></a>开始分析</h1><p><code>_.sortBy</code>的工作流程：</p>\n<h2 id=\"cb\"><a href=\"#cb\" class=\"headerlink\" title=\"cb\"></a>cb</h2><p><code>cb</code> 函数将根据不同情况来为我们的迭代创建一个迭代过程 <code>iteratee</code>。<a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html\" target=\"_blank\" rel=\"noopener\">迭代！迭代！迭代！</a></p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h2><p>通过 <a href=\"http://www.css88.com/doc/underscore1.8.2/#map\" target=\"_blank\" rel=\"noopener\">_.map</a> 生成一个新的集合，该集合的每个元素是一个对象，他具有三个属性：</p>\n<ul>\n<li>value:元素值</li>\n<li>index:索引位置</li>\n<li>criteria:排序准则，该准则将通过被优化的 iteratee 计算得到。underscore 看到了元素间的比较仍将落脚到“值比较”的本质。</li>\n</ul>\n<p>假设我们现在有集合：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;</span><br><span class=\"line\">];  </span><br><span class=\"line\">var sortedStudents = _.sortBy(students, <span class=\"string\">'age'</span>);  </span><br><span class=\"line\"><span class=\"comment\"># sortStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure></p>\n<p>假设我们需要按照年龄进行排序，那么传入的 iteratee 为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iteratee = <span class=\"keyword\">function</span>(value, key, index, elem) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> elem.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经过该过程，该集合将变为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var newStudents = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 18</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 14</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 23</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>利用 <a href=\"#Array-prototype-sort\">Array.prototype.sort</a> 以及我们确定的排序准则 criteria 对新生成的集合进行排序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var sortedStudents = newStudents.sort(<span class=\"keyword\">function</span> (left, right) &#123;</span><br><span class=\"line\">  var a = left.criteria;</span><br><span class=\"line\">  var b = right.criteria;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a !== b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &gt; b || a === void 0) <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; b || b === void 0) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> left.index - right.index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; sortedStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 14</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 18</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 23</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a>_.pluck</h2><p>再通过 <a href=\"http://www.css88.com/doc/underscore1.8.2/#pluck\" target=\"_blank\" rel=\"noopener\">_.pluck</a> 取出 value 属性，过滤掉不需要的 index 及 criteria 属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ret = _.pluck(sortedStudents, <span class=\"string\">'value'</span>);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; ret: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#]</span></span><br></pre></td></tr></table></figure>\n<p>大功告成！感谢<a href=\"https://github.com/yoyoyohamapi\" target=\"_blank\" rel=\"noopener\">@yoyoyohamapi</a>童鞋，文章是转载的，勿喷。搬运一番，也深入理解了一层。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<ul>\n<li><a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/collection/更好用的排序.html\" target=\"_blank\" rel=\"noopener\">更好用的排序</a></li>\n<li><a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html\" target=\"_blank\" rel=\"noopener\">迭代！迭代！迭代</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>优秀博客文章网络上有很多，一直以来都是读别人的文章。自己嘛，一来文笔不好，二来毫无头绪不知道想分享些什么，于是越是不开始就越不知道怎么写。看了很多鸡汤文，鼓励写博客的文章，终于鼓起勇气写写。目的呢，记录平时所看的书，所想的事，还有想说的话。这可能是今年来的第一篇博文吧，万事开头难，加油咯！</p>\n<p>前端技术日新月异，更新的频率太快了，回头想想自己掌握的知识还是很薄弱，谈不上精通，更还有些许浮躁。一想至此，决定开始分析一些经典的js源码，这次先从underscore开始分析，结构性上jquery那么复杂，也能更好的学习函数式编程。</p>\n<p><a href=\"http://www.css88.com/doc/underscore1.8.2/docs/underscore.html\" target=\"_blank\" rel=\"noopener\">underscore 1.8.2 源码地址</a><br><a href=\"http://www.css88.com/doc/underscore1.8.2/\" target=\"_blank\" rel=\"noopener\">underscore 1.8.2 中文文档</a></p>\n<h1 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort\"></a>Array.prototype.sort</h1><p>ES5中，已对集合提供一个排序方法 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener\">Array.prototype.sort</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var students = [</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">  &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">var sortedStudents = students.sort(<span class=\"keyword\">function</span>(left, right) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> right.age &lt; left.age;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; sortStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a>_.sortBy</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">_.sortBy(list, iteratee, [context])</span><br></pre></td></tr></table></figure>\n<p>返回一个排序后的list拷贝副本。如果传递iteratee参数，<code>iteratee将作为list中每个值的排序依据</code>。迭代器也可以是字符串的属性的名称进行排序的(比如 length)。<a href=\"http://www.css88.com/doc/underscore1.8.2/#sortBy\" target=\"_blank\" rel=\"noopener\">api戳这里</a></p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># iteratee将作为list中每个值的排序依据</span></span><br><span class=\"line\">_.sortBy([1, 2, 3, 4, 5, 6], <span class=\"keyword\">function</span>(num)&#123; <span class=\"built_in\">return</span> Math.sin(num); &#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; [5, 4, 6, 3, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据属性的名称进行排序</span></span><br><span class=\"line\">var stooges = [&#123;name: <span class=\"string\">'moe'</span>, age: 40&#125;, &#123;name: <span class=\"string\">'larry'</span>, age: 50&#125;, &#123;name: <span class=\"string\">'curly'</span>, age: 60&#125;];</span><br><span class=\"line\">_.sortBy(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [&#123;name: <span class=\"string\">'curly'</span>, age: 60&#125;, &#123;name: <span class=\"string\">'larry'</span>, age: 50&#125;, &#123;name: <span class=\"string\">'moe'</span>, age: 40&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"keyword\">function</span>(obj, iteratee, context) &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 内部函数，优化回调</span></span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\"># 先通过map生成新的对象集合,该对象提供了通过iteratee计算后的值, 方便排序</span></span><br><span class=\"line\">  <span class=\"comment\"># [&#123;value:1,index:0,criteria: sin(1)&#125;, ...]</span></span><br><span class=\"line\">  <span class=\"comment\"># 再排序.sort</span></span><br><span class=\"line\">  <span class=\"comment\"># 最后再通过pluck把值摘出来</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> _.pluck(_.map(obj, <span class=\"keyword\">function</span>(value, index, list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      value: value,</span><br><span class=\"line\">      index: index,</span><br><span class=\"line\">      criteria: iteratee(value, index, list)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;).sort(<span class=\"keyword\">function</span>(left, right) &#123;</span><br><span class=\"line\">    var a = left.criteria;</span><br><span class=\"line\">    var b = right.criteria;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a !== b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &gt; b || a === void 0) <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; b || b === void 0) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> left.index - right.index;</span><br><span class=\"line\">  &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开始分析\"><a href=\"#开始分析\" class=\"headerlink\" title=\"开始分析\"></a>开始分析</h1><p><code>_.sortBy</code>的工作流程：</p>\n<h2 id=\"cb\"><a href=\"#cb\" class=\"headerlink\" title=\"cb\"></a>cb</h2><p><code>cb</code> 函数将根据不同情况来为我们的迭代创建一个迭代过程 <code>iteratee</code>。<a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html\" target=\"_blank\" rel=\"noopener\">迭代！迭代！迭代！</a></p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h2><p>通过 <a href=\"http://www.css88.com/doc/underscore1.8.2/#map\" target=\"_blank\" rel=\"noopener\">_.map</a> 生成一个新的集合，该集合的每个元素是一个对象，他具有三个属性：</p>\n<ul>\n<li>value:元素值</li>\n<li>index:索引位置</li>\n<li>criteria:排序准则，该准则将通过被优化的 iteratee 计算得到。underscore 看到了元素间的比较仍将落脚到“值比较”的本质。</li>\n</ul>\n<p>假设我们现在有集合：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var students = [</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">    &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;</span><br><span class=\"line\">];  </span><br><span class=\"line\">var sortedStudents = _.sortBy(students, <span class=\"string\">'age'</span>);  </span><br><span class=\"line\"><span class=\"comment\"># sortStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure></p>\n<p>假设我们需要按照年龄进行排序，那么传入的 iteratee 为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iteratee = <span class=\"keyword\">function</span>(value, key, index, elem) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> elem.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经过该过程，该集合将变为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var newStudents = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'wxj'</span>, age: 18&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 18</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'john'</span>, age: 14&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 14</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      value: &#123;name: <span class=\"string\">'bob'</span>, age: 23&#125;,</span><br><span class=\"line\">      index: 0,</span><br><span class=\"line\">      criteria: 23</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>利用 <a href=\"#Array-prototype-sort\">Array.prototype.sort</a> 以及我们确定的排序准则 criteria 对新生成的集合进行排序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var sortedStudents = newStudents.sort(<span class=\"keyword\">function</span> (left, right) &#123;</span><br><span class=\"line\">  var a = left.criteria;</span><br><span class=\"line\">  var b = right.criteria;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a !== b) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &gt; b || a === void 0) <span class=\"built_in\">return</span> 1;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a &lt; b || b === void 0) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> left.index - right.index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; sortedStudents: [</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 14</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 18</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#      value: &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#      index: 0,</span></span><br><span class=\"line\"><span class=\"comment\">#      criteria: 23</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#];</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a>_.pluck</h2><p>再通过 <a href=\"http://www.css88.com/doc/underscore1.8.2/#pluck\" target=\"_blank\" rel=\"noopener\">_.pluck</a> 取出 value 属性，过滤掉不需要的 index 及 criteria 属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ret = _.pluck(sortedStudents, <span class=\"string\">'value'</span>);</span><br><span class=\"line\"><span class=\"comment\"># =&gt; ret: [</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'john', age: 14&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'wxj', age: 18&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#  &#123;name: 'bob', age: 23&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#]</span></span><br></pre></td></tr></table></figure>\n<p>大功告成！感谢<a href=\"https://github.com/yoyoyohamapi\" target=\"_blank\" rel=\"noopener\">@yoyoyohamapi</a>童鞋，文章是转载的，勿喷。搬运一番，也深入理解了一层。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<ul>\n<li><a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/collection/更好用的排序.html\" target=\"_blank\" rel=\"noopener\">更好用的排序</a></li>\n<li><a href=\"https://yoyoyohamapi.gitbooks.io/undersercore-analysis/content/base/迭代！迭代！迭代！.html\" target=\"_blank\" rel=\"noopener\">迭代！迭代！迭代</a></li>\n</ul>\n</blockquote>\n"},{"title":"vue-cli 3.0配置webpack目录别名alias","date":"2018-04-08T15:28:00.000Z","_content":"\n最近用vue脚手架新建工程的时候，发现`vue-cli`提供的是`3.0.0-beta.6`版本，安装完成之后也找不到`config`、`build`等目录，不懂要从哪里入手配置别名`alias`\n\n看了下官方文档，简化成使用`vue.config.js`来配置项目，一路找到了`webpack`这一项，发现它可以使用了[webpack-chain](https://github.com/mozilla-neutrino/webpack-chain)链式API的调用方式，简化了对webpack配置的修改。\n\n# 安装\n\n```javascript\nnpm install -g @vue/cli\n# or\nyarn global add @vue/cli\n\nvue create my-project\n```\n\n# 启动\n\n```javascript\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\"\n}\n```\n\n# 配置\n\n在根目录新建`vue.config.js`\n\n```javascript\nconst path = require('path');\nfunction resolve (dir) {\n    return path.join(__dirname, dir)\n}\nmodule.exports = {\n    lintOnSave: true,\n    chainWebpack: (config)=>{\n        // alias\n        config.resolve.alias\n            .set('@$', resolve('src'))\n            .set('assets',resolve('src/assets'))\n            .set('components',resolve('src/components'))\n            .set('layout',resolve('src/layout'))\n            .set('base',resolve('src/base'))\n            .set('static',resolve('src/static'))\n    }\n}\n```\n\n# 参考\n\n[vue-cli configuration](https://github.com/vuejs/vue-cli/blob/dev/docs/README.md)\n[webpack-chain](https://github.com/mozilla-neutrino/webpack-chain)\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/vue-cli 3.0配置webpack目录别名alias.md","raw":"---\ntitle: vue-cli 3.0配置webpack目录别名alias\ndate: 2018-04-08 23:28:00\ncategories: vue\ntags: [vue,vue-cli,webpack,alias]\n---\n\n最近用vue脚手架新建工程的时候，发现`vue-cli`提供的是`3.0.0-beta.6`版本，安装完成之后也找不到`config`、`build`等目录，不懂要从哪里入手配置别名`alias`\n\n看了下官方文档，简化成使用`vue.config.js`来配置项目，一路找到了`webpack`这一项，发现它可以使用了[webpack-chain](https://github.com/mozilla-neutrino/webpack-chain)链式API的调用方式，简化了对webpack配置的修改。\n\n# 安装\n\n```javascript\nnpm install -g @vue/cli\n# or\nyarn global add @vue/cli\n\nvue create my-project\n```\n\n# 启动\n\n```javascript\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\"\n}\n```\n\n# 配置\n\n在根目录新建`vue.config.js`\n\n```javascript\nconst path = require('path');\nfunction resolve (dir) {\n    return path.join(__dirname, dir)\n}\nmodule.exports = {\n    lintOnSave: true,\n    chainWebpack: (config)=>{\n        // alias\n        config.resolve.alias\n            .set('@$', resolve('src'))\n            .set('assets',resolve('src/assets'))\n            .set('components',resolve('src/components'))\n            .set('layout',resolve('src/layout'))\n            .set('base',resolve('src/base'))\n            .set('static',resolve('src/static'))\n    }\n}\n```\n\n# 参考\n\n[vue-cli configuration](https://github.com/vuejs/vue-cli/blob/dev/docs/README.md)\n[webpack-chain](https://github.com/mozilla-neutrino/webpack-chain)\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"vue-cli 3.0配置webpack目录别名alias","published":1,"updated":"2018-04-08T16:23:09.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7g000ffc92arelrstk","content":"<p>最近用vue脚手架新建工程的时候，发现<code>vue-cli</code>提供的是<code>3.0.0-beta.6</code>版本，安装完成之后也找不到<code>config</code>、<code>build</code>等目录，不懂要从哪里入手配置别名<code>alias</code></p>\n<p>看了下官方文档，简化成使用<code>vue.config.js</code>来配置项目，一路找到了<code>webpack</code>这一项，发现它可以使用了<a href=\"https://github.com/mozilla-neutrino/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a>链式API的调用方式，简化了对webpack配置的修改。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn global add @vue/cli</span><br><span class=\"line\"></span><br><span class=\"line\">vue create my-project</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"serve\"</span>: <span class=\"string\">\"vue-cli-service serve\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"vue-cli-service build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"vue-cli-service lint\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在根目录新建<code>vue.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path.join(__dirname, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    lintOnSave: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    chainWebpack: <span class=\"function\">(<span class=\"params\">config</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// alias</span></span><br><span class=\"line\">        config.resolve.alias</span><br><span class=\"line\">            .set(<span class=\"string\">'@$'</span>, resolve(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'assets'</span>,resolve(<span class=\"string\">'src/assets'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'components'</span>,resolve(<span class=\"string\">'src/components'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'layout'</span>,resolve(<span class=\"string\">'src/layout'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'base'</span>,resolve(<span class=\"string\">'src/base'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'static'</span>,resolve(<span class=\"string\">'src/static'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/vuejs/vue-cli/blob/dev/docs/README.md\" target=\"_blank\" rel=\"noopener\">vue-cli configuration</a><br><a href=\"https://github.com/mozilla-neutrino/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a></p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近用vue脚手架新建工程的时候，发现<code>vue-cli</code>提供的是<code>3.0.0-beta.6</code>版本，安装完成之后也找不到<code>config</code>、<code>build</code>等目录，不懂要从哪里入手配置别名<code>alias</code></p>\n<p>看了下官方文档，简化成使用<code>vue.config.js</code>来配置项目，一路找到了<code>webpack</code>这一项，发现它可以使用了<a href=\"https://github.com/mozilla-neutrino/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a>链式API的调用方式，简化了对webpack配置的修改。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"># or</span><br><span class=\"line\">yarn global add @vue/cli</span><br><span class=\"line\"></span><br><span class=\"line\">vue create my-project</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"serve\"</span>: <span class=\"string\">\"vue-cli-service serve\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"vue-cli-service build\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"vue-cli-service lint\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在根目录新建<code>vue.config.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path.join(__dirname, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    lintOnSave: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    chainWebpack: <span class=\"function\">(<span class=\"params\">config</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// alias</span></span><br><span class=\"line\">        config.resolve.alias</span><br><span class=\"line\">            .set(<span class=\"string\">'@$'</span>, resolve(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'assets'</span>,resolve(<span class=\"string\">'src/assets'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'components'</span>,resolve(<span class=\"string\">'src/components'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'layout'</span>,resolve(<span class=\"string\">'src/layout'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'base'</span>,resolve(<span class=\"string\">'src/base'</span>))</span><br><span class=\"line\">            .set(<span class=\"string\">'static'</span>,resolve(<span class=\"string\">'src/static'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://github.com/vuejs/vue-cli/blob/dev/docs/README.md\" target=\"_blank\" rel=\"noopener\">vue-cli configuration</a><br><a href=\"https://github.com/mozilla-neutrino/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a></p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"《javascript设计模式与开发实践》基础知识笔记","date":"2017-11-26T14:21:26.000Z","_content":"\n好记忆不如烂笔头，这句话是很有道理的。看过的东西，当时有感悟就应该记录下来，回忆和复习是更浪费时间的一件事。《javascript设计模式与开发实践》--曾探著。这本书写的真好，我看了很久（内容很多），之后隔了很久才想起来要记录下来。\n\n先说一说什么是设计模式吧。通俗的讲：设计模式是在某种场合下对某个问题的一种解决方案，其实也就是给面向对象软件开发中的一些好的设计取个名字。作用呢？就是在熟悉这些模式，对某些模式的理解的情况下，形成条件反射，在解决问题的时候能很快的找到解决方案。\n\n# 基础知识\n\njavascript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。主要有几个特性，分别是动态类型，多态性，封装，原型继承。\n\n## 动态类型\n\n在javascript中，我们都知道对一个变量赋值时，可以不需要考虑它的类型，从而可以把更多精力放在业务逻辑上，编写的代码数量更少，看起来更加简洁。但是，动态类型语言对变量类型的宽容给实际编码带来很大灵活的同时，也会让程序在某些情况下变得难以理解，在程序运行期间有可能发生于跟类型相关的报错，需要编写一些检测类型的代码，可谓是有利也有弊。\n\n## 多态性\n\n多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，就是给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。\n\n举个栗子\n\n``` javascript\nvar makeSound = function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    }\n};\nvar Duck = function(){};\nvar Chicken = function(){};\nmakeSound(new Duck());      //嘎嘎嘎\nmakeSound(new Chicken());   //咯咯咯\n```\n\n但是以上的做法如果增加一个狗叫声的话，就必须改动makeSound函数，才能实现“多态性”。这样做并没有把“做什么”和“谁去做”分离开。应该把不变的部分隔离出来，可变的部分封装起来。归根结底就是要消除他们之间的耦合关系。\n\n``` javascript\nvar makeSound = function(animal){\n    animal.sound();\n};\nvar Duck = function(){};\nDuck.prototype.sound = function(){\n    console.log('嘎嘎嘎');\n}\nvar Chicken = function(){};\nChicken.prototype.sound = function(){\n    console.log('咯咯咯');\n}\nmakeSound(new Duck());      //嘎嘎嘎\nmakeSound(new Chicken());   //咯咯咯\nvar Dog = function(){};\nDog.prototype.sound = function(){\n    console.log('汪汪汪');\n}\nmakeSound(new Dog());       //汪汪汪\n```\n\n`多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。`\n\n假设我们要编一个地图应用，有两家可选的API提供商选择接入我们的应该。目前我们选择的是谷歌地图，谷歌地图API提供了show方法，负责在页面上展示整个地图。\n``` javascript\nvar googleMap = {\n    show: function(){\n        console.log('开始渲染谷歌地图');\n    }\n};\nvar renderMap = function(){\n    googleMap.show();\n};\nrenderMap();            //输出：开始渲染谷歌地图\n```\n\n后来因为某些原因，要求把谷歌地图换成百度地图，我们使用条件分支来让renderMap函数同时支持两家地图API。\n\n``` javascript\nvar googleMap = {\n    show: function(){\n        console.log('开始渲染谷歌地图');\n    }\n};\nvar baiduMap = {\n    show: function(){\n        console.log('开始渲染百度地图');\n    }\n};\nvar renderMap = function(type){\n    if(type === 'google'){\n        googleMap.show();\n    }else if(type === 'baidu'){\n        baiduMap.show();\n    }\n};\nrenderMap('google');            //输出：开始渲染谷歌地图\nrenderMap('baidu');             //输出：开始渲染百度地图\n```\n\n如果在增加一个搜搜地图呢，无疑必须改动renderMap函数，继续堆砌条件分支语句。\n\n我们还是可以把程序中相同的部分抽象出来，那就是显示地图show方法。\n\n``` javascript\nvar renderMap = function(map){\n    if(map.show instanceof Function){\n        map.show();\n    }\n};\nrenderMap(googleMap);            //输出：开始渲染谷歌地图\nrenderMap(baiduMap);             //输出：开始渲染百度地图\nvar sosoMap = {\n    show: function(){\n        console.log('开始渲染搜搜地图');\n    }\n}\nrenderMap(sosoMap);              //输出：开始渲染搜搜地图\n```\n\n这段代码中，分别调用它们的show方法，会产生各自不同的执行结果。即使增加搜搜地图，renderMap函数任然不需要做任何改变。这一就把“做什么”和“怎么去做”分开了。\n\n## 封装\n\n封装的目的就是将信息隐藏。在许多语言中，封装数据都是由语法解析，提供了private、public、protected等关键字来提供不同的访问权限。但是在javascript中并没有提供这些关键字的支持，而是通过函数创建作用域来模拟出public和private这两种封装性。\n\n封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型等。\n\n## 原型继承\n\n如果我们想创建一个对象，一种方法就是先指定它的类型，然后通过类来创建这个对象。原型模式选择另一种方式，我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。\n\n``` javascript\nvar Plane = function(){\n    this.blood = 100;\n    this.attackLevel = 1;\n    this.defenseLevel = 1;\n};\nvar plane = new Plane();\nplane.blood = 500;\nplane.attackLevel = 10;\nplane.defenseLevel = 7;\nvar clonePlane = Object.create(plane);\nconsole.log(clonePlane.blood);              //输出500\nconsole.log(clonePlane.attackLevel);        //输出10\nconsole.log(clonePlane.defenseLevel);       //输出7\n```\n\n在不支持Object.create方法的浏览器中，可以使用以下代码：\n\n``` javascript\nObject.create = Object.create || function(obj){\n    var F = function(){};\n    F.prototype = obj;\n    return new F();\n}\n```\njavascript的原型继承遵守的基本规则\n\n* 所有的数据都是对象。\n``` javascript\nvar obj1 = new Object();\nvar obj2 = {};\nconsole.log(Object.getPrototypeOf(obj1)===Object.prototype);  //输出：true  \nconsole.log(Object.getPrototypeOf(obj2)===Object.prototype);  //输出：true\n```\n* 要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它。\n``` javascript\nfunction Person(name){\n    this.name = name;\n};\nPerson.prototype.getName = function(){\n    return this.name;\n};\nvar a = new Person('sven');\nconsole.log(a.name);        //输出：sven\nconsole.log(a.getName());   //输出：sven\nconsole.log(Object.getPrototypeOf(a)===Person.prototype);   //输出：true\n```\n* 对象会记住它的原型(`__proto__`)。\n``` javascript\nvar a = new Object();\nconsole.log(a.__proto__===Object.prototype);  //输出：true  \n```\n* 如果对象无法响应某个请求，会把这个请求委托给它自己的原型。\n``` javascript\nvar obj = {name: 'sven'};\nvar A = function(){};\nA.prototype = obj;\nvar a = new A();\nconsole.log(a.name);    //输出：sven\n```\n","source":"_posts/《javascript设计模式与开发实践》基础知识笔记.md","raw":"---\ntitle: 《javascript设计模式与开发实践》基础知识笔记\ndate: 2017-11-26 22:21:26\ncategories: 读书笔记\ntags: [javascript,设计模式]\n---\n\n好记忆不如烂笔头，这句话是很有道理的。看过的东西，当时有感悟就应该记录下来，回忆和复习是更浪费时间的一件事。《javascript设计模式与开发实践》--曾探著。这本书写的真好，我看了很久（内容很多），之后隔了很久才想起来要记录下来。\n\n先说一说什么是设计模式吧。通俗的讲：设计模式是在某种场合下对某个问题的一种解决方案，其实也就是给面向对象软件开发中的一些好的设计取个名字。作用呢？就是在熟悉这些模式，对某些模式的理解的情况下，形成条件反射，在解决问题的时候能很快的找到解决方案。\n\n# 基础知识\n\njavascript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。主要有几个特性，分别是动态类型，多态性，封装，原型继承。\n\n## 动态类型\n\n在javascript中，我们都知道对一个变量赋值时，可以不需要考虑它的类型，从而可以把更多精力放在业务逻辑上，编写的代码数量更少，看起来更加简洁。但是，动态类型语言对变量类型的宽容给实际编码带来很大灵活的同时，也会让程序在某些情况下变得难以理解，在程序运行期间有可能发生于跟类型相关的报错，需要编写一些检测类型的代码，可谓是有利也有弊。\n\n## 多态性\n\n多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，就是给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。\n\n举个栗子\n\n``` javascript\nvar makeSound = function(animal){\n    if(animal instanceof Duck){\n        console.log('嘎嘎嘎');\n    }else if(animal instanceof Chicken){\n        console.log('咯咯咯');\n    }\n};\nvar Duck = function(){};\nvar Chicken = function(){};\nmakeSound(new Duck());      //嘎嘎嘎\nmakeSound(new Chicken());   //咯咯咯\n```\n\n但是以上的做法如果增加一个狗叫声的话，就必须改动makeSound函数，才能实现“多态性”。这样做并没有把“做什么”和“谁去做”分离开。应该把不变的部分隔离出来，可变的部分封装起来。归根结底就是要消除他们之间的耦合关系。\n\n``` javascript\nvar makeSound = function(animal){\n    animal.sound();\n};\nvar Duck = function(){};\nDuck.prototype.sound = function(){\n    console.log('嘎嘎嘎');\n}\nvar Chicken = function(){};\nChicken.prototype.sound = function(){\n    console.log('咯咯咯');\n}\nmakeSound(new Duck());      //嘎嘎嘎\nmakeSound(new Chicken());   //咯咯咯\nvar Dog = function(){};\nDog.prototype.sound = function(){\n    console.log('汪汪汪');\n}\nmakeSound(new Dog());       //汪汪汪\n```\n\n`多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。`\n\n假设我们要编一个地图应用，有两家可选的API提供商选择接入我们的应该。目前我们选择的是谷歌地图，谷歌地图API提供了show方法，负责在页面上展示整个地图。\n``` javascript\nvar googleMap = {\n    show: function(){\n        console.log('开始渲染谷歌地图');\n    }\n};\nvar renderMap = function(){\n    googleMap.show();\n};\nrenderMap();            //输出：开始渲染谷歌地图\n```\n\n后来因为某些原因，要求把谷歌地图换成百度地图，我们使用条件分支来让renderMap函数同时支持两家地图API。\n\n``` javascript\nvar googleMap = {\n    show: function(){\n        console.log('开始渲染谷歌地图');\n    }\n};\nvar baiduMap = {\n    show: function(){\n        console.log('开始渲染百度地图');\n    }\n};\nvar renderMap = function(type){\n    if(type === 'google'){\n        googleMap.show();\n    }else if(type === 'baidu'){\n        baiduMap.show();\n    }\n};\nrenderMap('google');            //输出：开始渲染谷歌地图\nrenderMap('baidu');             //输出：开始渲染百度地图\n```\n\n如果在增加一个搜搜地图呢，无疑必须改动renderMap函数，继续堆砌条件分支语句。\n\n我们还是可以把程序中相同的部分抽象出来，那就是显示地图show方法。\n\n``` javascript\nvar renderMap = function(map){\n    if(map.show instanceof Function){\n        map.show();\n    }\n};\nrenderMap(googleMap);            //输出：开始渲染谷歌地图\nrenderMap(baiduMap);             //输出：开始渲染百度地图\nvar sosoMap = {\n    show: function(){\n        console.log('开始渲染搜搜地图');\n    }\n}\nrenderMap(sosoMap);              //输出：开始渲染搜搜地图\n```\n\n这段代码中，分别调用它们的show方法，会产生各自不同的执行结果。即使增加搜搜地图，renderMap函数任然不需要做任何改变。这一就把“做什么”和“怎么去做”分开了。\n\n## 封装\n\n封装的目的就是将信息隐藏。在许多语言中，封装数据都是由语法解析，提供了private、public、protected等关键字来提供不同的访问权限。但是在javascript中并没有提供这些关键字的支持，而是通过函数创建作用域来模拟出public和private这两种封装性。\n\n封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型等。\n\n## 原型继承\n\n如果我们想创建一个对象，一种方法就是先指定它的类型，然后通过类来创建这个对象。原型模式选择另一种方式，我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。\n\n``` javascript\nvar Plane = function(){\n    this.blood = 100;\n    this.attackLevel = 1;\n    this.defenseLevel = 1;\n};\nvar plane = new Plane();\nplane.blood = 500;\nplane.attackLevel = 10;\nplane.defenseLevel = 7;\nvar clonePlane = Object.create(plane);\nconsole.log(clonePlane.blood);              //输出500\nconsole.log(clonePlane.attackLevel);        //输出10\nconsole.log(clonePlane.defenseLevel);       //输出7\n```\n\n在不支持Object.create方法的浏览器中，可以使用以下代码：\n\n``` javascript\nObject.create = Object.create || function(obj){\n    var F = function(){};\n    F.prototype = obj;\n    return new F();\n}\n```\njavascript的原型继承遵守的基本规则\n\n* 所有的数据都是对象。\n``` javascript\nvar obj1 = new Object();\nvar obj2 = {};\nconsole.log(Object.getPrototypeOf(obj1)===Object.prototype);  //输出：true  \nconsole.log(Object.getPrototypeOf(obj2)===Object.prototype);  //输出：true\n```\n* 要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它。\n``` javascript\nfunction Person(name){\n    this.name = name;\n};\nPerson.prototype.getName = function(){\n    return this.name;\n};\nvar a = new Person('sven');\nconsole.log(a.name);        //输出：sven\nconsole.log(a.getName());   //输出：sven\nconsole.log(Object.getPrototypeOf(a)===Person.prototype);   //输出：true\n```\n* 对象会记住它的原型(`__proto__`)。\n``` javascript\nvar a = new Object();\nconsole.log(a.__proto__===Object.prototype);  //输出：true  \n```\n* 如果对象无法响应某个请求，会把这个请求委托给它自己的原型。\n``` javascript\nvar obj = {name: 'sven'};\nvar A = function(){};\nA.prototype = obj;\nvar a = new A();\nconsole.log(a.name);    //输出：sven\n```\n","slug":"《javascript设计模式与开发实践》基础知识笔记","published":1,"updated":"2018-04-23T15:14:45.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7n000hfc92uggf673x","content":"<p>好记忆不如烂笔头，这句话是很有道理的。看过的东西，当时有感悟就应该记录下来，回忆和复习是更浪费时间的一件事。《javascript设计模式与开发实践》–曾探著。这本书写的真好，我看了很久（内容很多），之后隔了很久才想起来要记录下来。</p>\n<p>先说一说什么是设计模式吧。通俗的讲：设计模式是在某种场合下对某个问题的一种解决方案，其实也就是给面向对象软件开发中的一些好的设计取个名字。作用呢？就是在熟悉这些模式，对某些模式的理解的情况下，形成条件反射，在解决问题的时候能很快的找到解决方案。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><p>javascript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。主要有几个特性，分别是动态类型，多态性，封装，原型继承。</p>\n<h2 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h2><p>在javascript中，我们都知道对一个变量赋值时，可以不需要考虑它的类型，从而可以把更多精力放在业务逻辑上，编写的代码数量更少，看起来更加简洁。但是，动态类型语言对变量类型的宽容给实际编码带来很大灵活的同时，也会让程序在某些情况下变得难以理解，在程序运行期间有可能发生于跟类型相关的报错，需要编写一些检测类型的代码，可谓是有利也有弊。</p>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h2><p>多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，就是给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p>\n<p>举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeSound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(animal <span class=\"keyword\">instanceof</span> Duck)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'嘎嘎嘎'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(animal <span class=\"keyword\">instanceof</span> Chicken)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'咯咯咯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Duck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chicken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Duck());      <span class=\"comment\">//嘎嘎嘎</span></span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Chicken());   <span class=\"comment\">//咯咯咯</span></span><br></pre></td></tr></table></figure>\n<p>但是以上的做法如果增加一个狗叫声的话，就必须改动makeSound函数，才能实现“多态性”。这样做并没有把“做什么”和“谁去做”分离开。应该把不变的部分隔离出来，可变的部分封装起来。归根结底就是要消除他们之间的耦合关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeSound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    animal.sound();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Duck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Duck.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'嘎嘎嘎'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chicken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Chicken.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'咯咯咯'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Duck());      <span class=\"comment\">//嘎嘎嘎</span></span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Chicken());   <span class=\"comment\">//咯咯咯</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Dog.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'汪汪汪'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Dog());       <span class=\"comment\">//汪汪汪</span></span><br></pre></td></tr></table></figure>\n<p><code>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</code></p>\n<p>假设我们要编一个地图应用，有两家可选的API提供商选择接入我们的应该。目前我们选择的是谷歌地图，谷歌地图API提供了show方法，负责在页面上展示整个地图。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> googleMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染谷歌地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    googleMap.show();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap();            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br></pre></td></tr></table></figure></p>\n<p>后来因为某些原因，要求把谷歌地图换成百度地图，我们使用条件分支来让renderMap函数同时支持两家地图API。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> googleMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染谷歌地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baiduMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染百度地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'google'</span>)&#123;</span><br><span class=\"line\">        googleMap.show();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type === <span class=\"string\">'baidu'</span>)&#123;</span><br><span class=\"line\">        baiduMap.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap(<span class=\"string\">'google'</span>);            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br><span class=\"line\">renderMap(<span class=\"string\">'baidu'</span>);             <span class=\"comment\">//输出：开始渲染百度地图</span></span><br></pre></td></tr></table></figure>\n<p>如果在增加一个搜搜地图呢，无疑必须改动renderMap函数，继续堆砌条件分支语句。</p>\n<p>我们还是可以把程序中相同的部分抽象出来，那就是显示地图show方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.show <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>)&#123;</span><br><span class=\"line\">        map.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap(googleMap);            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br><span class=\"line\">renderMap(baiduMap);             <span class=\"comment\">//输出：开始渲染百度地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sosoMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染搜搜地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderMap(sosoMap);              <span class=\"comment\">//输出：开始渲染搜搜地图</span></span><br></pre></td></tr></table></figure>\n<p>这段代码中，分别调用它们的show方法，会产生各自不同的执行结果。即使增加搜搜地图，renderMap函数任然不需要做任何改变。这一就把“做什么”和“怎么去做”分开了。</p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>封装的目的就是将信息隐藏。在许多语言中，封装数据都是由语法解析，提供了private、public、protected等关键字来提供不同的访问权限。但是在javascript中并没有提供这些关键字的支持，而是通过函数创建作用域来模拟出public和private这两种封装性。</p>\n<p>封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型等。</p>\n<h2 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h2><p>如果我们想创建一个对象，一种方法就是先指定它的类型，然后通过类来创建这个对象。原型模式选择另一种方式，我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Plane = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.blood = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.attackLevel = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.defenseLevel = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> plane = <span class=\"keyword\">new</span> Plane();</span><br><span class=\"line\">plane.blood = <span class=\"number\">500</span>;</span><br><span class=\"line\">plane.attackLevel = <span class=\"number\">10</span>;</span><br><span class=\"line\">plane.defenseLevel = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clonePlane = <span class=\"built_in\">Object</span>.create(plane);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.blood);              <span class=\"comment\">//输出500</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.attackLevel);        <span class=\"comment\">//输出10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.defenseLevel);       <span class=\"comment\">//输出7</span></span><br></pre></td></tr></table></figure>\n<p>在不支持Object.create方法的浏览器中，可以使用以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.create = <span class=\"built_in\">Object</span>.create || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javascript的原型继承遵守的基本规则</p>\n<ul>\n<li><p>所有的数据都是对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj1)===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj2)===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Person(<span class=\"string\">'sven'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name);        <span class=\"comment\">//输出：sven</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.getName());   <span class=\"comment\">//输出：sven</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(a)===Person.prototype);   <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象会记住它的原型(<code>__proto__</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果对象无法响应某个请求，会把这个请求委托给它自己的原型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'sven'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">A.prototype = obj;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name);    <span class=\"comment\">//输出：sven</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>好记忆不如烂笔头，这句话是很有道理的。看过的东西，当时有感悟就应该记录下来，回忆和复习是更浪费时间的一件事。《javascript设计模式与开发实践》–曾探著。这本书写的真好，我看了很久（内容很多），之后隔了很久才想起来要记录下来。</p>\n<p>先说一说什么是设计模式吧。通俗的讲：设计模式是在某种场合下对某个问题的一种解决方案，其实也就是给面向对象软件开发中的一些好的设计取个名字。作用呢？就是在熟悉这些模式，对某些模式的理解的情况下，形成条件反射，在解决问题的时候能很快的找到解决方案。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><p>javascript没有提供传统面向对象语言中的类式继承，而是通过原型委托的方式来实现对象与对象之间的继承。主要有几个特性，分别是动态类型，多态性，封装，原型继承。</p>\n<h2 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h2><p>在javascript中，我们都知道对一个变量赋值时，可以不需要考虑它的类型，从而可以把更多精力放在业务逻辑上，编写的代码数量更少，看起来更加简洁。但是，动态类型语言对变量类型的宽容给实际编码带来很大灵活的同时，也会让程序在某些情况下变得难以理解，在程序运行期间有可能发生于跟类型相关的报错，需要编写一些检测类型的代码，可谓是有利也有弊。</p>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h2><p>多态的实际含义是：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，就是给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p>\n<p>举个栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeSound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(animal <span class=\"keyword\">instanceof</span> Duck)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'嘎嘎嘎'</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(animal <span class=\"keyword\">instanceof</span> Chicken)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'咯咯咯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Duck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chicken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Duck());      <span class=\"comment\">//嘎嘎嘎</span></span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Chicken());   <span class=\"comment\">//咯咯咯</span></span><br></pre></td></tr></table></figure>\n<p>但是以上的做法如果增加一个狗叫声的话，就必须改动makeSound函数，才能实现“多态性”。这样做并没有把“做什么”和“谁去做”分离开。应该把不变的部分隔离出来，可变的部分封装起来。归根结底就是要消除他们之间的耦合关系。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeSound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    animal.sound();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Duck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Duck.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'嘎嘎嘎'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Chicken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Chicken.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'咯咯咯'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Duck());      <span class=\"comment\">//嘎嘎嘎</span></span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Chicken());   <span class=\"comment\">//咯咯咯</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">Dog.prototype.sound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'汪汪汪'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeSound(<span class=\"keyword\">new</span> Dog());       <span class=\"comment\">//汪汪汪</span></span><br></pre></td></tr></table></figure>\n<p><code>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</code></p>\n<p>假设我们要编一个地图应用，有两家可选的API提供商选择接入我们的应该。目前我们选择的是谷歌地图，谷歌地图API提供了show方法，负责在页面上展示整个地图。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> googleMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染谷歌地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    googleMap.show();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap();            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br></pre></td></tr></table></figure></p>\n<p>后来因为某些原因，要求把谷歌地图换成百度地图，我们使用条件分支来让renderMap函数同时支持两家地图API。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> googleMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染谷歌地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baiduMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染百度地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type === <span class=\"string\">'google'</span>)&#123;</span><br><span class=\"line\">        googleMap.show();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type === <span class=\"string\">'baidu'</span>)&#123;</span><br><span class=\"line\">        baiduMap.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap(<span class=\"string\">'google'</span>);            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br><span class=\"line\">renderMap(<span class=\"string\">'baidu'</span>);             <span class=\"comment\">//输出：开始渲染百度地图</span></span><br></pre></td></tr></table></figure>\n<p>如果在增加一个搜搜地图呢，无疑必须改动renderMap函数，继续堆砌条件分支语句。</p>\n<p>我们还是可以把程序中相同的部分抽象出来，那就是显示地图show方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.show <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>)&#123;</span><br><span class=\"line\">        map.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">renderMap(googleMap);            <span class=\"comment\">//输出：开始渲染谷歌地图</span></span><br><span class=\"line\">renderMap(baiduMap);             <span class=\"comment\">//输出：开始渲染百度地图</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sosoMap = &#123;</span><br><span class=\"line\">    show: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始渲染搜搜地图'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderMap(sosoMap);              <span class=\"comment\">//输出：开始渲染搜搜地图</span></span><br></pre></td></tr></table></figure>\n<p>这段代码中，分别调用它们的show方法，会产生各自不同的执行结果。即使增加搜搜地图，renderMap函数任然不需要做任何改变。这一就把“做什么”和“怎么去做”分开了。</p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>封装的目的就是将信息隐藏。在许多语言中，封装数据都是由语法解析，提供了private、public、protected等关键字来提供不同的访问权限。但是在javascript中并没有提供这些关键字的支持，而是通过函数创建作用域来模拟出public和private这两种封装性。</p>\n<p>封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型等。</p>\n<h2 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h2><p>如果我们想创建一个对象，一种方法就是先指定它的类型，然后通过类来创建这个对象。原型模式选择另一种方式，我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Plane = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.blood = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.attackLevel = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.defenseLevel = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> plane = <span class=\"keyword\">new</span> Plane();</span><br><span class=\"line\">plane.blood = <span class=\"number\">500</span>;</span><br><span class=\"line\">plane.attackLevel = <span class=\"number\">10</span>;</span><br><span class=\"line\">plane.defenseLevel = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clonePlane = <span class=\"built_in\">Object</span>.create(plane);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.blood);              <span class=\"comment\">//输出500</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.attackLevel);        <span class=\"comment\">//输出10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clonePlane.defenseLevel);       <span class=\"comment\">//输出7</span></span><br></pre></td></tr></table></figure>\n<p>在不支持Object.create方法的浏览器中，可以使用以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.create = <span class=\"built_in\">Object</span>.create || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>javascript的原型继承遵守的基本规则</p>\n<ul>\n<li><p>所有的数据都是对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj1)===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true  </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(obj2)===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要得到一个对象，不是通过实例化，而是找到一个对象作为原型并克隆它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Person(<span class=\"string\">'sven'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name);        <span class=\"comment\">//输出：sven</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.getName());   <span class=\"comment\">//输出：sven</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(a)===Person.prototype);   <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象会记住它的原型(<code>__proto__</code>)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__===<span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">//输出：true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果对象无法响应某个请求，会把这个请求委托给它自己的原型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'sven'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">A.prototype = obj;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name);    <span class=\"comment\">//输出：sven</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"传统网站如何巧使webpack解决问题","date":"2018-04-20T02:23:32.000Z","line_number":false,"_content":"\n# 前言\n\n哈哈，感觉标题有点大了，有标题党的嫌疑，但实在想不出什么合适的名字。\n\n昨天产品提出一个需求，就是修改现有移动端网站下载APP的提示样式。是的，这是个简单的需求，没什么值得好提的。但就是有个问题，由于现在网站还是以后端为主导，没做分离，很多层次结构比较混乱。而且一改是改三个网站，涉及到三个网站要更新`html，css，js，img`，额......感觉有点头大。\n\n类似这样的需求：\n\n{% asset_img 1.jpg 资讯界面加下载提示 %}\n\n本来想硬着头皮做完一遍复制，替换就好。后来想到是不是可以用`webpack`将`html，css，js，img`打包成一个js文件呢，于是开始了尝试。\n\n# 尝试\n\n目录结构：\n```bash\n- build-test\n    - example                       # 代码开发目录\n        downApp.js                  # 逻辑代码\n        downApp.min.js            # 打包代码\n        index.css                 # 引用样式\n        index.html                # html结构\n        js.cookie.js              # 引用cookie\n        km-downapp-close.png      # 关闭按钮图片\n        km-downapp-logo.png       # logo图片\n    + node_modules       #所使用的nodejs模块\n    package.json         #项目配置\n    package-lock.json\n    webpack.config.js    #webpack配置\n    README.md            #项目说明\n```\n\n1、新建目录 `mkdir build-test`，进入目录 `cd build-test`。\n\n2、执行 `npm init --yes` 快速初始化项目。\n\n3、安装webpack`npm install --save-dev webpack`，各种loader `npm install --save-dev css-loader style-loader url-loader`，js压缩插件 `npm install --save-dev uglifyjs-webpack-plugin`。\n\n4、新建webpack配置\n\n`webpack.config.js`\n\n```js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n    entry: {\n        index : './example/downApp.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                  { loader: \"style-loader\" },\n                  { loader: \"css-loader\" },\n                ]\n            },\n            // 将css中引用url路径的图片转成base64（字节数小于10000的图片）\n            {\n                test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n                loader: 'url-loader',\n                options: {\n                  limit: 10000\n                }\n            }\n        ]\n    },\n    plugins: [\n        // 压缩js\n        // new UglifyJsPlugin()\n    ],\n    output: {\n        filename: './example/downApp.min.js'\n    }\n}\n```\n\n5、新建目录 `mkdir example`，进入目录 `cd example`\n\n6、新建页面`index.html`，配置一些基本结构。\n\n`index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>demo页面</title>\n\n    <script type=\"text/javascript\">\n        document.documentElement.style.fontSize = document.documentElement.clientWidth / 7.50 + 'px';\n    </script>\n    <style type=\"text/css\" media=\"screen\">\n    body{margin:0;}\n    </style>\n</head>\n<body>\n    <div id=\"km-header\"></div>\n    <script type=\"text/javascript\" src=\"http://m.kmzyw.com.cn/resources/js/jquery.min.js\"></script>\n    <script src=\"downApp.min.js\"></script>\n</body>\n</html>\n```\n\n7、主要逻辑 `downApp.js`\n\n`downApp.js`\n\n```js\nimport './index.css';\nimport Cookies from './js.cookie.js';\n$(function(){\n    function getRequest(){\n      var u = location.search;\n      var p = new Object();\n      if (u.indexOf(\"?\") != -1) {\n          var str = u.substr(1);\n          strs = str.split(\"&\");\n          for (var i = 0; i < strs.length; i++) {\n               p[strs[i].split(\"=\")[0]] = decodeURI(strs[i].split(\"=\")[1]);\n          }\n      }\n      return p;\n    }\n    var reqObj = getRequest();\n    // 判断是否APP访问\n    if(reqObj.from != 'app' && !reqObj.from){\n        var downValues = Cookies(\"__closeapp\");\n        var downDom = '<div class=\"km-downapp-wrap\"><a href=\"http://m.kmzyw.com.cn/resources/html/app-download.html\"class=\"km-downapp-link\"><div class=\"km-downapp-logo\"></div><div class=\"km-downapp-text\"><p class=\"font-large\">康美中药城APP新版上线</p><p>随时随地，药材服务不离线</p></div><div class=\"km-downapp-button\">立即下载</div></a><a href=\"javascript:void(0);\"class=\"km-downapp-close\"></a></div>';\n        if (downValues != '1') {\n            $(\"#km-header\").before(downDom);\n        }\n    }\n    $(\"body\").on(\"click\", \".km-downapp-close\", function(){\n        $(\".km-downapp-wrap\").remove();\n        Cookies('__closeapp', '1',{ expires: 1});\n    });\n});\n```\n\n8、样式表 `index.css`\n\n`index.css`\n\n```css\n.km-downapp-wrap{position:relative;width:100%;height:1rem;background:#e7666e;z-index:9999;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;font-family: -apple-system, BlinkMacSystemFont, \"PingFang SC\",\"Helvetica Neue\",STHeiti,\"Microsoft Yahei\",Tahoma,Simsun,sans-serif;}\n.km-downapp-logo{margin-right: 0.24rem;width:0.7rem;height:0.7rem;background:url('./km-downapp-logo.png') no-repeat;background-size:100% 100%;}\n.km-downapp-link{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;text-decoration:none;margin-left: 0.3rem;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}\n.km-downapp-link:hover,.km-downapp-link:active{text-decoration:none;}\n.km-downapp-text>p{font-size:0.2rem;font-weight:normal;color:#f5cbcc;line-height: 0.28rem;margin:0;}\n.km-downapp-text .font-large{font-size:0.32rem;color:#fff;line-height: 0.4rem;}\n.km-downapp-button{display:block;width: 1.7rem;height: 0.6rem;background:#fff;-webkit-border-radius:0.3rem;border-radius:0.3rem;font-size:0.28rem;line-height:0.6rem;text-decoration:none;color:#ea4d58;text-align:center;-webkit-tap-highlight-color: rgba(255,255,255,.35);      -webkit-touch-callout: none;margin-left:0.36rem;}\n.km-downapp-close{display:block;width:0.28rem;height:0.28rem;background:url('./km-downapp-close.png') no-repeat;background-size:100% 100%;margin-left: 0.2rem;}\n```\n\n9、跳回`/build-test`目录，执行 `webpack` 命令，生成 `downApp.min.js` 文件，测试结果，大功告成！（可以开启压缩JS插件减少文件大小）\n\n打包结果\n\n{% asset_img 2.jpg 打包结果 %}\n\n# 总结\n\n其实文章内容很简单，用的还是基本的webpack打包功能，关键是看你怎么用。如果是单页应用，打包成一个js会遇到白屏问题，为了避免这个还会把css文件单独分离出来。但对于传统项目年久失修的复杂结构来说的话，不失为一个好的解决方法。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/传统网站如何巧使webpack解决问题.md","raw":"---\ntitle: 传统网站如何巧使webpack解决问题\ndate: 2018-04-20 10:23:32\ncategories: webpack\ntags: [webpack, 打包]\nline_number: false\n---\n\n# 前言\n\n哈哈，感觉标题有点大了，有标题党的嫌疑，但实在想不出什么合适的名字。\n\n昨天产品提出一个需求，就是修改现有移动端网站下载APP的提示样式。是的，这是个简单的需求，没什么值得好提的。但就是有个问题，由于现在网站还是以后端为主导，没做分离，很多层次结构比较混乱。而且一改是改三个网站，涉及到三个网站要更新`html，css，js，img`，额......感觉有点头大。\n\n类似这样的需求：\n\n{% asset_img 1.jpg 资讯界面加下载提示 %}\n\n本来想硬着头皮做完一遍复制，替换就好。后来想到是不是可以用`webpack`将`html，css，js，img`打包成一个js文件呢，于是开始了尝试。\n\n# 尝试\n\n目录结构：\n```bash\n- build-test\n    - example                       # 代码开发目录\n        downApp.js                  # 逻辑代码\n        downApp.min.js            # 打包代码\n        index.css                 # 引用样式\n        index.html                # html结构\n        js.cookie.js              # 引用cookie\n        km-downapp-close.png      # 关闭按钮图片\n        km-downapp-logo.png       # logo图片\n    + node_modules       #所使用的nodejs模块\n    package.json         #项目配置\n    package-lock.json\n    webpack.config.js    #webpack配置\n    README.md            #项目说明\n```\n\n1、新建目录 `mkdir build-test`，进入目录 `cd build-test`。\n\n2、执行 `npm init --yes` 快速初始化项目。\n\n3、安装webpack`npm install --save-dev webpack`，各种loader `npm install --save-dev css-loader style-loader url-loader`，js压缩插件 `npm install --save-dev uglifyjs-webpack-plugin`。\n\n4、新建webpack配置\n\n`webpack.config.js`\n\n```js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n    entry: {\n        index : './example/downApp.js'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                  { loader: \"style-loader\" },\n                  { loader: \"css-loader\" },\n                ]\n            },\n            // 将css中引用url路径的图片转成base64（字节数小于10000的图片）\n            {\n                test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n                loader: 'url-loader',\n                options: {\n                  limit: 10000\n                }\n            }\n        ]\n    },\n    plugins: [\n        // 压缩js\n        // new UglifyJsPlugin()\n    ],\n    output: {\n        filename: './example/downApp.min.js'\n    }\n}\n```\n\n5、新建目录 `mkdir example`，进入目录 `cd example`\n\n6、新建页面`index.html`，配置一些基本结构。\n\n`index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>demo页面</title>\n\n    <script type=\"text/javascript\">\n        document.documentElement.style.fontSize = document.documentElement.clientWidth / 7.50 + 'px';\n    </script>\n    <style type=\"text/css\" media=\"screen\">\n    body{margin:0;}\n    </style>\n</head>\n<body>\n    <div id=\"km-header\"></div>\n    <script type=\"text/javascript\" src=\"http://m.kmzyw.com.cn/resources/js/jquery.min.js\"></script>\n    <script src=\"downApp.min.js\"></script>\n</body>\n</html>\n```\n\n7、主要逻辑 `downApp.js`\n\n`downApp.js`\n\n```js\nimport './index.css';\nimport Cookies from './js.cookie.js';\n$(function(){\n    function getRequest(){\n      var u = location.search;\n      var p = new Object();\n      if (u.indexOf(\"?\") != -1) {\n          var str = u.substr(1);\n          strs = str.split(\"&\");\n          for (var i = 0; i < strs.length; i++) {\n               p[strs[i].split(\"=\")[0]] = decodeURI(strs[i].split(\"=\")[1]);\n          }\n      }\n      return p;\n    }\n    var reqObj = getRequest();\n    // 判断是否APP访问\n    if(reqObj.from != 'app' && !reqObj.from){\n        var downValues = Cookies(\"__closeapp\");\n        var downDom = '<div class=\"km-downapp-wrap\"><a href=\"http://m.kmzyw.com.cn/resources/html/app-download.html\"class=\"km-downapp-link\"><div class=\"km-downapp-logo\"></div><div class=\"km-downapp-text\"><p class=\"font-large\">康美中药城APP新版上线</p><p>随时随地，药材服务不离线</p></div><div class=\"km-downapp-button\">立即下载</div></a><a href=\"javascript:void(0);\"class=\"km-downapp-close\"></a></div>';\n        if (downValues != '1') {\n            $(\"#km-header\").before(downDom);\n        }\n    }\n    $(\"body\").on(\"click\", \".km-downapp-close\", function(){\n        $(\".km-downapp-wrap\").remove();\n        Cookies('__closeapp', '1',{ expires: 1});\n    });\n});\n```\n\n8、样式表 `index.css`\n\n`index.css`\n\n```css\n.km-downapp-wrap{position:relative;width:100%;height:1rem;background:#e7666e;z-index:9999;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;font-family: -apple-system, BlinkMacSystemFont, \"PingFang SC\",\"Helvetica Neue\",STHeiti,\"Microsoft Yahei\",Tahoma,Simsun,sans-serif;}\n.km-downapp-logo{margin-right: 0.24rem;width:0.7rem;height:0.7rem;background:url('./km-downapp-logo.png') no-repeat;background-size:100% 100%;}\n.km-downapp-link{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;text-decoration:none;margin-left: 0.3rem;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}\n.km-downapp-link:hover,.km-downapp-link:active{text-decoration:none;}\n.km-downapp-text>p{font-size:0.2rem;font-weight:normal;color:#f5cbcc;line-height: 0.28rem;margin:0;}\n.km-downapp-text .font-large{font-size:0.32rem;color:#fff;line-height: 0.4rem;}\n.km-downapp-button{display:block;width: 1.7rem;height: 0.6rem;background:#fff;-webkit-border-radius:0.3rem;border-radius:0.3rem;font-size:0.28rem;line-height:0.6rem;text-decoration:none;color:#ea4d58;text-align:center;-webkit-tap-highlight-color: rgba(255,255,255,.35);      -webkit-touch-callout: none;margin-left:0.36rem;}\n.km-downapp-close{display:block;width:0.28rem;height:0.28rem;background:url('./km-downapp-close.png') no-repeat;background-size:100% 100%;margin-left: 0.2rem;}\n```\n\n9、跳回`/build-test`目录，执行 `webpack` 命令，生成 `downApp.min.js` 文件，测试结果，大功告成！（可以开启压缩JS插件减少文件大小）\n\n打包结果\n\n{% asset_img 2.jpg 打包结果 %}\n\n# 总结\n\n其实文章内容很简单，用的还是基本的webpack打包功能，关键是看你怎么用。如果是单页应用，打包成一个js会遇到白屏问题，为了避免这个还会把css文件单独分离出来。但对于传统项目年久失修的复杂结构来说的话，不失为一个好的解决方法。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"传统网站如何巧使webpack解决问题","published":1,"updated":"2018-04-23T15:09:31.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7p000mfc92rq86iue9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>哈哈，感觉标题有点大了，有标题党的嫌疑，但实在想不出什么合适的名字。</p>\n<p>昨天产品提出一个需求，就是修改现有移动端网站下载APP的提示样式。是的，这是个简单的需求，没什么值得好提的。但就是有个问题，由于现在网站还是以后端为主导，没做分离，很多层次结构比较混乱。而且一改是改三个网站，涉及到三个网站要更新<code>html，css，js，img</code>，额……感觉有点头大。</p>\n<p>类似这样的需求：</p>\n<img src=\"/2018/04/20/传统网站如何巧使webpack解决问题/1.jpg\" title=\"资讯界面加下载提示\">\n<p>本来想硬着头皮做完一遍复制，替换就好。后来想到是不是可以用<code>webpack</code>将<code>html，css，js，img</code>打包成一个js文件呢，于是开始了尝试。</p>\n<h1 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h1><p>目录结构：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">- build-test</span><br><span class=\"line\">    - example                       <span class=\"comment\"># 代码开发目录</span></span><br><span class=\"line\">        downApp.js                  <span class=\"comment\"># 逻辑代码</span></span><br><span class=\"line\">        downApp.min.js            <span class=\"comment\"># 打包代码</span></span><br><span class=\"line\">        index.css                 <span class=\"comment\"># 引用样式</span></span><br><span class=\"line\">        index.html                <span class=\"comment\"># html结构</span></span><br><span class=\"line\">        js.cookie.js              <span class=\"comment\"># 引用cookie</span></span><br><span class=\"line\">        km-downapp-close.png      <span class=\"comment\"># 关闭按钮图片</span></span><br><span class=\"line\">        km-downapp-logo.png       <span class=\"comment\"># logo图片</span></span><br><span class=\"line\">    + node_modules       <span class=\"comment\">#所使用的nodejs模块</span></span><br><span class=\"line\">    package.json         <span class=\"comment\">#项目配置</span></span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    webpack.config.js    <span class=\"comment\">#webpack配置</span></span><br><span class=\"line\">    README.md            <span class=\"comment\">#项目说明</span></span><br></pre></td></tr></table></figure></p>\n<p>1、新建目录 <code>mkdir build-test</code>，进入目录 <code>cd build-test</code>。</p>\n<p>2、执行 <code>npm init --yes</code> 快速初始化项目。</p>\n<p>3、安装webpack<code>npm install --save-dev webpack</code>，各种loader <code>npm install --save-dev css-loader style-loader url-loader</code>，js压缩插件 <code>npm install --save-dev uglifyjs-webpack-plugin</code>。</p>\n<p>4、新建webpack配置</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index : <span class=\"string\">'./example/downApp.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                  &#123; <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader\"</span> &#125;,</span><br><span class=\"line\">                  &#123; <span class=\"attr\">loader</span>: <span class=\"string\">\"css-loader\"</span> &#125;,</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 将css中引用url路径的图片转成base64（字节数小于10000的图片）</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  limit: <span class=\"number\">10000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 压缩js</span></span><br><span class=\"line\">        <span class=\"comment\">// new UglifyJsPlugin()</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'./example/downApp.min.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、新建目录 <code>mkdir example</code>，进入目录 <code>cd example</code></p>\n<p>6、新建页面<code>index.html</code>，配置一些基本结构。</p>\n<p><code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>demo页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.documentElement.style.fontSize = <span class=\"built_in\">document</span>.documentElement.clientWidth / <span class=\"number\">7.50</span> + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"km-header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://m.kmzyw.com.cn/resources/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"downApp.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7、主要逻辑 <code>downApp.js</code></p>\n<p><code>downApp.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Cookies <span class=\"keyword\">from</span> <span class=\"string\">'./js.cookie.js'</span>;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRequest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> u = location.search;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">\"?\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> str = u.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">          strs = str.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">               p[strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">0</span>]] = <span class=\"built_in\">decodeURI</span>(strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reqObj = getRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否APP访问</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reqObj.from != <span class=\"string\">'app'</span> &amp;&amp; !reqObj.from)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> downValues = Cookies(<span class=\"string\">\"__closeapp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> downDom = <span class=\"string\">'&lt;div class=\"km-downapp-wrap\"&gt;&lt;a href=\"http://m.kmzyw.com.cn/resources/html/app-download.html\"class=\"km-downapp-link\"&gt;&lt;div class=\"km-downapp-logo\"&gt;&lt;/div&gt;&lt;div class=\"km-downapp-text\"&gt;&lt;p class=\"font-large\"&gt;康美中药城APP新版上线&lt;/p&gt;&lt;p&gt;随时随地，药材服务不离线&lt;/p&gt;&lt;/div&gt;&lt;div class=\"km-downapp-button\"&gt;立即下载&lt;/div&gt;&lt;/a&gt;&lt;a href=\"javascript:void(0);\"class=\"km-downapp-close\"&gt;&lt;/a&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (downValues != <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#km-header\"</span>).before(downDom);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".km-downapp-close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\".km-downapp-wrap\"</span>).remove();</span><br><span class=\"line\">        Cookies(<span class=\"string\">'__closeapp'</span>, <span class=\"string\">'1'</span>,&#123; <span class=\"attr\">expires</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>8、样式表 <code>index.css</code></p>\n<p><code>index.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.km-downapp-wrap</span>&#123;<span class=\"attribute\">position</span>:relative;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"attribute\">height</span>:<span class=\"number\">1rem</span>;<span class=\"attribute\">background</span>:<span class=\"number\">#e7666e</span>;<span class=\"attribute\">z-index</span>:<span class=\"number\">9999</span>;<span class=\"attribute\">-webkit-box-sizing</span>:border-box;<span class=\"attribute\">box-sizing</span>:border-box;<span class=\"attribute\">overflow</span>:hidden;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;<span class=\"attribute\">font-family</span>: -apple-system, BlinkMacSystemFont, <span class=\"string\">\"PingFang SC\"</span>,<span class=\"string\">\"Helvetica Neue\"</span>,STHeiti,<span class=\"string\">\"Microsoft Yahei\"</span>,Tahoma,Simsun,sans-serif;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-logo</span>&#123;<span class=\"attribute\">margin-right</span>: <span class=\"number\">0.24rem</span>;<span class=\"attribute\">width</span>:<span class=\"number\">0.7rem</span>;<span class=\"attribute\">height</span>:<span class=\"number\">0.7rem</span>;<span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(<span class=\"string\">'./km-downapp-logo.png'</span>) no-repeat;<span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-link</span>&#123;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">margin-left</span>: <span class=\"number\">0.3rem</span>;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-link</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.km-downapp-link</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">text-decoration</span>:none;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-text</span>&gt;<span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.2rem</span>;<span class=\"attribute\">font-weight</span>:normal;<span class=\"attribute\">color</span>:<span class=\"number\">#f5cbcc</span>;<span class=\"attribute\">line-height</span>: <span class=\"number\">0.28rem</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-text</span> <span class=\"selector-class\">.font-large</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.32rem</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">line-height</span>: <span class=\"number\">0.4rem</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-button</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">width</span>: <span class=\"number\">1.7rem</span>;<span class=\"attribute\">height</span>: <span class=\"number\">0.6rem</span>;<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">0.3rem</span>;<span class=\"attribute\">border-radius</span>:<span class=\"number\">0.3rem</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">0.6rem</span>;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">color</span>:<span class=\"number\">#ea4d58</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(255,255,255,.35);      <span class=\"attribute\">-webkit-touch-callout</span>: none;<span class=\"attribute\">margin-left</span>:<span class=\"number\">0.36rem</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-close</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">width</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">height</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(<span class=\"string\">'./km-downapp-close.png'</span>) no-repeat;<span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;<span class=\"attribute\">margin-left</span>: <span class=\"number\">0.2rem</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>9、跳回<code>/build-test</code>目录，执行 <code>webpack</code> 命令，生成 <code>downApp.min.js</code> 文件，测试结果，大功告成！（可以开启压缩JS插件减少文件大小）</p>\n<p>打包结果</p>\n<img src=\"/2018/04/20/传统网站如何巧使webpack解决问题/2.jpg\" title=\"打包结果\">\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实文章内容很简单，用的还是基本的webpack打包功能，关键是看你怎么用。如果是单页应用，打包成一个js会遇到白屏问题，为了避免这个还会把css文件单独分离出来。但对于传统项目年久失修的复杂结构来说的话，不失为一个好的解决方法。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>哈哈，感觉标题有点大了，有标题党的嫌疑，但实在想不出什么合适的名字。</p>\n<p>昨天产品提出一个需求，就是修改现有移动端网站下载APP的提示样式。是的，这是个简单的需求，没什么值得好提的。但就是有个问题，由于现在网站还是以后端为主导，没做分离，很多层次结构比较混乱。而且一改是改三个网站，涉及到三个网站要更新<code>html，css，js，img</code>，额……感觉有点头大。</p>\n<p>类似这样的需求：</p>\n<img src=\"/2018/04/20/传统网站如何巧使webpack解决问题/1.jpg\" title=\"资讯界面加下载提示\">\n<p>本来想硬着头皮做完一遍复制，替换就好。后来想到是不是可以用<code>webpack</code>将<code>html，css，js，img</code>打包成一个js文件呢，于是开始了尝试。</p>\n<h1 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h1><p>目录结构：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">- build-test</span><br><span class=\"line\">    - example                       <span class=\"comment\"># 代码开发目录</span></span><br><span class=\"line\">        downApp.js                  <span class=\"comment\"># 逻辑代码</span></span><br><span class=\"line\">        downApp.min.js            <span class=\"comment\"># 打包代码</span></span><br><span class=\"line\">        index.css                 <span class=\"comment\"># 引用样式</span></span><br><span class=\"line\">        index.html                <span class=\"comment\"># html结构</span></span><br><span class=\"line\">        js.cookie.js              <span class=\"comment\"># 引用cookie</span></span><br><span class=\"line\">        km-downapp-close.png      <span class=\"comment\"># 关闭按钮图片</span></span><br><span class=\"line\">        km-downapp-logo.png       <span class=\"comment\"># logo图片</span></span><br><span class=\"line\">    + node_modules       <span class=\"comment\">#所使用的nodejs模块</span></span><br><span class=\"line\">    package.json         <span class=\"comment\">#项目配置</span></span><br><span class=\"line\">    package-lock.json</span><br><span class=\"line\">    webpack.config.js    <span class=\"comment\">#webpack配置</span></span><br><span class=\"line\">    README.md            <span class=\"comment\">#项目说明</span></span><br></pre></td></tr></table></figure></p>\n<p>1、新建目录 <code>mkdir build-test</code>，进入目录 <code>cd build-test</code>。</p>\n<p>2、执行 <code>npm init --yes</code> 快速初始化项目。</p>\n<p>3、安装webpack<code>npm install --save-dev webpack</code>，各种loader <code>npm install --save-dev css-loader style-loader url-loader</code>，js压缩插件 <code>npm install --save-dev uglifyjs-webpack-plugin</code>。</p>\n<p>4、新建webpack配置</p>\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index : <span class=\"string\">'./example/downApp.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                  &#123; <span class=\"attr\">loader</span>: <span class=\"string\">\"style-loader\"</span> &#125;,</span><br><span class=\"line\">                  &#123; <span class=\"attr\">loader</span>: <span class=\"string\">\"css-loader\"</span> &#125;,</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 将css中引用url路径的图片转成base64（字节数小于10000的图片）</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  limit: <span class=\"number\">10000</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 压缩js</span></span><br><span class=\"line\">        <span class=\"comment\">// new UglifyJsPlugin()</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'./example/downApp.min.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、新建目录 <code>mkdir example</code>，进入目录 <code>cd example</code></p>\n<p>6、新建页面<code>index.html</code>，配置一些基本结构。</p>\n<p><code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>demo页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.documentElement.style.fontSize = <span class=\"built_in\">document</span>.documentElement.clientWidth / <span class=\"number\">7.50</span> + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"screen\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"km-header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://m.kmzyw.com.cn/resources/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"downApp.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7、主要逻辑 <code>downApp.js</code></p>\n<p><code>downApp.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Cookies <span class=\"keyword\">from</span> <span class=\"string\">'./js.cookie.js'</span>;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRequest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> u = location.search;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (u.indexOf(<span class=\"string\">\"?\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> str = u.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">          strs = str.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">               p[strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">0</span>]] = <span class=\"built_in\">decodeURI</span>(strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reqObj = getRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否APP访问</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reqObj.from != <span class=\"string\">'app'</span> &amp;&amp; !reqObj.from)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> downValues = Cookies(<span class=\"string\">\"__closeapp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> downDom = <span class=\"string\">'&lt;div class=\"km-downapp-wrap\"&gt;&lt;a href=\"http://m.kmzyw.com.cn/resources/html/app-download.html\"class=\"km-downapp-link\"&gt;&lt;div class=\"km-downapp-logo\"&gt;&lt;/div&gt;&lt;div class=\"km-downapp-text\"&gt;&lt;p class=\"font-large\"&gt;康美中药城APP新版上线&lt;/p&gt;&lt;p&gt;随时随地，药材服务不离线&lt;/p&gt;&lt;/div&gt;&lt;div class=\"km-downapp-button\"&gt;立即下载&lt;/div&gt;&lt;/a&gt;&lt;a href=\"javascript:void(0);\"class=\"km-downapp-close\"&gt;&lt;/a&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (downValues != <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#km-header\"</span>).before(downDom);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>, <span class=\"string\">\".km-downapp-close\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\".km-downapp-wrap\"</span>).remove();</span><br><span class=\"line\">        Cookies(<span class=\"string\">'__closeapp'</span>, <span class=\"string\">'1'</span>,&#123; <span class=\"attr\">expires</span>: <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>8、样式表 <code>index.css</code></p>\n<p><code>index.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.km-downapp-wrap</span>&#123;<span class=\"attribute\">position</span>:relative;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"attribute\">height</span>:<span class=\"number\">1rem</span>;<span class=\"attribute\">background</span>:<span class=\"number\">#e7666e</span>;<span class=\"attribute\">z-index</span>:<span class=\"number\">9999</span>;<span class=\"attribute\">-webkit-box-sizing</span>:border-box;<span class=\"attribute\">box-sizing</span>:border-box;<span class=\"attribute\">overflow</span>:hidden;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;<span class=\"attribute\">font-family</span>: -apple-system, BlinkMacSystemFont, <span class=\"string\">\"PingFang SC\"</span>,<span class=\"string\">\"Helvetica Neue\"</span>,STHeiti,<span class=\"string\">\"Microsoft Yahei\"</span>,Tahoma,Simsun,sans-serif;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-logo</span>&#123;<span class=\"attribute\">margin-right</span>: <span class=\"number\">0.24rem</span>;<span class=\"attribute\">width</span>:<span class=\"number\">0.7rem</span>;<span class=\"attribute\">height</span>:<span class=\"number\">0.7rem</span>;<span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(<span class=\"string\">'./km-downapp-logo.png'</span>) no-repeat;<span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-link</span>&#123;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">margin-left</span>: <span class=\"number\">0.3rem</span>;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-link</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.km-downapp-link</span><span class=\"selector-pseudo\">:active</span>&#123;<span class=\"attribute\">text-decoration</span>:none;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-text</span>&gt;<span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.2rem</span>;<span class=\"attribute\">font-weight</span>:normal;<span class=\"attribute\">color</span>:<span class=\"number\">#f5cbcc</span>;<span class=\"attribute\">line-height</span>: <span class=\"number\">0.28rem</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-text</span> <span class=\"selector-class\">.font-large</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.32rem</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">line-height</span>: <span class=\"number\">0.4rem</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-button</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">width</span>: <span class=\"number\">1.7rem</span>;<span class=\"attribute\">height</span>: <span class=\"number\">0.6rem</span>;<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">0.3rem</span>;<span class=\"attribute\">border-radius</span>:<span class=\"number\">0.3rem</span>;<span class=\"attribute\">font-size</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">line-height</span>:<span class=\"number\">0.6rem</span>;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">color</span>:<span class=\"number\">#ea4d58</span>;<span class=\"attribute\">text-align</span>:center;<span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(255,255,255,.35);      <span class=\"attribute\">-webkit-touch-callout</span>: none;<span class=\"attribute\">margin-left</span>:<span class=\"number\">0.36rem</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.km-downapp-close</span>&#123;<span class=\"attribute\">display</span>:block;<span class=\"attribute\">width</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">height</span>:<span class=\"number\">0.28rem</span>;<span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(<span class=\"string\">'./km-downapp-close.png'</span>) no-repeat;<span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;<span class=\"attribute\">margin-left</span>: <span class=\"number\">0.2rem</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>9、跳回<code>/build-test</code>目录，执行 <code>webpack</code> 命令，生成 <code>downApp.min.js</code> 文件，测试结果，大功告成！（可以开启压缩JS插件减少文件大小）</p>\n<p>打包结果</p>\n<img src=\"/2018/04/20/传统网站如何巧使webpack解决问题/2.jpg\" title=\"打包结果\">\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实文章内容很简单，用的还是基本的webpack打包功能，关键是看你怎么用。如果是单页应用，打包成一个js会遇到白屏问题，为了避免这个还会把css文件单独分离出来。但对于传统项目年久失修的复杂结构来说的话，不失为一个好的解决方法。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"PHP类包含的七种语法说明","date":"2016-02-13T15:26:39.000Z","_content":"一个完整的PHP类包含的七种语法说明,这些语法包括属性、静态属性、方法、静态方法、类常量、构造函数、析构函数。\n\n## 类中的七种语法说明\n\n1. 属性\n2. 静态属性\n3. 方法\n4. 静态方法\n5. 类常量\n6. 构造函数\n7. 析构函数\n\n``` bash\n    <?php\n      class Student {\n        // 类里的属性、方法和函数的访问权限有 （函数和方法是同一个概念）\n        // private 私有的 protected 受保护的 public 公有的\n        // 类常量 没有访问权限修饰符\n        const STUDENT = 'Tom';\n        // 属性\n        public $stu_name;\n        // 静态属性\n        public static $stu_num = 1;\n        // 方法\n        public function stuFunction() {\n          echo 'non_static_function','<br />';\n        }\n        // 静态方法\n        public static function static_stuFunction() {\n          echo 'static_function','<br />';\n        }\n        // 构造函数 创建对象时自动调用\n        public function __construct($stu_name) {\n          $this->stu_name = $stu_name;\n          echo '__construct','<br />';\n\n        }\n        // 析构函数 销毁对象时自动调用\n        public function __destruct() {\n          echo '__destruct','<br />';\n        }\n      }\n\n      // 实例化类对象\n      $object = new Student('Tom');\n      // 对象调用属性\n      echo $object->stu_name,'<br />';\n      // 对象调用静态属性\n      echo $object::$stu_num,'<br />';\n      // 类调用静态属性\n      echo Student::$stu_num,'<br />';\n      // 使用对象分别调用方法和静态方法\n      $object->stuFunction();\n      $object->static_stuFunction();\n      $object::stuFunction();\n      $object::static_stuFunction();\n      // 使用类分别调用方法和静态方法\n      Student::stuFunction();\n      Student::static_stuFunction();\n      // 类调用类常量\n      echo Student::STUDENT,'<br />';\n```\n\n总结：\n对象可以调用属性和静态属性，类只能调用静态属性。\n对象可以调用方法和静态方法，类可以调用方法和静态方法。\n","source":"_posts/PHP类包含的七种语法说明.md","raw":"---\ntitle: PHP类包含的七种语法说明\ndate: 2016-2-13 23:26:39\ncategories: php\ntags: php\n---\n一个完整的PHP类包含的七种语法说明,这些语法包括属性、静态属性、方法、静态方法、类常量、构造函数、析构函数。\n\n## 类中的七种语法说明\n\n1. 属性\n2. 静态属性\n3. 方法\n4. 静态方法\n5. 类常量\n6. 构造函数\n7. 析构函数\n\n``` bash\n    <?php\n      class Student {\n        // 类里的属性、方法和函数的访问权限有 （函数和方法是同一个概念）\n        // private 私有的 protected 受保护的 public 公有的\n        // 类常量 没有访问权限修饰符\n        const STUDENT = 'Tom';\n        // 属性\n        public $stu_name;\n        // 静态属性\n        public static $stu_num = 1;\n        // 方法\n        public function stuFunction() {\n          echo 'non_static_function','<br />';\n        }\n        // 静态方法\n        public static function static_stuFunction() {\n          echo 'static_function','<br />';\n        }\n        // 构造函数 创建对象时自动调用\n        public function __construct($stu_name) {\n          $this->stu_name = $stu_name;\n          echo '__construct','<br />';\n\n        }\n        // 析构函数 销毁对象时自动调用\n        public function __destruct() {\n          echo '__destruct','<br />';\n        }\n      }\n\n      // 实例化类对象\n      $object = new Student('Tom');\n      // 对象调用属性\n      echo $object->stu_name,'<br />';\n      // 对象调用静态属性\n      echo $object::$stu_num,'<br />';\n      // 类调用静态属性\n      echo Student::$stu_num,'<br />';\n      // 使用对象分别调用方法和静态方法\n      $object->stuFunction();\n      $object->static_stuFunction();\n      $object::stuFunction();\n      $object::static_stuFunction();\n      // 使用类分别调用方法和静态方法\n      Student::stuFunction();\n      Student::static_stuFunction();\n      // 类调用类常量\n      echo Student::STUDENT,'<br />';\n```\n\n总结：\n对象可以调用属性和静态属性，类只能调用静态属性。\n对象可以调用方法和静态方法，类可以调用方法和静态方法。\n","slug":"PHP类包含的七种语法说明","published":1,"updated":"2017-07-14T18:13:20.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g7r000nfc925yj666fs","content":"<p>一个完整的PHP类包含的七种语法说明,这些语法包括属性、静态属性、方法、静态方法、类常量、构造函数、析构函数。</p>\n<h2 id=\"类中的七种语法说明\"><a href=\"#类中的七种语法说明\" class=\"headerlink\" title=\"类中的七种语法说明\"></a>类中的七种语法说明</h2><ol>\n<li>属性</li>\n<li>静态属性</li>\n<li>方法</li>\n<li>静态方法</li>\n<li>类常量</li>\n<li>构造函数</li>\n<li>析构函数</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  class Student &#123;</span><br><span class=\"line\">    // 类里的属性、方法和函数的访问权限有 （函数和方法是同一个概念）</span><br><span class=\"line\">    // private 私有的 protected 受保护的 public 公有的</span><br><span class=\"line\">    // 类常量 没有访问权限修饰符</span><br><span class=\"line\">    const STUDENT = <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">    // 属性</span><br><span class=\"line\">    public <span class=\"variable\">$stu_name</span>;</span><br><span class=\"line\">    // 静态属性</span><br><span class=\"line\">    public static <span class=\"variable\">$stu_num</span> = 1;</span><br><span class=\"line\">    // 方法</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">stuFunction</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'non_static_function'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 静态方法</span><br><span class=\"line\">    public static <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">static_stuFunction</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'static_function'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 构造函数 创建对象时自动调用</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> __construct(<span class=\"variable\">$stu_name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$this</span>-&gt;stu_name = <span class=\"variable\">$stu_name</span>;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'__construct'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 析构函数 销毁对象时自动调用</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">__destruct</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'__destruct'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 实例化类对象</span><br><span class=\"line\">  <span class=\"variable\">$object</span> = new Student(<span class=\"string\">'Tom'</span>);</span><br><span class=\"line\">  // 对象调用属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$object</span>-&gt;stu_name,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 对象调用静态属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$object</span>::<span class=\"variable\">$stu_num</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 类调用静态属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> Student::<span class=\"variable\">$stu_num</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 使用对象分别调用方法和静态方法</span><br><span class=\"line\">  <span class=\"variable\">$object</span>-&gt;stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>-&gt;static_stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>::stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>::static_stuFunction();</span><br><span class=\"line\">  // 使用类分别调用方法和静态方法</span><br><span class=\"line\">  Student::stuFunction();</span><br><span class=\"line\">  Student::static_stuFunction();</span><br><span class=\"line\">  // 类调用类常量</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> Student::STUDENT,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>对象可以调用属性和静态属性，类只能调用静态属性。<br>对象可以调用方法和静态方法，类可以调用方法和静态方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个完整的PHP类包含的七种语法说明,这些语法包括属性、静态属性、方法、静态方法、类常量、构造函数、析构函数。</p>\n<h2 id=\"类中的七种语法说明\"><a href=\"#类中的七种语法说明\" class=\"headerlink\" title=\"类中的七种语法说明\"></a>类中的七种语法说明</h2><ol>\n<li>属性</li>\n<li>静态属性</li>\n<li>方法</li>\n<li>静态方法</li>\n<li>类常量</li>\n<li>构造函数</li>\n<li>析构函数</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  class Student &#123;</span><br><span class=\"line\">    // 类里的属性、方法和函数的访问权限有 （函数和方法是同一个概念）</span><br><span class=\"line\">    // private 私有的 protected 受保护的 public 公有的</span><br><span class=\"line\">    // 类常量 没有访问权限修饰符</span><br><span class=\"line\">    const STUDENT = <span class=\"string\">'Tom'</span>;</span><br><span class=\"line\">    // 属性</span><br><span class=\"line\">    public <span class=\"variable\">$stu_name</span>;</span><br><span class=\"line\">    // 静态属性</span><br><span class=\"line\">    public static <span class=\"variable\">$stu_num</span> = 1;</span><br><span class=\"line\">    // 方法</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">stuFunction</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'non_static_function'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 静态方法</span><br><span class=\"line\">    public static <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">static_stuFunction</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'static_function'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 构造函数 创建对象时自动调用</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> __construct(<span class=\"variable\">$stu_name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$this</span>-&gt;stu_name = <span class=\"variable\">$stu_name</span>;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'__construct'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 析构函数 销毁对象时自动调用</span><br><span class=\"line\">    public <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">__destruct</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">'__destruct'</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 实例化类对象</span><br><span class=\"line\">  <span class=\"variable\">$object</span> = new Student(<span class=\"string\">'Tom'</span>);</span><br><span class=\"line\">  // 对象调用属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$object</span>-&gt;stu_name,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 对象调用静态属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$object</span>::<span class=\"variable\">$stu_num</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 类调用静态属性</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> Student::<span class=\"variable\">$stu_num</span>,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br><span class=\"line\">  // 使用对象分别调用方法和静态方法</span><br><span class=\"line\">  <span class=\"variable\">$object</span>-&gt;stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>-&gt;static_stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>::stuFunction();</span><br><span class=\"line\">  <span class=\"variable\">$object</span>::static_stuFunction();</span><br><span class=\"line\">  // 使用类分别调用方法和静态方法</span><br><span class=\"line\">  Student::stuFunction();</span><br><span class=\"line\">  Student::static_stuFunction();</span><br><span class=\"line\">  // 类调用类常量</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> Student::STUDENT,<span class=\"string\">'&lt;br /&gt;'</span>;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>对象可以调用属性和静态属性，类只能调用静态属性。<br>对象可以调用方法和静态方法，类可以调用方法和静态方法。</p>\n"},{"title":"React Native开发《狗狗说》App学习总结","date":"2017-12-08T07:34:05.000Z","_content":"\n# github地址\n\n[react-native-dogapp](https://github.com/ChenXiaoMian/react-native-dogapp)\n\n# 搭建React脚手架\n\n- [x] 可以解析JSX语法\n- [x] 配置babel编译ES6语法\n- [x] 实现代码的热替换，浏览器实时刷新查看效果\n- [x] 支持SCSS预处理器\n- [x] 编译完成自动打开浏览器\n- [x] 支持图片、图标字体等资源的编译\n- [x] 区分开发环境和生产环境\n\n# 运行项目\n\n```bash\n# 克隆项目\ngit clone https://github.com/ChenXiaoMian/react-o2o-app.git\n# 进入目录\ncd react-o2o-app\n# 安装依赖\nnpm install\n# 运行开发环境 访问 http://localhost:8080/\nnpm run dev\n# 运行开发环境 Mock后台数据接口 访问 http://localhost:3000\nnpm run server\n# 打包发布\nnpm run dist\n```\n\n# 学习参考教程\n\n> * [React 模仿大众点评 webapp 手记](http://www.imooc.com/article/16082)\n> * [webpack](https://doc.webpack-china.org/guides/getting-started/)搭建开发环境及生产环境。\n> * [sass](https://www.sass.hk/guide/)css预处理\n> * [react](https://reactjs.org/docs/state-and-lifecycle.html)运用组件化开发思想、虚拟DOM，\n> * [react-route](https://reacttraining.com/react-router/web/example/basic)配套路由\n> * [redux](http://www.redux.org.cn/)数据状态管理，[阮一峰Redux 入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n> * [react-redux](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html)React-Redux 的用法\n> * [react-swipe](https://github.com/voronianski/react-swipe)轮播图插件\n> * [初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/)\n> * [react-router 4.0 下服务器如何配合BrowserRouter](http://www.cnblogs.com/YZH-chengdu/p/6855237.html)\n\n# 完成功能\n\n- [x] 开发首页\n- [x] 开发城市页面\n- [x] 开发搜索结果页\n- [x] 开发商户详情页\n- [x] 开发登录页\n- [x] 收藏功能\n- [x] 开发用户中心页\n- [x] 评价功能\n\n# 要点小记\n\n组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。\n\n## 基本概念\n\n* `react-router` React Router 核心\n* `react-router-dom` 用于 DOM 绑定的 React Router\n* `react-router-native` 用于 React Native 的 React Router\n* `react-router-redux` React Router 和 Redux 的集成\n\n## 路由配置\n\n```javascript\n<HashRouter>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/city\" component={City}/>\n        <Route path=\"/search/:category/:keyword?\" component={Search}/>\n        <Route path=\"/detail/:id\" component={Detail}/>\n        <Route path=\"/login/:router?\" component={Login}/>\n        <Route path=\"/user\" component={User}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </div>\n</HashRouter>\n```\n### 1、`<BrowserRouter>`和`<HashRouter>`\n\n在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的`<Router>`组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：\n\n* `<BrowserRouter>`一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。\n* `<HashRouter>`不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。\n* `<MemoryRouter>`组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。\n* `<StaticRouter>`组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。\n\n`<BrowserRouter>`和`<HashRouter>`都可以实现前端路由的功能，区别是前者基于url的`pathname`段，后者基于`hash`段。\n\n前者：`http://127.0.0.1:3000/article/num1`\n\n后者：`http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）`\n\n这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，`<BrowserRouter>`会将当前路由发送到服务器（因为是pathname），而`<HashRouter>`不会（因为是hash段）。\n\n在react-router 4.0 的文档中有这样一段话：\n\n> 注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 `<BrowserHistory>` 代替。\n\n### 2、react-router 还是 react-router-dom？\n\n在 React 的使用中，我们一般要引入两个包，`react` 和 `react-dom`，那么 `react-router` 和 `react-router-dom` 是不是两个都要引用呢？\n非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 `<Link>` `<BrowserRouter>` 这样的 DOM 类组件。\n因此我们只需引用 `react-router-dom` 这个包就行了。当然，如果搭配 `redux` ，你还需要使用 `react-router-redux`。\n\n### 3、path可选url-params\n\n```javascript\n<Route path=\"/search/:category/:keyword?\" component={Search}/>\n```\n\n在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候`/:keyword?`是可选的参数，只需要在末尾加个`?`号。\n\n\n### 4、history.push\n\n学习教程的时候，history是通过`import { history } from 'react-router'`引入的。4.0以上没找到这个对象，最后发现在页面组件的`this.props.history`找到了。参照[初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/) 一文得到的。\n\n\n## 列表加载更多\n\n首先需要准备3个状态\n\n```javascript\nthis.state = {\n    data : [],  //存储数据\n    hasMore : false,  //记录是否还有更多数据\n    isLoadingMore : false,  //是否正在加载\n    page : 1  //记录下一页的页码\n}\n```\n\n然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：\n\n```javascript\nloadFirstPageData() {\n    // 加载首页数据，result\n    // 处理数据\n    this.resultHandle(result)\n}\nloadMoreData() {\n    // 加载下一页的数据，result\n    // 处理\n    this.resultHandle(result)\n}\nresultHandle() {\n    // 解析数据，更改 state\n}\n```\n\n以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到`LoadMore`组件中呢？通过以下代码来体会一下。\n\n```javascript\n{\n    this.state.hasMore\n    ? <LoadMore isLoadingMore={this.state.isLoadingMore} loadMoreFn={this.loadMoreData.bind(this)}/>\n    : <div></div>\n}\n```\n\n总结一下以上的准备数据在LoadMore组件中的应用。\n\n* hasMore控制组件的显示和隐藏\n* isLoadingMore控制组件是显示“加载中...”（此时点击失效）还是“点击加载更多”\n* loadMoreData函数会在点击组件时触发，并加载下一页数据\n* page记录下一页的页码，会在loadMoreData函数中使用并累加\n\n创建LoadMore组件，并用上上面传递过来的数据。\n\n```javascript\nrender() {\n    return (\n        <div className=\"load-more\" ref=\"wrapper\">\n        {\n            this.props.isLoadingMore\n            ? <span>加载中...</span>\n            : <span onClick={this.loadMoreHandle.bind(this)}>点击加载更多</span>\n        }\n        </div>\n    )\n}\nloadMoreHandle () {\n    this.props.loadMoreFn()\n}\n```\n\n如何实现上拉加载效果，上面代码中有`ref=\"wrapper\"`，实现思路是：监控 window 的`scroll`方法，然后获取`ref=\"wrapper\"`的DOM，利用`getBoundingClientRect()`方法获得距离顶部的高度，然后看是否触发 `loadMore`方法。\n\n```javascript\ncomponentDidMount () {\n    const loadMoreFn = this.props.loadMoreFn\n    const wrapper = this.refs.wrapper\n    // console.log(wrapper)\n    let timeoutId\n    function callback(){\n        const top = wrapper.getBoundingClientRect().top\n        const windowHeight = window.screen.height\n        if(top && top < windowHeight){\n            // 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多\n            loadMoreFn()\n        }\n    }\n\n    window.addEventListener('scroll',function(){\n        if(this.props.isLoadingMore){\n            return\n        }\n        if(timeoutId){\n            clearTimeout(timeoutId)\n        }\n        timeoutId = setTimeout(callback,100)\n    }.bind(this),false)\n}\n```\n\n## 让`<br/>`换行\n\n有`<br />`的代码在页面中不换行，而是直接显示`<br />`。`dangerouslySetInnerHTML`, 让React正常显示你的html代码 这个`prop`的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。\n\n```javascript\n<div className=\"headlineText\" dangerouslySetInnerHTML={{__html: data.lineText}}></div>\n```\n\n## 搜索结果列表\n\n如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。\n\n```javascript\ncomponentDidUpdate (prevProps,prevState) {\n    const keyword = this.props.keyWord\n    const category = this.props.category\n    // 搜索条件完全相等时，忽略\n    if(keyword === prevProps.keyWord && category === prevProps.category){\n        return\n    }\n\n    // 重置state\n    this.setState(initialState)\n    // 重新加载数据\n    this.loadFirstPageData()\n}\n```\n\n这里需要理解`componentDidMount`和`componentDidUpdate`两个生命周期的不同。\n\n* 页面初次渲染，会走`componentDidMount`\n* 页面再次渲染，就不会走`componentDidMount`，而只走`componentDidUpdate`\n\n## 登录后的跳转\n\n```javascript\n<Route path=\"/login/:router?\" component={Login}/>\n```\n\n在路由配置中，登录组件也增加了一个可选参数`router`即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。\n\n```javascript\n// 读取Redux中是否有用户信息\ndoCheck (){\n    const userinfo = this.props.userinfo\n    if(userinfo.username){\n        // 已经登录\n        this.goUserPage()\n    }else{\n        // 尚未登录\n        this.setState({\n            checking : false\n        })\n    }\n}\n// 登录成功之后的处理\nloginHandle (username) {\n    if(username.trim()==''){\n        alert('手机号不能为空')\n        return\n    }\n    // 保存用户名\n    const actions = this.props.userInfoActions   //存储用户id到Redux\n    let userinfo = this.props.userinfo\n    userinfo.username = username\n    actions.login(userinfo)\n    // 跳转链接\n    const params = this.props.match.params\n    const history = this.props.history\n    if(params.router){\n        // 跳转到指定的页面\n        history.push('/'+decodeURIComponent(params.router))\n    }else{\n        // 跳转到默认页面-用户中心\n        this.goUserPage()\n    }\n}\n```\n\n在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)\n\n```javascript\n// 验证登录\nloginCheck () {\n    const id = this.props.id\n    const userinfo = this.props.userinfo\n    const history = this.props.history\n    if(!userinfo.username){\n        history.push('/login/'+encodeURIComponent('detail/'+id))\n        return false\n    }\n    return true\n}\n```\n\n# 最后\n\n这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章[React-Redux](https://github.com/bailicangdu/react-pxq)。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/React Native开发《狗狗说》App学习总结.md","raw":"---\ntitle: React Native开发《狗狗说》App学习总结\ndate: 2017-12-08 15:34:05\ncategories: react native\ntags: [react,react native,app,android]\n---\n\n# github地址\n\n[react-native-dogapp](https://github.com/ChenXiaoMian/react-native-dogapp)\n\n# 搭建React脚手架\n\n- [x] 可以解析JSX语法\n- [x] 配置babel编译ES6语法\n- [x] 实现代码的热替换，浏览器实时刷新查看效果\n- [x] 支持SCSS预处理器\n- [x] 编译完成自动打开浏览器\n- [x] 支持图片、图标字体等资源的编译\n- [x] 区分开发环境和生产环境\n\n# 运行项目\n\n```bash\n# 克隆项目\ngit clone https://github.com/ChenXiaoMian/react-o2o-app.git\n# 进入目录\ncd react-o2o-app\n# 安装依赖\nnpm install\n# 运行开发环境 访问 http://localhost:8080/\nnpm run dev\n# 运行开发环境 Mock后台数据接口 访问 http://localhost:3000\nnpm run server\n# 打包发布\nnpm run dist\n```\n\n# 学习参考教程\n\n> * [React 模仿大众点评 webapp 手记](http://www.imooc.com/article/16082)\n> * [webpack](https://doc.webpack-china.org/guides/getting-started/)搭建开发环境及生产环境。\n> * [sass](https://www.sass.hk/guide/)css预处理\n> * [react](https://reactjs.org/docs/state-and-lifecycle.html)运用组件化开发思想、虚拟DOM，\n> * [react-route](https://reacttraining.com/react-router/web/example/basic)配套路由\n> * [redux](http://www.redux.org.cn/)数据状态管理，[阮一峰Redux 入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n> * [react-redux](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html)React-Redux 的用法\n> * [react-swipe](https://github.com/voronianski/react-swipe)轮播图插件\n> * [初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/)\n> * [react-router 4.0 下服务器如何配合BrowserRouter](http://www.cnblogs.com/YZH-chengdu/p/6855237.html)\n\n# 完成功能\n\n- [x] 开发首页\n- [x] 开发城市页面\n- [x] 开发搜索结果页\n- [x] 开发商户详情页\n- [x] 开发登录页\n- [x] 收藏功能\n- [x] 开发用户中心页\n- [x] 评价功能\n\n# 要点小记\n\n组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。\n\n## 基本概念\n\n* `react-router` React Router 核心\n* `react-router-dom` 用于 DOM 绑定的 React Router\n* `react-router-native` 用于 React Native 的 React Router\n* `react-router-redux` React Router 和 Redux 的集成\n\n## 路由配置\n\n```javascript\n<HashRouter>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/city\" component={City}/>\n        <Route path=\"/search/:category/:keyword?\" component={Search}/>\n        <Route path=\"/detail/:id\" component={Detail}/>\n        <Route path=\"/login/:router?\" component={Login}/>\n        <Route path=\"/user\" component={User}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </div>\n</HashRouter>\n```\n### 1、`<BrowserRouter>`和`<HashRouter>`\n\n在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的`<Router>`组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：\n\n* `<BrowserRouter>`一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。\n* `<HashRouter>`不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。\n* `<MemoryRouter>`组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。\n* `<StaticRouter>`组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。\n\n`<BrowserRouter>`和`<HashRouter>`都可以实现前端路由的功能，区别是前者基于url的`pathname`段，后者基于`hash`段。\n\n前者：`http://127.0.0.1:3000/article/num1`\n\n后者：`http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）`\n\n这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，`<BrowserRouter>`会将当前路由发送到服务器（因为是pathname），而`<HashRouter>`不会（因为是hash段）。\n\n在react-router 4.0 的文档中有这样一段话：\n\n> 注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 `<BrowserHistory>` 代替。\n\n### 2、react-router 还是 react-router-dom？\n\n在 React 的使用中，我们一般要引入两个包，`react` 和 `react-dom`，那么 `react-router` 和 `react-router-dom` 是不是两个都要引用呢？\n非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 `<Link>` `<BrowserRouter>` 这样的 DOM 类组件。\n因此我们只需引用 `react-router-dom` 这个包就行了。当然，如果搭配 `redux` ，你还需要使用 `react-router-redux`。\n\n### 3、path可选url-params\n\n```javascript\n<Route path=\"/search/:category/:keyword?\" component={Search}/>\n```\n\n在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候`/:keyword?`是可选的参数，只需要在末尾加个`?`号。\n\n\n### 4、history.push\n\n学习教程的时候，history是通过`import { history } from 'react-router'`引入的。4.0以上没找到这个对象，最后发现在页面组件的`this.props.history`找到了。参照[初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/) 一文得到的。\n\n\n## 列表加载更多\n\n首先需要准备3个状态\n\n```javascript\nthis.state = {\n    data : [],  //存储数据\n    hasMore : false,  //记录是否还有更多数据\n    isLoadingMore : false,  //是否正在加载\n    page : 1  //记录下一页的页码\n}\n```\n\n然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：\n\n```javascript\nloadFirstPageData() {\n    // 加载首页数据，result\n    // 处理数据\n    this.resultHandle(result)\n}\nloadMoreData() {\n    // 加载下一页的数据，result\n    // 处理\n    this.resultHandle(result)\n}\nresultHandle() {\n    // 解析数据，更改 state\n}\n```\n\n以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到`LoadMore`组件中呢？通过以下代码来体会一下。\n\n```javascript\n{\n    this.state.hasMore\n    ? <LoadMore isLoadingMore={this.state.isLoadingMore} loadMoreFn={this.loadMoreData.bind(this)}/>\n    : <div></div>\n}\n```\n\n总结一下以上的准备数据在LoadMore组件中的应用。\n\n* hasMore控制组件的显示和隐藏\n* isLoadingMore控制组件是显示“加载中...”（此时点击失效）还是“点击加载更多”\n* loadMoreData函数会在点击组件时触发，并加载下一页数据\n* page记录下一页的页码，会在loadMoreData函数中使用并累加\n\n创建LoadMore组件，并用上上面传递过来的数据。\n\n```javascript\nrender() {\n    return (\n        <div className=\"load-more\" ref=\"wrapper\">\n        {\n            this.props.isLoadingMore\n            ? <span>加载中...</span>\n            : <span onClick={this.loadMoreHandle.bind(this)}>点击加载更多</span>\n        }\n        </div>\n    )\n}\nloadMoreHandle () {\n    this.props.loadMoreFn()\n}\n```\n\n如何实现上拉加载效果，上面代码中有`ref=\"wrapper\"`，实现思路是：监控 window 的`scroll`方法，然后获取`ref=\"wrapper\"`的DOM，利用`getBoundingClientRect()`方法获得距离顶部的高度，然后看是否触发 `loadMore`方法。\n\n```javascript\ncomponentDidMount () {\n    const loadMoreFn = this.props.loadMoreFn\n    const wrapper = this.refs.wrapper\n    // console.log(wrapper)\n    let timeoutId\n    function callback(){\n        const top = wrapper.getBoundingClientRect().top\n        const windowHeight = window.screen.height\n        if(top && top < windowHeight){\n            // 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多\n            loadMoreFn()\n        }\n    }\n\n    window.addEventListener('scroll',function(){\n        if(this.props.isLoadingMore){\n            return\n        }\n        if(timeoutId){\n            clearTimeout(timeoutId)\n        }\n        timeoutId = setTimeout(callback,100)\n    }.bind(this),false)\n}\n```\n\n## 让`<br/>`换行\n\n有`<br />`的代码在页面中不换行，而是直接显示`<br />`。`dangerouslySetInnerHTML`, 让React正常显示你的html代码 这个`prop`的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。\n\n```javascript\n<div className=\"headlineText\" dangerouslySetInnerHTML={{__html: data.lineText}}></div>\n```\n\n## 搜索结果列表\n\n如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。\n\n```javascript\ncomponentDidUpdate (prevProps,prevState) {\n    const keyword = this.props.keyWord\n    const category = this.props.category\n    // 搜索条件完全相等时，忽略\n    if(keyword === prevProps.keyWord && category === prevProps.category){\n        return\n    }\n\n    // 重置state\n    this.setState(initialState)\n    // 重新加载数据\n    this.loadFirstPageData()\n}\n```\n\n这里需要理解`componentDidMount`和`componentDidUpdate`两个生命周期的不同。\n\n* 页面初次渲染，会走`componentDidMount`\n* 页面再次渲染，就不会走`componentDidMount`，而只走`componentDidUpdate`\n\n## 登录后的跳转\n\n```javascript\n<Route path=\"/login/:router?\" component={Login}/>\n```\n\n在路由配置中，登录组件也增加了一个可选参数`router`即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。\n\n```javascript\n// 读取Redux中是否有用户信息\ndoCheck (){\n    const userinfo = this.props.userinfo\n    if(userinfo.username){\n        // 已经登录\n        this.goUserPage()\n    }else{\n        // 尚未登录\n        this.setState({\n            checking : false\n        })\n    }\n}\n// 登录成功之后的处理\nloginHandle (username) {\n    if(username.trim()==''){\n        alert('手机号不能为空')\n        return\n    }\n    // 保存用户名\n    const actions = this.props.userInfoActions   //存储用户id到Redux\n    let userinfo = this.props.userinfo\n    userinfo.username = username\n    actions.login(userinfo)\n    // 跳转链接\n    const params = this.props.match.params\n    const history = this.props.history\n    if(params.router){\n        // 跳转到指定的页面\n        history.push('/'+decodeURIComponent(params.router))\n    }else{\n        // 跳转到默认页面-用户中心\n        this.goUserPage()\n    }\n}\n```\n\n在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)\n\n```javascript\n// 验证登录\nloginCheck () {\n    const id = this.props.id\n    const userinfo = this.props.userinfo\n    const history = this.props.history\n    if(!userinfo.username){\n        history.push('/login/'+encodeURIComponent('detail/'+id))\n        return false\n    }\n    return true\n}\n```\n\n# 最后\n\n这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章[React-Redux](https://github.com/bailicangdu/react-pxq)。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"React Native开发《狗狗说》App学习总结","published":1,"updated":"2018-04-09T15:30:33.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g8t0029fc9265voquea","content":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/react-native-dogapp\" target=\"_blank\" rel=\"noopener\">react-native-dogapp</a></p>\n<h1 id=\"搭建React脚手架\"><a href=\"#搭建React脚手架\" class=\"headerlink\" title=\"搭建React脚手架\"></a>搭建React脚手架</h1><ul>\n<li>[x] 可以解析JSX语法</li>\n<li>[x] 配置babel编译ES6语法</li>\n<li>[x] 实现代码的热替换，浏览器实时刷新查看效果</li>\n<li>[x] 支持SCSS预处理器</li>\n<li>[x] 编译完成自动打开浏览器</li>\n<li>[x] 支持图片、图标字体等资源的编译</li>\n<li>[x] 区分开发环境和生产环境</li>\n</ul>\n<h1 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆项目</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ChenXiaoMian/react-o2o-app.git</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> react-o2o-app</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"><span class=\"comment\"># 运行开发环境 访问 http://localhost:8080/</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"><span class=\"comment\"># 运行开发环境 Mock后台数据接口 访问 http://localhost:3000</span></span><br><span class=\"line\">npm run server</span><br><span class=\"line\"><span class=\"comment\"># 打包发布</span></span><br><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure>\n<h1 id=\"学习参考教程\"><a href=\"#学习参考教程\" class=\"headerlink\" title=\"学习参考教程\"></a>学习参考教程</h1><blockquote>\n<ul>\n<li><a href=\"http://www.imooc.com/article/16082\" target=\"_blank\" rel=\"noopener\">React 模仿大众点评 webapp 手记</a></li>\n<li><a href=\"https://doc.webpack-china.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack</a>搭建开发环境及生产环境。</li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a>css预处理</li>\n<li><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener\">react</a>运用组件化开发思想、虚拟DOM，</li>\n<li><a href=\"https://reacttraining.com/react-router/web/example/basic\" target=\"_blank\" rel=\"noopener\">react-route</a>配套路由</li>\n<li><a href=\"http://www.redux.org.cn/\" target=\"_blank\" rel=\"noopener\">redux</a>数据状态管理，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">阮一峰Redux 入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"noopener\">react-redux</a>React-Redux 的用法</li>\n<li><a href=\"https://github.com/voronianski/react-swipe\" target=\"_blank\" rel=\"noopener\">react-swipe</a>轮播图插件</li>\n<li><a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a></li>\n<li><a href=\"http://www.cnblogs.com/YZH-chengdu/p/6855237.html\" target=\"_blank\" rel=\"noopener\">react-router 4.0 下服务器如何配合BrowserRouter</a></li>\n</ul>\n</blockquote>\n<h1 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h1><ul>\n<li>[x] 开发首页</li>\n<li>[x] 开发城市页面</li>\n<li>[x] 开发搜索结果页</li>\n<li>[x] 开发商户详情页</li>\n<li>[x] 开发登录页</li>\n<li>[x] 收藏功能</li>\n<li>[x] 开发用户中心页</li>\n<li>[x] 评价功能</li>\n</ul>\n<h1 id=\"要点小记\"><a href=\"#要点小记\" class=\"headerlink\" title=\"要点小记\"></a>要点小记</h1><p>组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><code>react-router</code> React Router 核心</li>\n<li><code>react-router-dom</code> 用于 DOM 绑定的 React Router</li>\n<li><code>react-router-native</code> 用于 React Native 的 React Router</li>\n<li><code>react-router-redux</code> React Router 和 Redux 的集成</li>\n</ul>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/city\"</span> component=&#123;City&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/detail/:id\"</span> component=&#123;Detail&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/user\"</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route component=&#123;NotFound&#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\"><a href=\"#1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\" class=\"headerlink\" title=\"1、&lt;BrowserRouter&gt;和&lt;HashRouter&gt;\"></a>1、<code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code></h3><p>在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的<code>&lt;Router&gt;</code>组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code>一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。</li>\n<li><code>&lt;HashRouter&gt;</code>不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。</li>\n<li><code>&lt;MemoryRouter&gt;</code>组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。</li>\n<li><code>&lt;StaticRouter&gt;</code>组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。</li>\n</ul>\n<p><code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>都可以实现前端路由的功能，区别是前者基于url的<code>pathname</code>段，后者基于<code>hash</code>段。</p>\n<p>前者：<code>http://127.0.0.1:3000/article/num1</code></p>\n<p>后者：<code>http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）</code></p>\n<p>这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，<code>&lt;BrowserRouter&gt;</code>会将当前路由发送到服务器（因为是pathname），而<code>&lt;HashRouter&gt;</code>不会（因为是hash段）。</p>\n<p>在react-router 4.0 的文档中有这样一段话：</p>\n<blockquote>\n<p>注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 <code>&lt;BrowserHistory&gt;</code> 代替。</p>\n</blockquote>\n<h3 id=\"2、react-router-还是-react-router-dom？\"><a href=\"#2、react-router-还是-react-router-dom？\" class=\"headerlink\" title=\"2、react-router 还是 react-router-dom？\"></a>2、react-router 还是 react-router-dom？</h3><p>在 React 的使用中，我们一般要引入两个包，<code>react</code> 和 <code>react-dom</code>，那么 <code>react-router</code> 和 <code>react-router-dom</code> 是不是两个都要引用呢？<br>非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 <code>&lt;Link&gt;</code> <code>&lt;BrowserRouter&gt;</code> 这样的 DOM 类组件。<br>因此我们只需引用 <code>react-router-dom</code> 这个包就行了。当然，如果搭配 <code>redux</code> ，你还需要使用 <code>react-router-redux</code>。</p>\n<h3 id=\"3、path可选url-params\"><a href=\"#3、path可选url-params\" class=\"headerlink\" title=\"3、path可选url-params\"></a>3、path可选url-params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候<code>/:keyword?</code>是可选的参数，只需要在末尾加个<code>?</code>号。</p>\n<h3 id=\"4、history-push\"><a href=\"#4、history-push\" class=\"headerlink\" title=\"4、history.push\"></a>4、history.push</h3><p>学习教程的时候，history是通过<code>import { history } from &#39;react-router&#39;</code>引入的。4.0以上没找到这个对象，最后发现在页面组件的<code>this.props.history</code>找到了。参照<a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a> 一文得到的。</p>\n<h2 id=\"列表加载更多\"><a href=\"#列表加载更多\" class=\"headerlink\" title=\"列表加载更多\"></a>列表加载更多</h2><p>首先需要准备3个状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    data : [],  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\">    hasMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//记录是否还有更多数据</span></span><br><span class=\"line\">    isLoadingMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//是否正在加载</span></span><br><span class=\"line\">    page : <span class=\"number\">1</span>  <span class=\"comment\">//记录下一页的页码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadFirstPageData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载首页数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadMoreData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载下一页的数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultHandle() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析数据，更改 state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到<code>LoadMore</code>组件中呢？通过以下代码来体会一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.hasMore</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadMore</span> <span class=\"attr\">isLoadingMore</span>=<span class=\"string\">&#123;this.state.isLoadingMore&#125;</span> <span class=\"attr\">loadMoreFn</span>=<span class=\"string\">&#123;this.loadMoreData.bind(this)&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    : <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>总结一下以上的准备数据在LoadMore组件中的应用。</p>\n<ul>\n<li>hasMore控制组件的显示和隐藏</li>\n<li>isLoadingMore控制组件是显示“加载中…”（此时点击失效）还是“点击加载更多”</li>\n<li>loadMoreData函数会在点击组件时触发，并加载下一页数据</li>\n<li>page记录下一页的页码，会在loadMoreData函数中使用并累加</li>\n</ul>\n<p>创建LoadMore组件，并用上上面传递过来的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"load-more\"</span> ref=<span class=\"string\">\"wrapper\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.isLoadingMore</span><br><span class=\"line\">            ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>加载中...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">            : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.loadMoreHandle.bind(this)&#125;</span>&gt;</span>点击加载更多<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">loadMoreHandle () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.props.loadMoreFn()</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如何实现上拉加载效果，上面代码中有<code>ref=&quot;wrapper&quot;</code>，实现思路是：监控 window 的<code>scroll</code>方法，然后获取<code>ref=&quot;wrapper&quot;</code>的DOM，利用<code>getBoundingClientRect()</code>方法获得距离顶部的高度，然后看是否触发 <code>loadMore</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loadMoreFn = <span class=\"keyword\">this</span>.props.loadMoreFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = <span class=\"keyword\">this</span>.refs.wrapper</span><br><span class=\"line\">    <span class=\"comment\">// console.log(wrapper)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeoutId</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> top = wrapper.getBoundingClientRect().top</span><br><span class=\"line\">        <span class=\"keyword\">const</span> windowHeight = <span class=\"built_in\">window</span>.screen.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top &amp;&amp; top &lt; windowHeight)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多</span></span><br><span class=\"line\">            loadMoreFn()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.isLoadingMore)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeoutId)&#123;</span><br><span class=\"line\">            clearTimeout(timeoutId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeoutId = setTimeout(callback,<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"让-lt-br-gt-换行\"><a href=\"#让-lt-br-gt-换行\" class=\"headerlink\" title=\"让&lt;br/&gt;换行\"></a>让<code>&lt;br/&gt;</code>换行</h2><p>有<code>&lt;br /&gt;</code>的代码在页面中不换行，而是直接显示<code>&lt;br /&gt;</code>。<code>dangerouslySetInnerHTML</code>, 让React正常显示你的html代码 这个<code>prop</code>的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">\"headlineText\"</span> dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>: data.lineText&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索结果列表\"><a href=\"#搜索结果列表\" class=\"headerlink\" title=\"搜索结果列表\"></a>搜索结果列表</h2><p>如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidUpdate (prevProps,prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keyword = <span class=\"keyword\">this</span>.props.keyWord</span><br><span class=\"line\">    <span class=\"keyword\">const</span> category = <span class=\"keyword\">this</span>.props.category</span><br><span class=\"line\">    <span class=\"comment\">// 搜索条件完全相等时，忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyword === prevProps.keyWord &amp;&amp; category === prevProps.category)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(initialState)</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFirstPageData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要理解<code>componentDidMount</code>和<code>componentDidUpdate</code>两个生命周期的不同。</p>\n<ul>\n<li>页面初次渲染，会走<code>componentDidMount</code></li>\n<li>页面再次渲染，就不会走<code>componentDidMount</code>，而只走<code>componentDidUpdate</code></li>\n</ul>\n<h2 id=\"登录后的跳转\"><a href=\"#登录后的跳转\" class=\"headerlink\" title=\"登录后的跳转\"></a>登录后的跳转</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在路由配置中，登录组件也增加了一个可选参数<code>router</code>即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取Redux中是否有用户信息</span></span><br><span class=\"line\">doCheck ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo.username)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尚未登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            checking : <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 登录成功之后的处理</span></span><br><span class=\"line\">loginHandle (username) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.trim()==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'手机号不能为空'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> actions = <span class=\"keyword\">this</span>.props.userInfoActions   <span class=\"comment\">//存储用户id到Redux</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    userinfo.username = username</span><br><span class=\"line\">    actions.login(userinfo)</span><br><span class=\"line\">    <span class=\"comment\">// 跳转链接</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"keyword\">this</span>.props.match.params</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.router)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到指定的页面</span></span><br><span class=\"line\">        history.push(<span class=\"string\">'/'</span>+<span class=\"built_in\">decodeURIComponent</span>(params.router))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到默认页面-用户中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证登录</span></span><br><span class=\"line\">loginCheck () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.props.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!userinfo.username)&#123;</span><br><span class=\"line\">        history.push(<span class=\"string\">'/login/'</span>+<span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">'detail/'</span>+id))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章<a href=\"https://github.com/bailicangdu/react-pxq\" target=\"_blank\" rel=\"noopener\">React-Redux</a>。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/react-native-dogapp\" target=\"_blank\" rel=\"noopener\">react-native-dogapp</a></p>\n<h1 id=\"搭建React脚手架\"><a href=\"#搭建React脚手架\" class=\"headerlink\" title=\"搭建React脚手架\"></a>搭建React脚手架</h1><ul>\n<li>[x] 可以解析JSX语法</li>\n<li>[x] 配置babel编译ES6语法</li>\n<li>[x] 实现代码的热替换，浏览器实时刷新查看效果</li>\n<li>[x] 支持SCSS预处理器</li>\n<li>[x] 编译完成自动打开浏览器</li>\n<li>[x] 支持图片、图标字体等资源的编译</li>\n<li>[x] 区分开发环境和生产环境</li>\n</ul>\n<h1 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆项目</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ChenXiaoMian/react-o2o-app.git</span><br><span class=\"line\"><span class=\"comment\"># 进入目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> react-o2o-app</span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"><span class=\"comment\"># 运行开发环境 访问 http://localhost:8080/</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"><span class=\"comment\"># 运行开发环境 Mock后台数据接口 访问 http://localhost:3000</span></span><br><span class=\"line\">npm run server</span><br><span class=\"line\"><span class=\"comment\"># 打包发布</span></span><br><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure>\n<h1 id=\"学习参考教程\"><a href=\"#学习参考教程\" class=\"headerlink\" title=\"学习参考教程\"></a>学习参考教程</h1><blockquote>\n<ul>\n<li><a href=\"http://www.imooc.com/article/16082\" target=\"_blank\" rel=\"noopener\">React 模仿大众点评 webapp 手记</a></li>\n<li><a href=\"https://doc.webpack-china.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack</a>搭建开发环境及生产环境。</li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a>css预处理</li>\n<li><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener\">react</a>运用组件化开发思想、虚拟DOM，</li>\n<li><a href=\"https://reacttraining.com/react-router/web/example/basic\" target=\"_blank\" rel=\"noopener\">react-route</a>配套路由</li>\n<li><a href=\"http://www.redux.org.cn/\" target=\"_blank\" rel=\"noopener\">redux</a>数据状态管理，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">阮一峰Redux 入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"noopener\">react-redux</a>React-Redux 的用法</li>\n<li><a href=\"https://github.com/voronianski/react-swipe\" target=\"_blank\" rel=\"noopener\">react-swipe</a>轮播图插件</li>\n<li><a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a></li>\n<li><a href=\"http://www.cnblogs.com/YZH-chengdu/p/6855237.html\" target=\"_blank\" rel=\"noopener\">react-router 4.0 下服务器如何配合BrowserRouter</a></li>\n</ul>\n</blockquote>\n<h1 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h1><ul>\n<li>[x] 开发首页</li>\n<li>[x] 开发城市页面</li>\n<li>[x] 开发搜索结果页</li>\n<li>[x] 开发商户详情页</li>\n<li>[x] 开发登录页</li>\n<li>[x] 收藏功能</li>\n<li>[x] 开发用户中心页</li>\n<li>[x] 评价功能</li>\n</ul>\n<h1 id=\"要点小记\"><a href=\"#要点小记\" class=\"headerlink\" title=\"要点小记\"></a>要点小记</h1><p>组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><code>react-router</code> React Router 核心</li>\n<li><code>react-router-dom</code> 用于 DOM 绑定的 React Router</li>\n<li><code>react-router-native</code> 用于 React Native 的 React Router</li>\n<li><code>react-router-redux</code> React Router 和 Redux 的集成</li>\n</ul>\n<h2 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/city\"</span> component=&#123;City&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/detail/:id\"</span> component=&#123;Detail&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/user\"</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route component=&#123;NotFound&#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\"><a href=\"#1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\" class=\"headerlink\" title=\"1、&lt;BrowserRouter&gt;和&lt;HashRouter&gt;\"></a>1、<code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code></h3><p>在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的<code>&lt;Router&gt;</code>组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code>一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。</li>\n<li><code>&lt;HashRouter&gt;</code>不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。</li>\n<li><code>&lt;MemoryRouter&gt;</code>组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。</li>\n<li><code>&lt;StaticRouter&gt;</code>组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。</li>\n</ul>\n<p><code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>都可以实现前端路由的功能，区别是前者基于url的<code>pathname</code>段，后者基于<code>hash</code>段。</p>\n<p>前者：<code>http://127.0.0.1:3000/article/num1</code></p>\n<p>后者：<code>http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）</code></p>\n<p>这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，<code>&lt;BrowserRouter&gt;</code>会将当前路由发送到服务器（因为是pathname），而<code>&lt;HashRouter&gt;</code>不会（因为是hash段）。</p>\n<p>在react-router 4.0 的文档中有这样一段话：</p>\n<blockquote>\n<p>注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 <code>&lt;BrowserHistory&gt;</code> 代替。</p>\n</blockquote>\n<h3 id=\"2、react-router-还是-react-router-dom？\"><a href=\"#2、react-router-还是-react-router-dom？\" class=\"headerlink\" title=\"2、react-router 还是 react-router-dom？\"></a>2、react-router 还是 react-router-dom？</h3><p>在 React 的使用中，我们一般要引入两个包，<code>react</code> 和 <code>react-dom</code>，那么 <code>react-router</code> 和 <code>react-router-dom</code> 是不是两个都要引用呢？<br>非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 <code>&lt;Link&gt;</code> <code>&lt;BrowserRouter&gt;</code> 这样的 DOM 类组件。<br>因此我们只需引用 <code>react-router-dom</code> 这个包就行了。当然，如果搭配 <code>redux</code> ，你还需要使用 <code>react-router-redux</code>。</p>\n<h3 id=\"3、path可选url-params\"><a href=\"#3、path可选url-params\" class=\"headerlink\" title=\"3、path可选url-params\"></a>3、path可选url-params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候<code>/:keyword?</code>是可选的参数，只需要在末尾加个<code>?</code>号。</p>\n<h3 id=\"4、history-push\"><a href=\"#4、history-push\" class=\"headerlink\" title=\"4、history.push\"></a>4、history.push</h3><p>学习教程的时候，history是通过<code>import { history } from &#39;react-router&#39;</code>引入的。4.0以上没找到这个对象，最后发现在页面组件的<code>this.props.history</code>找到了。参照<a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a> 一文得到的。</p>\n<h2 id=\"列表加载更多\"><a href=\"#列表加载更多\" class=\"headerlink\" title=\"列表加载更多\"></a>列表加载更多</h2><p>首先需要准备3个状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    data : [],  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\">    hasMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//记录是否还有更多数据</span></span><br><span class=\"line\">    isLoadingMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//是否正在加载</span></span><br><span class=\"line\">    page : <span class=\"number\">1</span>  <span class=\"comment\">//记录下一页的页码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadFirstPageData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载首页数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadMoreData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载下一页的数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultHandle() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析数据，更改 state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到<code>LoadMore</code>组件中呢？通过以下代码来体会一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.hasMore</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadMore</span> <span class=\"attr\">isLoadingMore</span>=<span class=\"string\">&#123;this.state.isLoadingMore&#125;</span> <span class=\"attr\">loadMoreFn</span>=<span class=\"string\">&#123;this.loadMoreData.bind(this)&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    : <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>总结一下以上的准备数据在LoadMore组件中的应用。</p>\n<ul>\n<li>hasMore控制组件的显示和隐藏</li>\n<li>isLoadingMore控制组件是显示“加载中…”（此时点击失效）还是“点击加载更多”</li>\n<li>loadMoreData函数会在点击组件时触发，并加载下一页数据</li>\n<li>page记录下一页的页码，会在loadMoreData函数中使用并累加</li>\n</ul>\n<p>创建LoadMore组件，并用上上面传递过来的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"load-more\"</span> ref=<span class=\"string\">\"wrapper\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.isLoadingMore</span><br><span class=\"line\">            ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>加载中...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">            : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.loadMoreHandle.bind(this)&#125;</span>&gt;</span>点击加载更多<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">loadMoreHandle () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.props.loadMoreFn()</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如何实现上拉加载效果，上面代码中有<code>ref=&quot;wrapper&quot;</code>，实现思路是：监控 window 的<code>scroll</code>方法，然后获取<code>ref=&quot;wrapper&quot;</code>的DOM，利用<code>getBoundingClientRect()</code>方法获得距离顶部的高度，然后看是否触发 <code>loadMore</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loadMoreFn = <span class=\"keyword\">this</span>.props.loadMoreFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = <span class=\"keyword\">this</span>.refs.wrapper</span><br><span class=\"line\">    <span class=\"comment\">// console.log(wrapper)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeoutId</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> top = wrapper.getBoundingClientRect().top</span><br><span class=\"line\">        <span class=\"keyword\">const</span> windowHeight = <span class=\"built_in\">window</span>.screen.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top &amp;&amp; top &lt; windowHeight)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多</span></span><br><span class=\"line\">            loadMoreFn()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.isLoadingMore)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeoutId)&#123;</span><br><span class=\"line\">            clearTimeout(timeoutId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeoutId = setTimeout(callback,<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"让-lt-br-gt-换行\"><a href=\"#让-lt-br-gt-换行\" class=\"headerlink\" title=\"让&lt;br/&gt;换行\"></a>让<code>&lt;br/&gt;</code>换行</h2><p>有<code>&lt;br /&gt;</code>的代码在页面中不换行，而是直接显示<code>&lt;br /&gt;</code>。<code>dangerouslySetInnerHTML</code>, 让React正常显示你的html代码 这个<code>prop</code>的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">\"headlineText\"</span> dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>: data.lineText&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索结果列表\"><a href=\"#搜索结果列表\" class=\"headerlink\" title=\"搜索结果列表\"></a>搜索结果列表</h2><p>如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidUpdate (prevProps,prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keyword = <span class=\"keyword\">this</span>.props.keyWord</span><br><span class=\"line\">    <span class=\"keyword\">const</span> category = <span class=\"keyword\">this</span>.props.category</span><br><span class=\"line\">    <span class=\"comment\">// 搜索条件完全相等时，忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyword === prevProps.keyWord &amp;&amp; category === prevProps.category)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(initialState)</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFirstPageData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要理解<code>componentDidMount</code>和<code>componentDidUpdate</code>两个生命周期的不同。</p>\n<ul>\n<li>页面初次渲染，会走<code>componentDidMount</code></li>\n<li>页面再次渲染，就不会走<code>componentDidMount</code>，而只走<code>componentDidUpdate</code></li>\n</ul>\n<h2 id=\"登录后的跳转\"><a href=\"#登录后的跳转\" class=\"headerlink\" title=\"登录后的跳转\"></a>登录后的跳转</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在路由配置中，登录组件也增加了一个可选参数<code>router</code>即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取Redux中是否有用户信息</span></span><br><span class=\"line\">doCheck ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo.username)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尚未登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            checking : <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 登录成功之后的处理</span></span><br><span class=\"line\">loginHandle (username) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.trim()==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'手机号不能为空'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> actions = <span class=\"keyword\">this</span>.props.userInfoActions   <span class=\"comment\">//存储用户id到Redux</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    userinfo.username = username</span><br><span class=\"line\">    actions.login(userinfo)</span><br><span class=\"line\">    <span class=\"comment\">// 跳转链接</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"keyword\">this</span>.props.match.params</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.router)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到指定的页面</span></span><br><span class=\"line\">        history.push(<span class=\"string\">'/'</span>+<span class=\"built_in\">decodeURIComponent</span>(params.router))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到默认页面-用户中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证登录</span></span><br><span class=\"line\">loginCheck () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.props.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!userinfo.username)&#123;</span><br><span class=\"line\">        history.push(<span class=\"string\">'/login/'</span>+<span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">'detail/'</span>+id))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章<a href=\"https://github.com/bailicangdu/react-pxq\" target=\"_blank\" rel=\"noopener\">React-Redux</a>。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"React 仿大众点评网App学习总结","date":"2017-10-17T16:00:00.000Z","_content":"\n# github地址\n\n[react-o2o-app](https://github.com/ChenXiaoMian/react-o2o-app)\n\n## 搭建React脚手架\n\n- [x] 可以解析JSX语法\n- [x] 配置babel编译ES6语法\n- [x] 实现代码的热替换，浏览器实时刷新查看效果\n- [x] 支持SCSS预处理器\n- [x] 编译完成自动打开浏览器\n- [x] 支持图片、图标字体等资源的编译\n- [x] 区分开发环境和生产环境\n\n## 运行项目\n\n```javascript\n\n克隆项目\ngit clone https://github.com/ChenXiaoMian/react-o2o-app.git\n\n进入目录\ncd react-o2o-app\n\n安装依赖\nnpm install\n\n运行开发环境 访问 http://localhost:8080/\nnpm run dev\n\n运行开发环境 Mock后台数据接口 访问 http://localhost:3000\nnpm run server\n\n打包发布\nnpm run dist\n\n```\n\n## 学习参考教程\n\n> * [React 模仿大众点评 webapp 手记](http://www.imooc.com/article/16082)\n> * [webpack](https://doc.webpack-china.org/guides/getting-started/)搭建开发环境及生产环境。\n> * [sass](https://www.sass.hk/guide/)css预处理\n> * [react](https://reactjs.org/docs/state-and-lifecycle.html)运用组件化开发思想、虚拟DOM，\n> * [react-route](https://reacttraining.com/react-router/web/example/basic)配套路由\n> * [redux](http://www.redux.org.cn/)数据状态管理，[阮一峰Redux 入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n> * [react-redux](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html)React-Redux 的用法\n> * [react-swipe](https://github.com/voronianski/react-swipe)轮播图插件\n> * [初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/)\n> * [react-router 4.0 下服务器如何配合BrowserRouter](http://www.cnblogs.com/YZH-chengdu/p/6855237.html)\n\n## 完成功能\n\n- [x] 开发首页\n- [x] 开发城市页面\n- [x] 开发搜索结果页\n- [x] 开发商户详情页\n- [x] 开发登录页\n- [x] 收藏功能\n- [x] 开发用户中心页\n- [x] 评价功能\n\n## 要点小记\n\n组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。\n\n### 基本概念\n\n* `react-router` React Router 核心\n* `react-router-dom` 用于 DOM 绑定的 React Router\n* `react-router-native` 用于 React Native 的 React Router\n* `react-router-redux` React Router 和 Redux 的集成\n\n### 路由配置\n\n```javascript\n<HashRouter>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/city\" component={City}/>\n        <Route path=\"/search/:category/:keyword?\" component={Search}/>\n        <Route path=\"/detail/:id\" component={Detail}/>\n        <Route path=\"/login/:router?\" component={Login}/>\n        <Route path=\"/user\" component={User}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </div>\n</HashRouter>\n```\n#### 1、`<BrowserRouter>`和`<HashRouter>`\n\n在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的`<Router>`组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：\n\n* `<BrowserRouter>`一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。\n* `<HashRouter>`不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。\n* `<MemoryRouter>`组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。\n* `<StaticRouter>`组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。\n\n`<BrowserRouter>`和`<HashRouter>`都可以实现前端路由的功能，区别是前者基于url的`pathname`段，后者基于`hash`段。\n\n前者：`http://127.0.0.1:3000/article/num1`\n\n后者：`http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）`\n\n这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，`<BrowserRouter>`会将当前路由发送到服务器（因为是pathname），而`<HashRouter>`不会（因为是hash段）。\n\n在react-router 4.0 的文档中有这样一段话：\n\n> 注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 `<BrowserHistory>` 代替。\n\n#### 2、react-router 还是 react-router-dom？\n\n在 React 的使用中，我们一般要引入两个包，`react` 和 `react-dom`，那么 `react-router` 和 `react-router-dom` 是不是两个都要引用呢？\n非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 `<Link>` `<BrowserRouter>` 这样的 DOM 类组件。\n因此我们只需引用 `react-router-dom` 这个包就行了。当然，如果搭配 `redux` ，你还需要使用 `react-router-redux`。\n\n#### 3、path可选url-params\n\n```javascript\n<Route path=\"/search/:category/:keyword?\" component={Search}/>\n```\n\n在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候`/:keyword?`是可选的参数，只需要在末尾加个`?`号。\n\n\n#### 4、history.push\n\n学习教程的时候，history是通过`import { history } from 'react-router'`引入的。4.0以上没找到这个对象，最后发现在页面组件的`this.props.history`找到了。参照[初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/) 一文得到的。\n\n\n### 列表加载更多\n\n首先需要准备3个状态\n\n```javascript\nthis.state = {\n    data : [],  //存储数据\n    hasMore : false,  //记录是否还有更多数据\n    isLoadingMore : false,  //是否正在加载\n    page : 1  //记录下一页的页码\n}\n```\n\n然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：\n\n```javascript\nloadFirstPageData() {\n    // 加载首页数据，result\n    // 处理数据\n    this.resultHandle(result)\n}\nloadMoreData() {\n    // 加载下一页的数据，result\n    // 处理\n    this.resultHandle(result)\n}\nresultHandle() {\n    // 解析数据，更改 state\n}\n```\n\n以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到`LoadMore`组件中呢？通过以下代码来体会一下。\n\n```javascript\n{\n    this.state.hasMore\n    ? <LoadMore isLoadingMore={this.state.isLoadingMore} loadMoreFn={this.loadMoreData.bind(this)}/>\n    : <div></div>\n}\n```\n\n总结一下以上的准备数据在LoadMore组件中的应用。\n\n* hasMore控制组件的显示和隐藏\n* isLoadingMore控制组件是显示“加载中...”（此时点击失效）还是“点击加载更多”\n* loadMoreData函数会在点击组件时触发，并加载下一页数据\n* page记录下一页的页码，会在loadMoreData函数中使用并累加\n\n创建LoadMore组件，并用上上面传递过来的数据。\n\n```javascript\nrender() {\n    return (\n        <div className=\"load-more\" ref=\"wrapper\">\n        {\n            this.props.isLoadingMore\n            ? <span>加载中...</span>\n            : <span onClick={this.loadMoreHandle.bind(this)}>点击加载更多</span>\n        }\n        </div>\n    )\n}\nloadMoreHandle () {\n    this.props.loadMoreFn()\n}\n```\n\n如何实现上拉加载效果，上面代码中有`ref=\"wrapper\"`，实现思路是：监控 window 的`scroll`方法，然后获取`ref=\"wrapper\"`的DOM，利用`getBoundingClientRect()`方法获得距离顶部的高度，然后看是否触发 `loadMore`方法。\n\n```javascript\ncomponentDidMount () {\n    const loadMoreFn = this.props.loadMoreFn\n    const wrapper = this.refs.wrapper\n    // console.log(wrapper)\n    let timeoutId\n    function callback(){\n        const top = wrapper.getBoundingClientRect().top\n        const windowHeight = window.screen.height\n        if(top && top < windowHeight){\n            // 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多\n            loadMoreFn()\n        }\n    }\n\n    window.addEventListener('scroll',function(){\n        if(this.props.isLoadingMore){\n            return\n        }\n        if(timeoutId){\n            clearTimeout(timeoutId)\n        }\n        timeoutId = setTimeout(callback,100)\n    }.bind(this),false)\n}\n```\n\n### 让`<br/>`换行\n\n有`<br />`的代码在页面中不换行，而是直接显示`<br />`。`dangerouslySetInnerHTML`, 让React正常显示你的html代码 这个`prop`的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。\n\n```javascript\n<div className=\"headlineText\" dangerouslySetInnerHTML={{__html: data.lineText}}></div>\n```\n\n### 搜索结果列表\n\n如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。\n\n```javascript\ncomponentDidUpdate (prevProps,prevState) {\n    const keyword = this.props.keyWord\n    const category = this.props.category\n    // 搜索条件完全相等时，忽略\n    if(keyword === prevProps.keyWord && category === prevProps.category){\n        return\n    }\n\n    // 重置state\n    this.setState(initialState)\n    // 重新加载数据\n    this.loadFirstPageData()\n}\n```\n\n这里需要理解`componentDidMount`和`componentDidUpdate`两个生命周期的不同。\n\n* 页面初次渲染，会走`componentDidMount`\n* 页面再次渲染，就不会走`componentDidMount`，而只走`componentDidUpdate`\n\n### 登录后的跳转\n\n```javascript\n<Route path=\"/login/:router?\" component={Login}/>\n```\n\n在路由配置中，登录组件也增加了一个可选参数`router`即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。\n\n```javascript\n// 读取Redux中是否有用户信息\ndoCheck (){\n    const userinfo = this.props.userinfo\n    if(userinfo.username){\n        // 已经登录\n        this.goUserPage()\n    }else{\n        // 尚未登录\n        this.setState({\n            checking : false\n        })\n    }\n}\n// 登录成功之后的处理\nloginHandle (username) {\n    if(username.trim()==''){\n        alert('手机号不能为空')\n        return\n    }\n    // 保存用户名\n    const actions = this.props.userInfoActions   //存储用户id到Redux\n    let userinfo = this.props.userinfo\n    userinfo.username = username\n    actions.login(userinfo)\n    // 跳转链接\n    const params = this.props.match.params\n    const history = this.props.history\n    if(params.router){\n        // 跳转到指定的页面\n        history.push('/'+decodeURIComponent(params.router))\n    }else{\n        // 跳转到默认页面-用户中心\n        this.goUserPage()\n    }\n}\n```\n\n在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)\n\n```javascript\n// 验证登录\nloginCheck () {\n    const id = this.props.id\n    const userinfo = this.props.userinfo\n    const history = this.props.history\n    if(!userinfo.username){\n        history.push('/login/'+encodeURIComponent('detail/'+id))\n        return false\n    }\n    return true\n}\n```\n\n## 最后\n\n这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章[React-Redux](https://github.com/bailicangdu/react-pxq)。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/React 仿大众点评网App学习总结.md","raw":"---\ntitle: React 仿大众点评网App学习总结\ndate: 2017-10-18\ncategories: react\ntags: [react,redux,react-router]\n---\n\n# github地址\n\n[react-o2o-app](https://github.com/ChenXiaoMian/react-o2o-app)\n\n## 搭建React脚手架\n\n- [x] 可以解析JSX语法\n- [x] 配置babel编译ES6语法\n- [x] 实现代码的热替换，浏览器实时刷新查看效果\n- [x] 支持SCSS预处理器\n- [x] 编译完成自动打开浏览器\n- [x] 支持图片、图标字体等资源的编译\n- [x] 区分开发环境和生产环境\n\n## 运行项目\n\n```javascript\n\n克隆项目\ngit clone https://github.com/ChenXiaoMian/react-o2o-app.git\n\n进入目录\ncd react-o2o-app\n\n安装依赖\nnpm install\n\n运行开发环境 访问 http://localhost:8080/\nnpm run dev\n\n运行开发环境 Mock后台数据接口 访问 http://localhost:3000\nnpm run server\n\n打包发布\nnpm run dist\n\n```\n\n## 学习参考教程\n\n> * [React 模仿大众点评 webapp 手记](http://www.imooc.com/article/16082)\n> * [webpack](https://doc.webpack-china.org/guides/getting-started/)搭建开发环境及生产环境。\n> * [sass](https://www.sass.hk/guide/)css预处理\n> * [react](https://reactjs.org/docs/state-and-lifecycle.html)运用组件化开发思想、虚拟DOM，\n> * [react-route](https://reacttraining.com/react-router/web/example/basic)配套路由\n> * [redux](http://www.redux.org.cn/)数据状态管理，[阮一峰Redux 入门教程](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n> * [react-redux](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html)React-Redux 的用法\n> * [react-swipe](https://github.com/voronianski/react-swipe)轮播图插件\n> * [初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/)\n> * [react-router 4.0 下服务器如何配合BrowserRouter](http://www.cnblogs.com/YZH-chengdu/p/6855237.html)\n\n## 完成功能\n\n- [x] 开发首页\n- [x] 开发城市页面\n- [x] 开发搜索结果页\n- [x] 开发商户详情页\n- [x] 开发登录页\n- [x] 收藏功能\n- [x] 开发用户中心页\n- [x] 评价功能\n\n## 要点小记\n\n组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。\n\n### 基本概念\n\n* `react-router` React Router 核心\n* `react-router-dom` 用于 DOM 绑定的 React Router\n* `react-router-native` 用于 React Native 的 React Router\n* `react-router-redux` React Router 和 Redux 的集成\n\n### 路由配置\n\n```javascript\n<HashRouter>\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/city\" component={City}/>\n        <Route path=\"/search/:category/:keyword?\" component={Search}/>\n        <Route path=\"/detail/:id\" component={Detail}/>\n        <Route path=\"/login/:router?\" component={Login}/>\n        <Route path=\"/user\" component={User}/>\n        <Route component={NotFound}/>\n      </Switch>\n    </div>\n</HashRouter>\n```\n#### 1、`<BrowserRouter>`和`<HashRouter>`\n\n在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的`<Router>`组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：\n\n* `<BrowserRouter>`一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。\n* `<HashRouter>`不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。\n* `<MemoryRouter>`组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。\n* `<StaticRouter>`组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。\n\n`<BrowserRouter>`和`<HashRouter>`都可以实现前端路由的功能，区别是前者基于url的`pathname`段，后者基于`hash`段。\n\n前者：`http://127.0.0.1:3000/article/num1`\n\n后者：`http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）`\n\n这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，`<BrowserRouter>`会将当前路由发送到服务器（因为是pathname），而`<HashRouter>`不会（因为是hash段）。\n\n在react-router 4.0 的文档中有这样一段话：\n\n> 注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 `<BrowserHistory>` 代替。\n\n#### 2、react-router 还是 react-router-dom？\n\n在 React 的使用中，我们一般要引入两个包，`react` 和 `react-dom`，那么 `react-router` 和 `react-router-dom` 是不是两个都要引用呢？\n非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 `<Link>` `<BrowserRouter>` 这样的 DOM 类组件。\n因此我们只需引用 `react-router-dom` 这个包就行了。当然，如果搭配 `redux` ，你还需要使用 `react-router-redux`。\n\n#### 3、path可选url-params\n\n```javascript\n<Route path=\"/search/:category/:keyword?\" component={Search}/>\n```\n\n在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候`/:keyword?`是可选的参数，只需要在末尾加个`?`号。\n\n\n#### 4、history.push\n\n学习教程的时候，history是通过`import { history } from 'react-router'`引入的。4.0以上没找到这个对象，最后发现在页面组件的`this.props.history`找到了。参照[初探 React Router 4.0](http://www.jianshu.com/p/e3adc9b5f75c/) 一文得到的。\n\n\n### 列表加载更多\n\n首先需要准备3个状态\n\n```javascript\nthis.state = {\n    data : [],  //存储数据\n    hasMore : false,  //记录是否还有更多数据\n    isLoadingMore : false,  //是否正在加载\n    page : 1  //记录下一页的页码\n}\n```\n\n然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：\n\n```javascript\nloadFirstPageData() {\n    // 加载首页数据，result\n    // 处理数据\n    this.resultHandle(result)\n}\nloadMoreData() {\n    // 加载下一页的数据，result\n    // 处理\n    this.resultHandle(result)\n}\nresultHandle() {\n    // 解析数据，更改 state\n}\n```\n\n以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到`LoadMore`组件中呢？通过以下代码来体会一下。\n\n```javascript\n{\n    this.state.hasMore\n    ? <LoadMore isLoadingMore={this.state.isLoadingMore} loadMoreFn={this.loadMoreData.bind(this)}/>\n    : <div></div>\n}\n```\n\n总结一下以上的准备数据在LoadMore组件中的应用。\n\n* hasMore控制组件的显示和隐藏\n* isLoadingMore控制组件是显示“加载中...”（此时点击失效）还是“点击加载更多”\n* loadMoreData函数会在点击组件时触发，并加载下一页数据\n* page记录下一页的页码，会在loadMoreData函数中使用并累加\n\n创建LoadMore组件，并用上上面传递过来的数据。\n\n```javascript\nrender() {\n    return (\n        <div className=\"load-more\" ref=\"wrapper\">\n        {\n            this.props.isLoadingMore\n            ? <span>加载中...</span>\n            : <span onClick={this.loadMoreHandle.bind(this)}>点击加载更多</span>\n        }\n        </div>\n    )\n}\nloadMoreHandle () {\n    this.props.loadMoreFn()\n}\n```\n\n如何实现上拉加载效果，上面代码中有`ref=\"wrapper\"`，实现思路是：监控 window 的`scroll`方法，然后获取`ref=\"wrapper\"`的DOM，利用`getBoundingClientRect()`方法获得距离顶部的高度，然后看是否触发 `loadMore`方法。\n\n```javascript\ncomponentDidMount () {\n    const loadMoreFn = this.props.loadMoreFn\n    const wrapper = this.refs.wrapper\n    // console.log(wrapper)\n    let timeoutId\n    function callback(){\n        const top = wrapper.getBoundingClientRect().top\n        const windowHeight = window.screen.height\n        if(top && top < windowHeight){\n            // 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多\n            loadMoreFn()\n        }\n    }\n\n    window.addEventListener('scroll',function(){\n        if(this.props.isLoadingMore){\n            return\n        }\n        if(timeoutId){\n            clearTimeout(timeoutId)\n        }\n        timeoutId = setTimeout(callback,100)\n    }.bind(this),false)\n}\n```\n\n### 让`<br/>`换行\n\n有`<br />`的代码在页面中不换行，而是直接显示`<br />`。`dangerouslySetInnerHTML`, 让React正常显示你的html代码 这个`prop`的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。\n\n```javascript\n<div className=\"headlineText\" dangerouslySetInnerHTML={{__html: data.lineText}}></div>\n```\n\n### 搜索结果列表\n\n如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。\n\n```javascript\ncomponentDidUpdate (prevProps,prevState) {\n    const keyword = this.props.keyWord\n    const category = this.props.category\n    // 搜索条件完全相等时，忽略\n    if(keyword === prevProps.keyWord && category === prevProps.category){\n        return\n    }\n\n    // 重置state\n    this.setState(initialState)\n    // 重新加载数据\n    this.loadFirstPageData()\n}\n```\n\n这里需要理解`componentDidMount`和`componentDidUpdate`两个生命周期的不同。\n\n* 页面初次渲染，会走`componentDidMount`\n* 页面再次渲染，就不会走`componentDidMount`，而只走`componentDidUpdate`\n\n### 登录后的跳转\n\n```javascript\n<Route path=\"/login/:router?\" component={Login}/>\n```\n\n在路由配置中，登录组件也增加了一个可选参数`router`即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。\n\n```javascript\n// 读取Redux中是否有用户信息\ndoCheck (){\n    const userinfo = this.props.userinfo\n    if(userinfo.username){\n        // 已经登录\n        this.goUserPage()\n    }else{\n        // 尚未登录\n        this.setState({\n            checking : false\n        })\n    }\n}\n// 登录成功之后的处理\nloginHandle (username) {\n    if(username.trim()==''){\n        alert('手机号不能为空')\n        return\n    }\n    // 保存用户名\n    const actions = this.props.userInfoActions   //存储用户id到Redux\n    let userinfo = this.props.userinfo\n    userinfo.username = username\n    actions.login(userinfo)\n    // 跳转链接\n    const params = this.props.match.params\n    const history = this.props.history\n    if(params.router){\n        // 跳转到指定的页面\n        history.push('/'+decodeURIComponent(params.router))\n    }else{\n        // 跳转到默认页面-用户中心\n        this.goUserPage()\n    }\n}\n```\n\n在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)\n\n```javascript\n// 验证登录\nloginCheck () {\n    const id = this.props.id\n    const userinfo = this.props.userinfo\n    const history = this.props.history\n    if(!userinfo.username){\n        history.push('/login/'+encodeURIComponent('detail/'+id))\n        return false\n    }\n    return true\n}\n```\n\n## 最后\n\n这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章[React-Redux](https://github.com/bailicangdu/react-pxq)。\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"React 仿大众点评网App学习总结","published":1,"updated":"2018-04-11T15:01:08.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g8w002bfc929ebgos33","content":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/react-o2o-app\" target=\"_blank\" rel=\"noopener\">react-o2o-app</a></p>\n<h2 id=\"搭建React脚手架\"><a href=\"#搭建React脚手架\" class=\"headerlink\" title=\"搭建React脚手架\"></a>搭建React脚手架</h2><ul>\n<li>[x] 可以解析JSX语法</li>\n<li>[x] 配置babel编译ES6语法</li>\n<li>[x] 实现代码的热替换，浏览器实时刷新查看效果</li>\n<li>[x] 支持SCSS预处理器</li>\n<li>[x] 编译完成自动打开浏览器</li>\n<li>[x] 支持图片、图标字体等资源的编译</li>\n<li>[x] 区分开发环境和生产环境</li>\n</ul>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">克隆项目</span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/ChenXiaoMian/react-o2o-app.git</span></span><br><span class=\"line\"></span><br><span class=\"line\">进入目录</span><br><span class=\"line\">cd react-o2o-app</span><br><span class=\"line\"></span><br><span class=\"line\">安装依赖</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">运行开发环境 访问 http:<span class=\"comment\">//localhost:8080/</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\">运行开发环境 Mock后台数据接口 访问 http:<span class=\"comment\">//localhost:3000</span></span><br><span class=\"line\">npm run server</span><br><span class=\"line\"></span><br><span class=\"line\">打包发布</span><br><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure>\n<h2 id=\"学习参考教程\"><a href=\"#学习参考教程\" class=\"headerlink\" title=\"学习参考教程\"></a>学习参考教程</h2><blockquote>\n<ul>\n<li><a href=\"http://www.imooc.com/article/16082\" target=\"_blank\" rel=\"noopener\">React 模仿大众点评 webapp 手记</a></li>\n<li><a href=\"https://doc.webpack-china.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack</a>搭建开发环境及生产环境。</li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a>css预处理</li>\n<li><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener\">react</a>运用组件化开发思想、虚拟DOM，</li>\n<li><a href=\"https://reacttraining.com/react-router/web/example/basic\" target=\"_blank\" rel=\"noopener\">react-route</a>配套路由</li>\n<li><a href=\"http://www.redux.org.cn/\" target=\"_blank\" rel=\"noopener\">redux</a>数据状态管理，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">阮一峰Redux 入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"noopener\">react-redux</a>React-Redux 的用法</li>\n<li><a href=\"https://github.com/voronianski/react-swipe\" target=\"_blank\" rel=\"noopener\">react-swipe</a>轮播图插件</li>\n<li><a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a></li>\n<li><a href=\"http://www.cnblogs.com/YZH-chengdu/p/6855237.html\" target=\"_blank\" rel=\"noopener\">react-router 4.0 下服务器如何配合BrowserRouter</a></li>\n</ul>\n</blockquote>\n<h2 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h2><ul>\n<li>[x] 开发首页</li>\n<li>[x] 开发城市页面</li>\n<li>[x] 开发搜索结果页</li>\n<li>[x] 开发商户详情页</li>\n<li>[x] 开发登录页</li>\n<li>[x] 收藏功能</li>\n<li>[x] 开发用户中心页</li>\n<li>[x] 评价功能</li>\n</ul>\n<h2 id=\"要点小记\"><a href=\"#要点小记\" class=\"headerlink\" title=\"要点小记\"></a>要点小记</h2><p>组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><code>react-router</code> React Router 核心</li>\n<li><code>react-router-dom</code> 用于 DOM 绑定的 React Router</li>\n<li><code>react-router-native</code> 用于 React Native 的 React Router</li>\n<li><code>react-router-redux</code> React Router 和 Redux 的集成</li>\n</ul>\n<h3 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/city\"</span> component=&#123;City&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/detail/:id\"</span> component=&#123;Detail&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/user\"</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route component=&#123;NotFound&#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\"><a href=\"#1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\" class=\"headerlink\" title=\"1、&lt;BrowserRouter&gt;和&lt;HashRouter&gt;\"></a>1、<code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code></h4><p>在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的<code>&lt;Router&gt;</code>组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code>一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。</li>\n<li><code>&lt;HashRouter&gt;</code>不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。</li>\n<li><code>&lt;MemoryRouter&gt;</code>组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。</li>\n<li><code>&lt;StaticRouter&gt;</code>组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。</li>\n</ul>\n<p><code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>都可以实现前端路由的功能，区别是前者基于url的<code>pathname</code>段，后者基于<code>hash</code>段。</p>\n<p>前者：<code>http://127.0.0.1:3000/article/num1</code></p>\n<p>后者：<code>http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）</code></p>\n<p>这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，<code>&lt;BrowserRouter&gt;</code>会将当前路由发送到服务器（因为是pathname），而<code>&lt;HashRouter&gt;</code>不会（因为是hash段）。</p>\n<p>在react-router 4.0 的文档中有这样一段话：</p>\n<blockquote>\n<p>注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 <code>&lt;BrowserHistory&gt;</code> 代替。</p>\n</blockquote>\n<h4 id=\"2、react-router-还是-react-router-dom？\"><a href=\"#2、react-router-还是-react-router-dom？\" class=\"headerlink\" title=\"2、react-router 还是 react-router-dom？\"></a>2、react-router 还是 react-router-dom？</h4><p>在 React 的使用中，我们一般要引入两个包，<code>react</code> 和 <code>react-dom</code>，那么 <code>react-router</code> 和 <code>react-router-dom</code> 是不是两个都要引用呢？<br>非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 <code>&lt;Link&gt;</code> <code>&lt;BrowserRouter&gt;</code> 这样的 DOM 类组件。<br>因此我们只需引用 <code>react-router-dom</code> 这个包就行了。当然，如果搭配 <code>redux</code> ，你还需要使用 <code>react-router-redux</code>。</p>\n<h4 id=\"3、path可选url-params\"><a href=\"#3、path可选url-params\" class=\"headerlink\" title=\"3、path可选url-params\"></a>3、path可选url-params</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候<code>/:keyword?</code>是可选的参数，只需要在末尾加个<code>?</code>号。</p>\n<h4 id=\"4、history-push\"><a href=\"#4、history-push\" class=\"headerlink\" title=\"4、history.push\"></a>4、history.push</h4><p>学习教程的时候，history是通过<code>import { history } from &#39;react-router&#39;</code>引入的。4.0以上没找到这个对象，最后发现在页面组件的<code>this.props.history</code>找到了。参照<a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a> 一文得到的。</p>\n<h3 id=\"列表加载更多\"><a href=\"#列表加载更多\" class=\"headerlink\" title=\"列表加载更多\"></a>列表加载更多</h3><p>首先需要准备3个状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    data : [],  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\">    hasMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//记录是否还有更多数据</span></span><br><span class=\"line\">    isLoadingMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//是否正在加载</span></span><br><span class=\"line\">    page : <span class=\"number\">1</span>  <span class=\"comment\">//记录下一页的页码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadFirstPageData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载首页数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadMoreData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载下一页的数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultHandle() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析数据，更改 state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到<code>LoadMore</code>组件中呢？通过以下代码来体会一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.hasMore</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadMore</span> <span class=\"attr\">isLoadingMore</span>=<span class=\"string\">&#123;this.state.isLoadingMore&#125;</span> <span class=\"attr\">loadMoreFn</span>=<span class=\"string\">&#123;this.loadMoreData.bind(this)&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    : <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>总结一下以上的准备数据在LoadMore组件中的应用。</p>\n<ul>\n<li>hasMore控制组件的显示和隐藏</li>\n<li>isLoadingMore控制组件是显示“加载中…”（此时点击失效）还是“点击加载更多”</li>\n<li>loadMoreData函数会在点击组件时触发，并加载下一页数据</li>\n<li>page记录下一页的页码，会在loadMoreData函数中使用并累加</li>\n</ul>\n<p>创建LoadMore组件，并用上上面传递过来的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"load-more\"</span> ref=<span class=\"string\">\"wrapper\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.isLoadingMore</span><br><span class=\"line\">            ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>加载中...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">            : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.loadMoreHandle.bind(this)&#125;</span>&gt;</span>点击加载更多<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">loadMoreHandle () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.props.loadMoreFn()</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如何实现上拉加载效果，上面代码中有<code>ref=&quot;wrapper&quot;</code>，实现思路是：监控 window 的<code>scroll</code>方法，然后获取<code>ref=&quot;wrapper&quot;</code>的DOM，利用<code>getBoundingClientRect()</code>方法获得距离顶部的高度，然后看是否触发 <code>loadMore</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loadMoreFn = <span class=\"keyword\">this</span>.props.loadMoreFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = <span class=\"keyword\">this</span>.refs.wrapper</span><br><span class=\"line\">    <span class=\"comment\">// console.log(wrapper)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeoutId</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> top = wrapper.getBoundingClientRect().top</span><br><span class=\"line\">        <span class=\"keyword\">const</span> windowHeight = <span class=\"built_in\">window</span>.screen.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top &amp;&amp; top &lt; windowHeight)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多</span></span><br><span class=\"line\">            loadMoreFn()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.isLoadingMore)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeoutId)&#123;</span><br><span class=\"line\">            clearTimeout(timeoutId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeoutId = setTimeout(callback,<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"让-lt-br-gt-换行\"><a href=\"#让-lt-br-gt-换行\" class=\"headerlink\" title=\"让&lt;br/&gt;换行\"></a>让<code>&lt;br/&gt;</code>换行</h3><p>有<code>&lt;br /&gt;</code>的代码在页面中不换行，而是直接显示<code>&lt;br /&gt;</code>。<code>dangerouslySetInnerHTML</code>, 让React正常显示你的html代码 这个<code>prop</code>的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">\"headlineText\"</span> dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>: data.lineText&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索结果列表\"><a href=\"#搜索结果列表\" class=\"headerlink\" title=\"搜索结果列表\"></a>搜索结果列表</h3><p>如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidUpdate (prevProps,prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keyword = <span class=\"keyword\">this</span>.props.keyWord</span><br><span class=\"line\">    <span class=\"keyword\">const</span> category = <span class=\"keyword\">this</span>.props.category</span><br><span class=\"line\">    <span class=\"comment\">// 搜索条件完全相等时，忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyword === prevProps.keyWord &amp;&amp; category === prevProps.category)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(initialState)</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFirstPageData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要理解<code>componentDidMount</code>和<code>componentDidUpdate</code>两个生命周期的不同。</p>\n<ul>\n<li>页面初次渲染，会走<code>componentDidMount</code></li>\n<li>页面再次渲染，就不会走<code>componentDidMount</code>，而只走<code>componentDidUpdate</code></li>\n</ul>\n<h3 id=\"登录后的跳转\"><a href=\"#登录后的跳转\" class=\"headerlink\" title=\"登录后的跳转\"></a>登录后的跳转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在路由配置中，登录组件也增加了一个可选参数<code>router</code>即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取Redux中是否有用户信息</span></span><br><span class=\"line\">doCheck ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo.username)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尚未登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            checking : <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 登录成功之后的处理</span></span><br><span class=\"line\">loginHandle (username) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.trim()==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'手机号不能为空'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> actions = <span class=\"keyword\">this</span>.props.userInfoActions   <span class=\"comment\">//存储用户id到Redux</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    userinfo.username = username</span><br><span class=\"line\">    actions.login(userinfo)</span><br><span class=\"line\">    <span class=\"comment\">// 跳转链接</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"keyword\">this</span>.props.match.params</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.router)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到指定的页面</span></span><br><span class=\"line\">        history.push(<span class=\"string\">'/'</span>+<span class=\"built_in\">decodeURIComponent</span>(params.router))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到默认页面-用户中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证登录</span></span><br><span class=\"line\">loginCheck () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.props.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!userinfo.username)&#123;</span><br><span class=\"line\">        history.push(<span class=\"string\">'/login/'</span>+<span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">'detail/'</span>+id))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章<a href=\"https://github.com/bailicangdu/react-pxq\" target=\"_blank\" rel=\"noopener\">React-Redux</a>。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/react-o2o-app\" target=\"_blank\" rel=\"noopener\">react-o2o-app</a></p>\n<h2 id=\"搭建React脚手架\"><a href=\"#搭建React脚手架\" class=\"headerlink\" title=\"搭建React脚手架\"></a>搭建React脚手架</h2><ul>\n<li>[x] 可以解析JSX语法</li>\n<li>[x] 配置babel编译ES6语法</li>\n<li>[x] 实现代码的热替换，浏览器实时刷新查看效果</li>\n<li>[x] 支持SCSS预处理器</li>\n<li>[x] 编译完成自动打开浏览器</li>\n<li>[x] 支持图片、图标字体等资源的编译</li>\n<li>[x] 区分开发环境和生产环境</li>\n</ul>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">克隆项目</span><br><span class=\"line\">git clone https:<span class=\"comment\">//github.com/ChenXiaoMian/react-o2o-app.git</span></span><br><span class=\"line\"></span><br><span class=\"line\">进入目录</span><br><span class=\"line\">cd react-o2o-app</span><br><span class=\"line\"></span><br><span class=\"line\">安装依赖</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">运行开发环境 访问 http:<span class=\"comment\">//localhost:8080/</span></span><br><span class=\"line\">npm run dev</span><br><span class=\"line\"></span><br><span class=\"line\">运行开发环境 Mock后台数据接口 访问 http:<span class=\"comment\">//localhost:3000</span></span><br><span class=\"line\">npm run server</span><br><span class=\"line\"></span><br><span class=\"line\">打包发布</span><br><span class=\"line\">npm run dist</span><br></pre></td></tr></table></figure>\n<h2 id=\"学习参考教程\"><a href=\"#学习参考教程\" class=\"headerlink\" title=\"学习参考教程\"></a>学习参考教程</h2><blockquote>\n<ul>\n<li><a href=\"http://www.imooc.com/article/16082\" target=\"_blank\" rel=\"noopener\">React 模仿大众点评 webapp 手记</a></li>\n<li><a href=\"https://doc.webpack-china.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack</a>搭建开发环境及生产环境。</li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a>css预处理</li>\n<li><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"noopener\">react</a>运用组件化开发思想、虚拟DOM，</li>\n<li><a href=\"https://reacttraining.com/react-router/web/example/basic\" target=\"_blank\" rel=\"noopener\">react-route</a>配套路由</li>\n<li><a href=\"http://www.redux.org.cn/\" target=\"_blank\" rel=\"noopener\">redux</a>数据状态管理，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"noopener\">阮一峰Redux 入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html\" target=\"_blank\" rel=\"noopener\">react-redux</a>React-Redux 的用法</li>\n<li><a href=\"https://github.com/voronianski/react-swipe\" target=\"_blank\" rel=\"noopener\">react-swipe</a>轮播图插件</li>\n<li><a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a></li>\n<li><a href=\"http://www.cnblogs.com/YZH-chengdu/p/6855237.html\" target=\"_blank\" rel=\"noopener\">react-router 4.0 下服务器如何配合BrowserRouter</a></li>\n</ul>\n</blockquote>\n<h2 id=\"完成功能\"><a href=\"#完成功能\" class=\"headerlink\" title=\"完成功能\"></a>完成功能</h2><ul>\n<li>[x] 开发首页</li>\n<li>[x] 开发城市页面</li>\n<li>[x] 开发搜索结果页</li>\n<li>[x] 开发商户详情页</li>\n<li>[x] 开发登录页</li>\n<li>[x] 收藏功能</li>\n<li>[x] 开发用户中心页</li>\n<li>[x] 评价功能</li>\n</ul>\n<h2 id=\"要点小记\"><a href=\"#要点小记\" class=\"headerlink\" title=\"要点小记\"></a>要点小记</h2><p>组件化开发的思想主要体现在代码分离的三个层上，分别是page(页面层)，subpage(智能组件)，component(木偶组件)。木偶组件主要根据props传值的内容来显示，智能组件主要是获取数据的逻辑代码。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><code>react-router</code> React Router 核心</li>\n<li><code>react-router-dom</code> 用于 DOM 绑定的 React Router</li>\n<li><code>react-router-native</code> 用于 React Native 的 React Router</li>\n<li><code>react-router-redux</code> React Router 和 Redux 的集成</li>\n</ul>\n<h3 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;HashRouter&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;Home&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/city\"</span> component=&#123;City&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/detail/:id\"</span> component=&#123;Detail&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/user\"</span> component=&#123;User&#125;/&gt;</span><br><span class=\"line\">        &lt;Route component=&#123;NotFound&#125;/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\"><a href=\"#1、-lt-BrowserRouter-gt-和-lt-HashRouter-gt\" class=\"headerlink\" title=\"1、&lt;BrowserRouter&gt;和&lt;HashRouter&gt;\"></a>1、<code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code></h4><p>在react-router 4.0版本中，API与先前版本相比有了很大的修改，在2.0、3.0中常用的<code>&lt;Router&gt;</code>组件作为路由底层配置组件不再常用，取而代之的是四个各有不同的路由组件：</p>\n<ul>\n<li><code>&lt;BrowserRouter&gt;</code>一个使用了 HTML5 history API 的高阶路由组件，保证你的 UI 界面和 URL 保持同步。</li>\n<li><code>&lt;HashRouter&gt;</code>不支持 location.key 和 location.state。另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter。</li>\n<li><code>&lt;MemoryRouter&gt;</code>组件在内存中保存“URL”信息，不会修改浏览器的地址栏，往往用于React Native或测试环境等非浏览器环境。</li>\n<li><code>&lt;StaticRouter&gt;</code>组件从名字能看出它从不修改路由，这在服务器端渲染时很有用。</li>\n</ul>\n<p><code>&lt;BrowserRouter&gt;</code>和<code>&lt;HashRouter&gt;</code>都可以实现前端路由的功能，区别是前者基于url的<code>pathname</code>段，后者基于<code>hash</code>段。</p>\n<p>前者：<code>http://127.0.0.1:3000/article/num1</code></p>\n<p>后者：<code>http://127.0.0.1:3000/#/article/num1（不一定是这样，但#是少不了的）</code></p>\n<p>这样的区别带来的直接问题就是当处于二级或多级路由状态时，刷新页面，<code>&lt;BrowserRouter&gt;</code>会将当前路由发送到服务器（因为是pathname），而<code>&lt;HashRouter&gt;</code>不会（因为是hash段）。</p>\n<p>在react-router 4.0 的文档中有这样一段话：</p>\n<blockquote>\n<p>注意： 使用 hash 的方式记录导航历史不支持 location.key 和 location.state。 在以前的版本中，我们为这种行为提供了 shim，但是仍有一些问题我们无法解决。 任何依赖此行为的代码或插件都将无法正常使用。 由于该技术仅用于支持传统的浏览器，因此在用于浏览器时可以使用 <code>&lt;BrowserHistory&gt;</code> 代替。</p>\n</blockquote>\n<h4 id=\"2、react-router-还是-react-router-dom？\"><a href=\"#2、react-router-还是-react-router-dom？\" class=\"headerlink\" title=\"2、react-router 还是 react-router-dom？\"></a>2、react-router 还是 react-router-dom？</h4><p>在 React 的使用中，我们一般要引入两个包，<code>react</code> 和 <code>react-dom</code>，那么 <code>react-router</code> 和 <code>react-router-dom</code> 是不是两个都要引用呢？<br>非也，坑就在这里。他们两个只要引用一个就行了，不同之处就是后者比前者多出了 <code>&lt;Link&gt;</code> <code>&lt;BrowserRouter&gt;</code> 这样的 DOM 类组件。<br>因此我们只需引用 <code>react-router-dom</code> 这个包就行了。当然，如果搭配 <code>redux</code> ，你还需要使用 <code>react-router-redux</code>。</p>\n<h4 id=\"3、path可选url-params\"><a href=\"#3、path可选url-params\" class=\"headerlink\" title=\"3、path可选url-params\"></a>3、path可选url-params</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/search/:category/:keyword?\"</span> component=&#123;Search&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在开发搜索组件路由的时候，路由参数有两个参数或者三个参数的情况。这时候<code>/:keyword?</code>是可选的参数，只需要在末尾加个<code>?</code>号。</p>\n<h4 id=\"4、history-push\"><a href=\"#4、history-push\" class=\"headerlink\" title=\"4、history.push\"></a>4、history.push</h4><p>学习教程的时候，history是通过<code>import { history } from &#39;react-router&#39;</code>引入的。4.0以上没找到这个对象，最后发现在页面组件的<code>this.props.history</code>找到了。参照<a href=\"http://www.jianshu.com/p/e3adc9b5f75c/\" target=\"_blank\" rel=\"noopener\">初探 React Router 4.0</a> 一文得到的。</p>\n<h3 id=\"列表加载更多\"><a href=\"#列表加载更多\" class=\"headerlink\" title=\"列表加载更多\"></a>列表加载更多</h3><p>首先需要准备3个状态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">    data : [],  <span class=\"comment\">//存储数据</span></span><br><span class=\"line\">    hasMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//记录是否还有更多数据</span></span><br><span class=\"line\">    isLoadingMore : <span class=\"literal\">false</span>,  <span class=\"comment\">//是否正在加载</span></span><br><span class=\"line\">    page : <span class=\"number\">1</span>  <span class=\"comment\">//记录下一页的页码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，还需要加一个loadMoreData的方法，即在点击“加载更多”时会触发的方法。加载首页数据和加载更多数据，这两个函数可以提取一些公共代码，具体的写法可以是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadFirstPageData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载首页数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadMoreData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载下一页的数据，result</span></span><br><span class=\"line\">    <span class=\"comment\">// 处理</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.resultHandle(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">resultHandle() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析数据，更改 state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上都是在引入LoadMore组件（该组件后面会教大家创建，现在还没创建）之前需要做的准备工作，那么这些准备工作该怎么用到<code>LoadMore</code>组件中呢？通过以下代码来体会一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state.hasMore</span><br><span class=\"line\">    ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">LoadMore</span> <span class=\"attr\">isLoadingMore</span>=<span class=\"string\">&#123;this.state.isLoadingMore&#125;</span> <span class=\"attr\">loadMoreFn</span>=<span class=\"string\">&#123;this.loadMoreData.bind(this)&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    : <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>总结一下以上的准备数据在LoadMore组件中的应用。</p>\n<ul>\n<li>hasMore控制组件的显示和隐藏</li>\n<li>isLoadingMore控制组件是显示“加载中…”（此时点击失效）还是“点击加载更多”</li>\n<li>loadMoreData函数会在点击组件时触发，并加载下一页数据</li>\n<li>page记录下一页的页码，会在loadMoreData函数中使用并累加</li>\n</ul>\n<p>创建LoadMore组件，并用上上面传递过来的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"load-more\"</span> ref=<span class=\"string\">\"wrapper\"</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.isLoadingMore</span><br><span class=\"line\">            ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>加载中...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">            : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.loadMoreHandle.bind(this)&#125;</span>&gt;</span>点击加载更多<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">loadMoreHandle () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    this.props.loadMoreFn()</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如何实现上拉加载效果，上面代码中有<code>ref=&quot;wrapper&quot;</code>，实现思路是：监控 window 的<code>scroll</code>方法，然后获取<code>ref=&quot;wrapper&quot;</code>的DOM，利用<code>getBoundingClientRect()</code>方法获得距离顶部的高度，然后看是否触发 <code>loadMore</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loadMoreFn = <span class=\"keyword\">this</span>.props.loadMoreFn</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = <span class=\"keyword\">this</span>.refs.wrapper</span><br><span class=\"line\">    <span class=\"comment\">// console.log(wrapper)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeoutId</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> top = wrapper.getBoundingClientRect().top</span><br><span class=\"line\">        <span class=\"keyword\">const</span> windowHeight = <span class=\"built_in\">window</span>.screen.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top &amp;&amp; top &lt; windowHeight)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 当wrapper已经被滚动到暴露在页面可视范围之内的时候，触发加载更多</span></span><br><span class=\"line\">            loadMoreFn()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.props.isLoadingMore)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeoutId)&#123;</span><br><span class=\"line\">            clearTimeout(timeoutId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeoutId = setTimeout(callback,<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"让-lt-br-gt-换行\"><a href=\"#让-lt-br-gt-换行\" class=\"headerlink\" title=\"让&lt;br/&gt;换行\"></a>让<code>&lt;br/&gt;</code>换行</h3><p>有<code>&lt;br /&gt;</code>的代码在页面中不换行，而是直接显示<code>&lt;br /&gt;</code>。<code>dangerouslySetInnerHTML</code>, 让React正常显示你的html代码 这个<code>prop</code>的命名是故意这么设计的，以此来警告，它的prop值（一个对象而不是字符串）应该被用来表明净化后的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div className=<span class=\"string\">\"headlineText\"</span> dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>: data.lineText&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"搜索结果列表\"><a href=\"#搜索结果列表\" class=\"headerlink\" title=\"搜索结果列表\"></a>搜索结果列表</h3><p>如果在搜索结果页头部的输入框中再次输入内容重新进行搜索时，就需要多一步处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">componentDidUpdate (prevProps,prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keyword = <span class=\"keyword\">this</span>.props.keyWord</span><br><span class=\"line\">    <span class=\"keyword\">const</span> category = <span class=\"keyword\">this</span>.props.category</span><br><span class=\"line\">    <span class=\"comment\">// 搜索条件完全相等时，忽略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(keyword === prevProps.keyWord &amp;&amp; category === prevProps.category)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置state</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(initialState)</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFirstPageData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要理解<code>componentDidMount</code>和<code>componentDidUpdate</code>两个生命周期的不同。</p>\n<ul>\n<li>页面初次渲染，会走<code>componentDidMount</code></li>\n<li>页面再次渲染，就不会走<code>componentDidMount</code>，而只走<code>componentDidUpdate</code></li>\n</ul>\n<h3 id=\"登录后的跳转\"><a href=\"#登录后的跳转\" class=\"headerlink\" title=\"登录后的跳转\"></a>登录后的跳转</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Route path=<span class=\"string\">\"/login/:router?\"</span> component=&#123;Login&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>在路由配置中，登录组件也增加了一个可选参数<code>router</code>即登录之后需要跳转的页面。即在哪个页面登录的，登录完了之后还要再跳转到哪个页面，这种功能很常见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取Redux中是否有用户信息</span></span><br><span class=\"line\">doCheck ()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo.username)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尚未登录</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            checking : <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 登录成功之后的处理</span></span><br><span class=\"line\">loginHandle (username) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(username.trim()==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'手机号不能为空'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> actions = <span class=\"keyword\">this</span>.props.userInfoActions   <span class=\"comment\">//存储用户id到Redux</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    userinfo.username = username</span><br><span class=\"line\">    actions.login(userinfo)</span><br><span class=\"line\">    <span class=\"comment\">// 跳转链接</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = <span class=\"keyword\">this</span>.props.match.params</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(params.router)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到指定的页面</span></span><br><span class=\"line\">        history.push(<span class=\"string\">'/'</span>+<span class=\"built_in\">decodeURIComponent</span>(params.router))</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 跳转到默认页面-用户中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goUserPage()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在商户详情页立即购买按钮的事件上，先判断是否登录，如果没登录则跳到登录页(且带上可调回的路由参数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证登录</span></span><br><span class=\"line\">loginCheck () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.props.id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = <span class=\"keyword\">this</span>.props.userinfo</span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"keyword\">this</span>.props.history</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!userinfo.username)&#123;</span><br><span class=\"line\">        history.push(<span class=\"string\">'/login/'</span>+<span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">'detail/'</span>+id))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这算是在学习react期间，完成的一个比较完整的项目。文章主要是记录比较重要的要点，分享一下自己的收获，遇坑的点在react-router 4.0上，版本更新太快，视频用的许多方法都用不上，还有redux和react-redux的概念比较难理解，这里推荐一篇文章<a href=\"https://github.com/bailicangdu/react-pxq\" target=\"_blank\" rel=\"noopener\">React-Redux</a>。</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"webpack前端工程化多页面配置","date":"2018-03-13T13:05:00.000Z","_content":"\n\n\n# 前言\n\n平时工作中，公司项目没有做前后端分离，用的还是grunt+seajs比较旧的技术，基本是后端主导，前端只负责样式和效果，没办法有更多尝试。不过，前端技术日新月异，不能因为环境而局限自己想折腾的心，于是，在看过[《基于webpack的前端工程化开发之多页站点篇》](https://segmentfault.com/a/1190000004511992)这篇文章之后，开始尝试。\n\n# github地址\n\n[webpack-multiplepage前端工程化多页面配置](https://github.com/ChenXiaoMian/webpack-multiplepage)\n\n# 项目依赖\n\n`npm init` 初始化项目\n\n`npm install plugins --save-dev` 安装依赖\n\n`package.json` 依赖声明如下：\n```javascript\n\"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",                    // babel转译核心\n    \"babel-loader\": \"^7.1.2\",                   // webpack使用转换ES6\n    \"babel-preset-env\": \"^1.6.1\",               // 转码规则，按需转译\n    \"clean-webpack-plugin\": \"^0.1.18\",          // 清理文件\n    \"copy-webpack-plugin\": \"^4.5.0\",            // 复制文件\n    \"css-loader\": \"^0.28.9\",                    // 将css装载到js\n    \"exports-loader\": \"^0.7.0\",                 // 模块化，导出指定对象\n    \"extract-text-webpack-plugin\": \"^3.0.2\",    // 将css分离成文件\n    \"file-loader\": \"^1.1.11\",                   // 解析项目中的url引入\n    \"glob\": \"^7.1.2\",                           // 根据模式匹配获取文件列表的node模块\n    \"html-loader\": \"^0.5.5\",                    // 解析html文件的url\n    \"html-webpack-plugin\": \"^2.30.1\",           // 处理html文件\n    \"node-sass\": \"^4.7.2\",                      // 编译sass\n    \"sass-loader\": \"^6.0.7\",                    // 将sass文件编译成css\n    \"script-loader\": \"^0.7.2\",                  // 全局上下文执行一次 JS 脚本\n    \"style-loader\": \"^0.20.1\",                  // css插入到页面的style标签\n    \"uglifyjs-webpack-plugin\": \"^1.1.8\",        // 压缩js\n    \"url-loader\": \"^1.0.1\",                     // url-loader封装了file-loader，将小图片生成dataURl\n    \"webpack\": \"^3.9.1\",                        // webpack核心\n    \"webpack-dev-server\": \"^2.11.1\",            // 热更新服务\n    \"webpack-merge\": \"^4.1.1\"                   // 合并配置\n}\n```\n\n`npm run dev` 执行开发环境，点击进入`view`文件夹\n\n`npm run build` 执行打包发布\n\n# 目录结构\n\n```\n- website\n    - config             #webpack配置目录\n        - util           #入口文件逻辑\n        base.js          #基本配置\n        dev.js           #开发配置\n        pro.js           #发布配置\n    - src                #代码开发目录\n        - scss           #sass文件目录\n        - css            #css目录，按照页面（模块）、通用、第三方三个级别进行组织\n            + page       #页面级css目录\n        + img            #图片资源\n        - js             #JS脚本，按照page、components进行组织\n            + page       #页面级js目录\n        + view           #HTML模板\n    - dist               #webpack编译打包输出目录，无需建立目录可由webpack根据配置自动生成\n        + css\n        + js\n        + view\n    + node_modules       #所使用的nodejs模块\n    .gitignore           #忽略项\n    package.json         #项目配置\n    package-lock.json    #版本锁定，类似yarn\n    README.md            #项目说明\n```\n\n项目目录有个局限性，就是开发目录里`js`中固定需要`page`文件夹放置页面级的js逻辑，与`view`中的`.html`文件一一对应。\n\n# 开发\n\n在src/js/page目录下建立index.js文件，在src/view目录下建立index.html文件。入口js和模板文件名对应。\n\nindex.js文件如下（这里已默认引入`zepto`，可直接使用`$`）：\n\n```javascript\nrequire(\"scss/variable.scss\");\n$(\".gb-body\").text(\"测试的一段话\");\n```\n\nindex.html 内容如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>测试首页</title>\n    <!--\n        描述：head中无需再引入css以及facicon，webpack将根据入口JS文件的要求自动实现按需加载或者生成style标签\n    -->\n</head>\n<body>\n    <div class=\"gb-body\"></div>\n    <!--\n        描述：body中同样无需单独引入JS文件，webpack会根据入口JS文件自动实现按需加载或者生成script标签，还可以生成对应的hash值\n    -->\n</body>\n</html>\n```\n\n# webpack配置\n\nwebpack配置`base.js`如下：\n\n```javascript\nconst path = require('path')                                                // 引入node模块，获取路径\nconst cwd = process.cwd()                                                   // 当前Node.js进程执行时的工作目录\nconst webpack = require('webpack')                                          // 引入webpack\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\")            // 分离css\nconst getEntry = require('./util/getEntry.js')\nconst getHtml = require('./util/getHtml.js')\n\nconst entryList = getEntry(path.resolve(cwd, 'src/js/page/**/*.js'))        // 获取入口文件配置\nconst htmlPluginList = getHtml(path.resolve(cwd, 'src/view/**/*.html'))     // 生成html配置\nconst chunksList = Object.keys(entryList)                                   // 获取公共代码列表\n\n// 抽取公共模块\nconst chunkPlugin = new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendors',\n    chunks: chunksList,\n    minChunks: chunksList.length\n})\n// 分离css配置\nconst extractPlugin = new ExtractTextPlugin({\n    filename: 'css/[name].[contenthash].css',\n    disable: process.env.NODE_ENV === \"development\"\n})\nconst plugins = [\n    // 自动加载模块\n    new webpack.ProvidePlugin({\n        $: 'zepto'\n    }),\n    extractPlugin,\n    chunkPlugin\n].concat(htmlPluginList)\n\n\nmodule.exports = {\n    // 入口\n    entry: entryList,\n    // 输出目录\n    output: {\n        path: path.resolve(cwd, './dist'),\n        filename: 'js/[name].js',\n        chunkFilename: 'js/[id].chunk.js'\n    },\n    // 解析别名\n    resolve: {\n        extensions: ['.js','.json'],\n        alias: {\n            '@': path.join(cwd, 'src'),\n            'css': path.join(cwd, 'src/css'),\n            'scss': path.join(cwd, 'src/scss'),\n            'js': path.join(cwd, 'src/js')\n        }\n    },\n    module: {\n        rules: [\n            // 处理html文件url\n            {\n                test: /\\.(html)$/,\n                use: {\n                    loader: 'html-loader',\n                    options: {\n                        attrs: [':data-src']\n                    }\n                }\n            },\n            // 处理css文件\n            {\n                test: /\\.css$/,\n                use: extractPlugin.extract({\n                    use: 'css-loader',\n                    fallback: 'style-loader'\n                })\n            },\n            // 处理scss文件\n            {\n                test: /\\.scss$/,\n                use: extractPlugin.extract({\n                    use: ['css-loader','sass-loader'],\n                    fallback: 'style-loader'\n                })\n            },\n            // es6转译\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['babel-preset-env']\n                    }\n                }\n            },\n            // 图片加载器，雷同file-loader，更适合图片，可以将较小的图片转成base64，减少http请求\n            // 如下配置，将小于8192byte的图片转成base64码\n            {\n                test: /\\.(png|jpg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 8192,\n                        name: './img/[hash].[ext]'\n                    }\n                }\n            },\n            // 处理字体文件\n            {\n                test: /\\.(woff|woff2|ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n                use: {\n                    loader: 'file-loader',\n                    options: {\n                        name: './fonts/[name].[ext]'\n                    }\n                }\n            },\n            // exports-loader模块化zepto\n            // https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\n            {\n                test: require.resolve('zepto'),\n                use: ['exports-loader?window.Zepto','script-loader']\n            }\n        ]\n    },\n    plugins: plugins\n}\n```\n\nwebpack开发配置`dev.js`如下：\n\n```javascript\nconst webpack = require('webpack')                                    // webpack\nconst merge = require('webpack-merge')                                // 合并插件\nconst config = require('./base.js')                                   // 基础配置\n\nmodule.exports = merge(config, {\n    devtool: 'inline-source-map',\n    devServer: {                                                      // 热更新\n        contentBase: './src',                                         // 基于哪个目录\n        host: 'localhost',\n        port: 9090,\n        inline: true,\n        hot: true                                                     // 热启动\n    },\n    plugins: [\n        new webpack.NamedModulesPlugin(),                             // 当开启HMR的时候使用该插件会显示模块的相对路径\n        new webpack.HotModuleReplacementPlugin()                      // 模块热替换插件\n    ]\n});\n```\n\nwebpack开发配置`pro.js`如下：\n\n```javascript\nconst path = require('path')\nconst cwd = process.cwd()\nconst merge = require('webpack-merge')\nconst config = require('./base.js')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')               // 拷贝资源插件\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin')              // 压缩js插件\nconst CleanWebpackPlugin = require('clean-webpack-plugin')             // 清理文件插件\n\nmodule.exports = merge(config, {\n    plugins: [\n        new CleanWebpackPlugin(['dist','build','dist/img'],{\n            root: cwd,\n            verbose: true\n        }),\n        new UglifyJSPlugin(),\n        new CopyWebpackPlugin([                                         // 复制图片文件夹\n            {\n                from: path.join(cwd, 'src/img'),\n                to: path.join(cwd, 'dist/img')\n            }\n        ])\n    ]\n});\n```\n\n## 根据模式匹配获取文件列表\n\n结合[《基于webpack的前端工程化开发之多页站点篇（一）》](https://segmentfault.com/a/1190000004511992)和[《基于webpack的前端工程化开发之多页站点篇（二）》](https://segmentfault.com/a/1190000004516832)这两篇文章，应该很容易完成配置，但是我也发现一个问题，就是在`view`配置多级目录的时候类似`view/question/question.html`，打包配置会出问题，就仅局限于当前目录。\n\n于是参考了[kisnows 抹桥](https://github.com/kisnows)的[Spart](https://github.com/kisnows/spart)项目webpack配置，对入口和html生成配置做了调整。\n\n`getEntry.js`如下：\n```javascript\nconst glob = require('glob')\nconst path = require('path')\nconst cwd = process.cwd()\n\nmodule.exports = function(jsPath){\n    const entrys = {}\n    const entryFiles = glob.sync(jsPath)\n    const reg = /src\\/(\\S+)$/\n    const fileReg = /src\\/js\\/(\\S+).js$/\n    entryFiles.forEach((v) => {\n      const pathname = v.match(reg)[1]\n      const filename = v.match(fileReg)[1]\n      entrys[filename] = `./src/${pathname}`\n    })\n    return entrys\n}\n```\n\n`getEntry.js`输出结果如下（举个栗子）：\n```javascript\n{\n    'page/about': './src/js/page/about.js',\n    'page/index': './src/js/page/index.js',\n    'page/question/question': './src/js/page/question/question.js'\n}\n```\n\n`getHtml.js`如下：\n```javascript\nconst glob = require('glob')\nconst path = require('path')\nconst cwd = process.cwd()\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = function (htmlPath){\n    const pluginList = []\n    const htmlFileList = glob.sync(htmlPath)\n    const reg = /src\\/(\\S+)$/\n    const fileReg = /src\\/view\\/(\\S+).html$/\n    htmlFileList.forEach((v)=>{\n        const pathname = v.match(reg)[1]\n        const filename = path.basename(v, path.extname(v))\n        const shortname = v.match(fileReg)[1]\n        pluginList.push(\n            new HtmlWebpackPlugin({\n                filename: `${pathname}`,\n                template: `./src/${pathname}`,\n                inject: 'body',\n                chunks: ['vendors', `page/${shortname}`],\n                hash: false,\n                minify: process.env.NODE_ENV !== 'production' ? false : {\n                  removeAttributeQuotes: true,\n                  removeComments: true,\n                  collapseWhitespace: true,\n                  html5: true,\n                  minifyCSS: true\n                }\n            })\n        )\n    })\n    return pluginList\n}\n```\n\n`getHtml.js`输出结果如下（举个栗子）:\n```javascript\n[\n    {\n        filename: 'view/about.html',\n        template: './src/view/about.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/about' ],\n        hash: false,\n        minify: false\n    },\n    {\n        filename: 'view/index.html',\n        template: './src/view/index.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/index' ],\n        hash: false,\n        minify: false\n    },\n    {\n        filename: 'view/question/question.html',\n        template: './src/view/question/question.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/question/question' ],\n        hash: false,\n        minify: false\n    }\n]\n```\n\n## [如何在 webpack 中引入未模块化的库，如 Zepto](https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/)\n\n解决方法：\n\n```\n$ npm i -D script-loader exports-loader\n```\n\n引入script-loader与exports-loader，然后参考以上的配置\n\n\n## [NodeJs中process.cwd()与__dirname的区别](https://www.cnblogs.com/tim100/p/6590733.html)\n\n`process.cwd()` 是当前执行node命令时候的文件夹地址 ——工作目录，就是说 `process.cwd()` 返回的是当前Node.js进程执行时的工作目录\n\n`__dirname` 是被执行的js文件的地址 ——文件所在目录，等同于 `__filename` 的 `path.dirname()`\n\n\n# 参考\n\n> * [基于webpack的前端工程化开发之多页站点篇（一）](https://segmentfault.com/a/1190000004511992)\n> * [基于webpack的前端工程化开发之多页站点篇（二）](https://segmentfault.com/a/1190000004516832)\n> * [webpack概念](https://doc.webpack-china.org/concepts/)\n> * [sass](https://www.sass.hk/guide/)\n> * [NodeJs中process.cwd()与__dirname的区别](https://www.cnblogs.com/tim100/p/6590733.html)\n> * [如何在 webpack 中引入未模块化的库，如 Zepto](https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/)\n> * [抹桥的博客](https://blog.kisnows.com/archives/)\n\n\n# 结语\n\n其实在配置的过程中，有考虑到一个问题，就是后端童鞋不一定会用你这一套东西，就好像[@抹桥](https://github.com/kisnows)说的那样，感觉这是为了用 webpack 而用 webpack 的节奏，还不如直接用gulp来的方便。可能确实也可能如此，但后面又想一想，思路通了就做一下吧，不能总是半途而废，于是就有了这篇文章。\n\n配置的时候，参照了很多文章，自身水平有限，如有冒犯，请通知我！\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/webpack前端工程化多页面配置.md","raw":"---\ntitle: webpack前端工程化多页面配置\ndate: 2018-03-13 21:05:00\ncategories: webpack\ntags: [webpack,多页面,工程化]\n---\n\n\n\n# 前言\n\n平时工作中，公司项目没有做前后端分离，用的还是grunt+seajs比较旧的技术，基本是后端主导，前端只负责样式和效果，没办法有更多尝试。不过，前端技术日新月异，不能因为环境而局限自己想折腾的心，于是，在看过[《基于webpack的前端工程化开发之多页站点篇》](https://segmentfault.com/a/1190000004511992)这篇文章之后，开始尝试。\n\n# github地址\n\n[webpack-multiplepage前端工程化多页面配置](https://github.com/ChenXiaoMian/webpack-multiplepage)\n\n# 项目依赖\n\n`npm init` 初始化项目\n\n`npm install plugins --save-dev` 安装依赖\n\n`package.json` 依赖声明如下：\n```javascript\n\"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",                    // babel转译核心\n    \"babel-loader\": \"^7.1.2\",                   // webpack使用转换ES6\n    \"babel-preset-env\": \"^1.6.1\",               // 转码规则，按需转译\n    \"clean-webpack-plugin\": \"^0.1.18\",          // 清理文件\n    \"copy-webpack-plugin\": \"^4.5.0\",            // 复制文件\n    \"css-loader\": \"^0.28.9\",                    // 将css装载到js\n    \"exports-loader\": \"^0.7.0\",                 // 模块化，导出指定对象\n    \"extract-text-webpack-plugin\": \"^3.0.2\",    // 将css分离成文件\n    \"file-loader\": \"^1.1.11\",                   // 解析项目中的url引入\n    \"glob\": \"^7.1.2\",                           // 根据模式匹配获取文件列表的node模块\n    \"html-loader\": \"^0.5.5\",                    // 解析html文件的url\n    \"html-webpack-plugin\": \"^2.30.1\",           // 处理html文件\n    \"node-sass\": \"^4.7.2\",                      // 编译sass\n    \"sass-loader\": \"^6.0.7\",                    // 将sass文件编译成css\n    \"script-loader\": \"^0.7.2\",                  // 全局上下文执行一次 JS 脚本\n    \"style-loader\": \"^0.20.1\",                  // css插入到页面的style标签\n    \"uglifyjs-webpack-plugin\": \"^1.1.8\",        // 压缩js\n    \"url-loader\": \"^1.0.1\",                     // url-loader封装了file-loader，将小图片生成dataURl\n    \"webpack\": \"^3.9.1\",                        // webpack核心\n    \"webpack-dev-server\": \"^2.11.1\",            // 热更新服务\n    \"webpack-merge\": \"^4.1.1\"                   // 合并配置\n}\n```\n\n`npm run dev` 执行开发环境，点击进入`view`文件夹\n\n`npm run build` 执行打包发布\n\n# 目录结构\n\n```\n- website\n    - config             #webpack配置目录\n        - util           #入口文件逻辑\n        base.js          #基本配置\n        dev.js           #开发配置\n        pro.js           #发布配置\n    - src                #代码开发目录\n        - scss           #sass文件目录\n        - css            #css目录，按照页面（模块）、通用、第三方三个级别进行组织\n            + page       #页面级css目录\n        + img            #图片资源\n        - js             #JS脚本，按照page、components进行组织\n            + page       #页面级js目录\n        + view           #HTML模板\n    - dist               #webpack编译打包输出目录，无需建立目录可由webpack根据配置自动生成\n        + css\n        + js\n        + view\n    + node_modules       #所使用的nodejs模块\n    .gitignore           #忽略项\n    package.json         #项目配置\n    package-lock.json    #版本锁定，类似yarn\n    README.md            #项目说明\n```\n\n项目目录有个局限性，就是开发目录里`js`中固定需要`page`文件夹放置页面级的js逻辑，与`view`中的`.html`文件一一对应。\n\n# 开发\n\n在src/js/page目录下建立index.js文件，在src/view目录下建立index.html文件。入口js和模板文件名对应。\n\nindex.js文件如下（这里已默认引入`zepto`，可直接使用`$`）：\n\n```javascript\nrequire(\"scss/variable.scss\");\n$(\".gb-body\").text(\"测试的一段话\");\n```\n\nindex.html 内容如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>测试首页</title>\n    <!--\n        描述：head中无需再引入css以及facicon，webpack将根据入口JS文件的要求自动实现按需加载或者生成style标签\n    -->\n</head>\n<body>\n    <div class=\"gb-body\"></div>\n    <!--\n        描述：body中同样无需单独引入JS文件，webpack会根据入口JS文件自动实现按需加载或者生成script标签，还可以生成对应的hash值\n    -->\n</body>\n</html>\n```\n\n# webpack配置\n\nwebpack配置`base.js`如下：\n\n```javascript\nconst path = require('path')                                                // 引入node模块，获取路径\nconst cwd = process.cwd()                                                   // 当前Node.js进程执行时的工作目录\nconst webpack = require('webpack')                                          // 引入webpack\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\")            // 分离css\nconst getEntry = require('./util/getEntry.js')\nconst getHtml = require('./util/getHtml.js')\n\nconst entryList = getEntry(path.resolve(cwd, 'src/js/page/**/*.js'))        // 获取入口文件配置\nconst htmlPluginList = getHtml(path.resolve(cwd, 'src/view/**/*.html'))     // 生成html配置\nconst chunksList = Object.keys(entryList)                                   // 获取公共代码列表\n\n// 抽取公共模块\nconst chunkPlugin = new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendors',\n    chunks: chunksList,\n    minChunks: chunksList.length\n})\n// 分离css配置\nconst extractPlugin = new ExtractTextPlugin({\n    filename: 'css/[name].[contenthash].css',\n    disable: process.env.NODE_ENV === \"development\"\n})\nconst plugins = [\n    // 自动加载模块\n    new webpack.ProvidePlugin({\n        $: 'zepto'\n    }),\n    extractPlugin,\n    chunkPlugin\n].concat(htmlPluginList)\n\n\nmodule.exports = {\n    // 入口\n    entry: entryList,\n    // 输出目录\n    output: {\n        path: path.resolve(cwd, './dist'),\n        filename: 'js/[name].js',\n        chunkFilename: 'js/[id].chunk.js'\n    },\n    // 解析别名\n    resolve: {\n        extensions: ['.js','.json'],\n        alias: {\n            '@': path.join(cwd, 'src'),\n            'css': path.join(cwd, 'src/css'),\n            'scss': path.join(cwd, 'src/scss'),\n            'js': path.join(cwd, 'src/js')\n        }\n    },\n    module: {\n        rules: [\n            // 处理html文件url\n            {\n                test: /\\.(html)$/,\n                use: {\n                    loader: 'html-loader',\n                    options: {\n                        attrs: [':data-src']\n                    }\n                }\n            },\n            // 处理css文件\n            {\n                test: /\\.css$/,\n                use: extractPlugin.extract({\n                    use: 'css-loader',\n                    fallback: 'style-loader'\n                })\n            },\n            // 处理scss文件\n            {\n                test: /\\.scss$/,\n                use: extractPlugin.extract({\n                    use: ['css-loader','sass-loader'],\n                    fallback: 'style-loader'\n                })\n            },\n            // es6转译\n            {\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['babel-preset-env']\n                    }\n                }\n            },\n            // 图片加载器，雷同file-loader，更适合图片，可以将较小的图片转成base64，减少http请求\n            // 如下配置，将小于8192byte的图片转成base64码\n            {\n                test: /\\.(png|jpg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        limit: 8192,\n                        name: './img/[hash].[ext]'\n                    }\n                }\n            },\n            // 处理字体文件\n            {\n                test: /\\.(woff|woff2|ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n                use: {\n                    loader: 'file-loader',\n                    options: {\n                        name: './fonts/[name].[ext]'\n                    }\n                }\n            },\n            // exports-loader模块化zepto\n            // https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\n            {\n                test: require.resolve('zepto'),\n                use: ['exports-loader?window.Zepto','script-loader']\n            }\n        ]\n    },\n    plugins: plugins\n}\n```\n\nwebpack开发配置`dev.js`如下：\n\n```javascript\nconst webpack = require('webpack')                                    // webpack\nconst merge = require('webpack-merge')                                // 合并插件\nconst config = require('./base.js')                                   // 基础配置\n\nmodule.exports = merge(config, {\n    devtool: 'inline-source-map',\n    devServer: {                                                      // 热更新\n        contentBase: './src',                                         // 基于哪个目录\n        host: 'localhost',\n        port: 9090,\n        inline: true,\n        hot: true                                                     // 热启动\n    },\n    plugins: [\n        new webpack.NamedModulesPlugin(),                             // 当开启HMR的时候使用该插件会显示模块的相对路径\n        new webpack.HotModuleReplacementPlugin()                      // 模块热替换插件\n    ]\n});\n```\n\nwebpack开发配置`pro.js`如下：\n\n```javascript\nconst path = require('path')\nconst cwd = process.cwd()\nconst merge = require('webpack-merge')\nconst config = require('./base.js')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')               // 拷贝资源插件\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin')              // 压缩js插件\nconst CleanWebpackPlugin = require('clean-webpack-plugin')             // 清理文件插件\n\nmodule.exports = merge(config, {\n    plugins: [\n        new CleanWebpackPlugin(['dist','build','dist/img'],{\n            root: cwd,\n            verbose: true\n        }),\n        new UglifyJSPlugin(),\n        new CopyWebpackPlugin([                                         // 复制图片文件夹\n            {\n                from: path.join(cwd, 'src/img'),\n                to: path.join(cwd, 'dist/img')\n            }\n        ])\n    ]\n});\n```\n\n## 根据模式匹配获取文件列表\n\n结合[《基于webpack的前端工程化开发之多页站点篇（一）》](https://segmentfault.com/a/1190000004511992)和[《基于webpack的前端工程化开发之多页站点篇（二）》](https://segmentfault.com/a/1190000004516832)这两篇文章，应该很容易完成配置，但是我也发现一个问题，就是在`view`配置多级目录的时候类似`view/question/question.html`，打包配置会出问题，就仅局限于当前目录。\n\n于是参考了[kisnows 抹桥](https://github.com/kisnows)的[Spart](https://github.com/kisnows/spart)项目webpack配置，对入口和html生成配置做了调整。\n\n`getEntry.js`如下：\n```javascript\nconst glob = require('glob')\nconst path = require('path')\nconst cwd = process.cwd()\n\nmodule.exports = function(jsPath){\n    const entrys = {}\n    const entryFiles = glob.sync(jsPath)\n    const reg = /src\\/(\\S+)$/\n    const fileReg = /src\\/js\\/(\\S+).js$/\n    entryFiles.forEach((v) => {\n      const pathname = v.match(reg)[1]\n      const filename = v.match(fileReg)[1]\n      entrys[filename] = `./src/${pathname}`\n    })\n    return entrys\n}\n```\n\n`getEntry.js`输出结果如下（举个栗子）：\n```javascript\n{\n    'page/about': './src/js/page/about.js',\n    'page/index': './src/js/page/index.js',\n    'page/question/question': './src/js/page/question/question.js'\n}\n```\n\n`getHtml.js`如下：\n```javascript\nconst glob = require('glob')\nconst path = require('path')\nconst cwd = process.cwd()\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = function (htmlPath){\n    const pluginList = []\n    const htmlFileList = glob.sync(htmlPath)\n    const reg = /src\\/(\\S+)$/\n    const fileReg = /src\\/view\\/(\\S+).html$/\n    htmlFileList.forEach((v)=>{\n        const pathname = v.match(reg)[1]\n        const filename = path.basename(v, path.extname(v))\n        const shortname = v.match(fileReg)[1]\n        pluginList.push(\n            new HtmlWebpackPlugin({\n                filename: `${pathname}`,\n                template: `./src/${pathname}`,\n                inject: 'body',\n                chunks: ['vendors', `page/${shortname}`],\n                hash: false,\n                minify: process.env.NODE_ENV !== 'production' ? false : {\n                  removeAttributeQuotes: true,\n                  removeComments: true,\n                  collapseWhitespace: true,\n                  html5: true,\n                  minifyCSS: true\n                }\n            })\n        )\n    })\n    return pluginList\n}\n```\n\n`getHtml.js`输出结果如下（举个栗子）:\n```javascript\n[\n    {\n        filename: 'view/about.html',\n        template: './src/view/about.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/about' ],\n        hash: false,\n        minify: false\n    },\n    {\n        filename: 'view/index.html',\n        template: './src/view/index.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/index' ],\n        hash: false,\n        minify: false\n    },\n    {\n        filename: 'view/question/question.html',\n        template: './src/view/question/question.html',\n        inject: 'body',\n        chunks: [ 'page/vendors', 'page/question/question' ],\n        hash: false,\n        minify: false\n    }\n]\n```\n\n## [如何在 webpack 中引入未模块化的库，如 Zepto](https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/)\n\n解决方法：\n\n```\n$ npm i -D script-loader exports-loader\n```\n\n引入script-loader与exports-loader，然后参考以上的配置\n\n\n## [NodeJs中process.cwd()与__dirname的区别](https://www.cnblogs.com/tim100/p/6590733.html)\n\n`process.cwd()` 是当前执行node命令时候的文件夹地址 ——工作目录，就是说 `process.cwd()` 返回的是当前Node.js进程执行时的工作目录\n\n`__dirname` 是被执行的js文件的地址 ——文件所在目录，等同于 `__filename` 的 `path.dirname()`\n\n\n# 参考\n\n> * [基于webpack的前端工程化开发之多页站点篇（一）](https://segmentfault.com/a/1190000004511992)\n> * [基于webpack的前端工程化开发之多页站点篇（二）](https://segmentfault.com/a/1190000004516832)\n> * [webpack概念](https://doc.webpack-china.org/concepts/)\n> * [sass](https://www.sass.hk/guide/)\n> * [NodeJs中process.cwd()与__dirname的区别](https://www.cnblogs.com/tim100/p/6590733.html)\n> * [如何在 webpack 中引入未模块化的库，如 Zepto](https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/)\n> * [抹桥的博客](https://blog.kisnows.com/archives/)\n\n\n# 结语\n\n其实在配置的过程中，有考虑到一个问题，就是后端童鞋不一定会用你这一套东西，就好像[@抹桥](https://github.com/kisnows)说的那样，感觉这是为了用 webpack 而用 webpack 的节奏，还不如直接用gulp来的方便。可能确实也可能如此，但后面又想一想，思路通了就做一下吧，不能总是半途而废，于是就有了这篇文章。\n\n配置的时候，参照了很多文章，自身水平有限，如有冒犯，请通知我！\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"webpack前端工程化多页面配置","published":1,"updated":"2018-04-09T15:05:40.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g90002ffc92bopp8goo","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>平时工作中，公司项目没有做前后端分离，用的还是grunt+seajs比较旧的技术，基本是后端主导，前端只负责样式和效果，没办法有更多尝试。不过，前端技术日新月异，不能因为环境而局限自己想折腾的心，于是，在看过<a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇》</a>这篇文章之后，开始尝试。</p>\n<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/webpack-multiplepage\" target=\"_blank\" rel=\"noopener\">webpack-multiplepage前端工程化多页面配置</a></p>\n<h1 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h1><p><code>npm init</code> 初始化项目</p>\n<p><code>npm install plugins --save-dev</code> 安装依赖</p>\n<p><code>package.json</code> 依赖声明如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,                    <span class=\"comment\">// babel转译核心</span></span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,                   <span class=\"comment\">// webpack使用转换ES6</span></span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.1\"</span>,               <span class=\"comment\">// 转码规则，按需转译</span></span><br><span class=\"line\">    <span class=\"string\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.18\"</span>,          <span class=\"comment\">// 清理文件</span></span><br><span class=\"line\">    <span class=\"string\">\"copy-webpack-plugin\"</span>: <span class=\"string\">\"^4.5.0\"</span>,            <span class=\"comment\">// 复制文件</span></span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.9\"</span>,                    <span class=\"comment\">// 将css装载到js</span></span><br><span class=\"line\">    <span class=\"string\">\"exports-loader\"</span>: <span class=\"string\">\"^0.7.0\"</span>,                 <span class=\"comment\">// 模块化，导出指定对象</span></span><br><span class=\"line\">    <span class=\"string\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^3.0.2\"</span>,    <span class=\"comment\">// 将css分离成文件</span></span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.11\"</span>,                   <span class=\"comment\">// 解析项目中的url引入</span></span><br><span class=\"line\">    <span class=\"string\">\"glob\"</span>: <span class=\"string\">\"^7.1.2\"</span>,                           <span class=\"comment\">// 根据模式匹配获取文件列表的node模块</span></span><br><span class=\"line\">    <span class=\"string\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,                    <span class=\"comment\">// 解析html文件的url</span></span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,           <span class=\"comment\">// 处理html文件</span></span><br><span class=\"line\">    <span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^4.7.2\"</span>,                      <span class=\"comment\">// 编译sass</span></span><br><span class=\"line\">    <span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.7\"</span>,                    <span class=\"comment\">// 将sass文件编译成css</span></span><br><span class=\"line\">    <span class=\"string\">\"script-loader\"</span>: <span class=\"string\">\"^0.7.2\"</span>,                  <span class=\"comment\">// 全局上下文执行一次 JS 脚本</span></span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.20.1\"</span>,                  <span class=\"comment\">// css插入到页面的style标签</span></span><br><span class=\"line\">    <span class=\"string\">\"uglifyjs-webpack-plugin\"</span>: <span class=\"string\">\"^1.1.8\"</span>,        <span class=\"comment\">// 压缩js</span></span><br><span class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^1.0.1\"</span>,                     <span class=\"comment\">// url-loader封装了file-loader，将小图片生成dataURl</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.9.1\"</span>,                        <span class=\"comment\">// webpack核心</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.11.1\"</span>,            <span class=\"comment\">// 热更新服务</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^4.1.1\"</span>                   <span class=\"comment\">// 合并配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>npm run dev</code> 执行开发环境，点击进入<code>view</code>文件夹</p>\n<p><code>npm run build</code> 执行打包发布</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">- website</span><br><span class=\"line\">    - config             #webpack配置目录</span><br><span class=\"line\">        - util           #入口文件逻辑</span><br><span class=\"line\">        base.js          #基本配置</span><br><span class=\"line\">        dev.js           #开发配置</span><br><span class=\"line\">        pro.js           #发布配置</span><br><span class=\"line\">    - src                #代码开发目录</span><br><span class=\"line\">        - scss           #sass文件目录</span><br><span class=\"line\">        - css            #css目录，按照页面（模块）、通用、第三方三个级别进行组织</span><br><span class=\"line\">            + page       #页面级css目录</span><br><span class=\"line\">        + img            #图片资源</span><br><span class=\"line\">        - js             #JS脚本，按照page、components进行组织</span><br><span class=\"line\">            + page       #页面级js目录</span><br><span class=\"line\">        + view           #HTML模板</span><br><span class=\"line\">    - dist               #webpack编译打包输出目录，无需建立目录可由webpack根据配置自动生成</span><br><span class=\"line\">        + css</span><br><span class=\"line\">        + js</span><br><span class=\"line\">        + view</span><br><span class=\"line\">    + node_modules       #所使用的nodejs模块</span><br><span class=\"line\">    .gitignore           #忽略项</span><br><span class=\"line\">    package.json         #项目配置</span><br><span class=\"line\">    package-lock.json    #版本锁定，类似yarn</span><br><span class=\"line\">    README.md            #项目说明</span><br></pre></td></tr></table></figure>\n<p>项目目录有个局限性，就是开发目录里<code>js</code>中固定需要<code>page</code>文件夹放置页面级的js逻辑，与<code>view</code>中的<code>.html</code>文件一一对应。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><p>在src/js/page目录下建立index.js文件，在src/view目录下建立index.html文件。入口js和模板文件名对应。</p>\n<p>index.js文件如下（这里已默认引入<code>zepto</code>，可直接使用<code>$</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"scss/variable.scss\"</span>);</span><br><span class=\"line\">$(<span class=\"string\">\".gb-body\"</span>).text(<span class=\"string\">\"测试的一段话\"</span>);</span><br></pre></td></tr></table></figure>\n<p>index.html 内容如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>测试首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        描述：head中无需再引入css以及facicon，webpack将根据入口JS文件的要求自动实现按需加载或者生成style标签</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gb-body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        描述：body中同样无需单独引入JS文件，webpack会根据入口JS文件自动实现按需加载或者生成script标签，还可以生成对应的hash值</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h1><p>webpack配置<code>base.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)                                                <span class=\"comment\">// 引入node模块，获取路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()                                                   <span class=\"comment\">// 当前Node.js进程执行时的工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)                                          <span class=\"comment\">// 引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>)            <span class=\"comment\">// 分离css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getEntry = <span class=\"built_in\">require</span>(<span class=\"string\">'./util/getEntry.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> getHtml = <span class=\"built_in\">require</span>(<span class=\"string\">'./util/getHtml.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> entryList = getEntry(path.resolve(cwd, <span class=\"string\">'src/js/page/**/*.js'</span>))        <span class=\"comment\">// 获取入口文件配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlPluginList = getHtml(path.resolve(cwd, <span class=\"string\">'src/view/**/*.html'</span>))     <span class=\"comment\">// 生成html配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunksList = <span class=\"built_in\">Object</span>.keys(entryList)                                   <span class=\"comment\">// 获取公共代码列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽取公共模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunkPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'vendors'</span>,</span><br><span class=\"line\">    chunks: chunksList,</span><br><span class=\"line\">    minChunks: chunksList.length</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 分离css配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractPlugin = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'css/[name].[contenthash].css'</span>,</span><br><span class=\"line\">    disable: process.env.NODE_ENV === <span class=\"string\">\"development\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> plugins = [</span><br><span class=\"line\">    <span class=\"comment\">// 自动加载模块</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $: <span class=\"string\">'zepto'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    extractPlugin,</span><br><span class=\"line\">    chunkPlugin</span><br><span class=\"line\">].concat(htmlPluginList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    entry: entryList,</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(cwd, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'js/[name].js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'js/[id].chunk.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 解析别名</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>],</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'@'</span>: path.join(cwd, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            <span class=\"string\">'css'</span>: path.join(cwd, <span class=\"string\">'src/css'</span>),</span><br><span class=\"line\">            <span class=\"string\">'scss'</span>: path.join(cwd, <span class=\"string\">'src/scss'</span>),</span><br><span class=\"line\">            <span class=\"string\">'js'</span>: path.join(cwd, <span class=\"string\">'src/js'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 处理html文件url</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(html)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        attrs: [<span class=\"string\">':data-src'</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理css文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: extractPlugin.extract(&#123;</span><br><span class=\"line\">                    use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    fallback: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理scss文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">                use: extractPlugin.extract(&#123;</span><br><span class=\"line\">                    use: [<span class=\"string\">'css-loader'</span>,<span class=\"string\">'sass-loader'</span>],</span><br><span class=\"line\">                    fallback: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// es6转译</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [<span class=\"string\">'babel-preset-env'</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 图片加载器，雷同file-loader，更适合图片，可以将较小的图片转成base64，减少http请求</span></span><br><span class=\"line\">            <span class=\"comment\">// 如下配置，将小于8192byte的图片转成base64码</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        limit: <span class=\"number\">8192</span>,</span><br><span class=\"line\">                        name: <span class=\"string\">'./img/[hash].[ext]'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理字体文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(woff|woff2|ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'./fonts/[name].[ext]'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// exports-loader模块化zepto</span></span><br><span class=\"line\">            <span class=\"comment\">// https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'zepto'</span>),</span><br><span class=\"line\">                use: [<span class=\"string\">'exports-loader?window.Zepto'</span>,<span class=\"string\">'script-loader'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: plugins</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack开发配置<code>dev.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)                                    <span class=\"comment\">// webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)                                <span class=\"comment\">// 合并插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./base.js'</span>)                                   <span class=\"comment\">// 基础配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(config, &#123;</span><br><span class=\"line\">    devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">    devServer: &#123;                                                      <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">        contentBase: <span class=\"string\">'./src'</span>,                                         <span class=\"comment\">// 基于哪个目录</span></span><br><span class=\"line\">        host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        port: <span class=\"number\">9090</span>,</span><br><span class=\"line\">        inline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        hot: <span class=\"literal\">true</span>                                                     <span class=\"comment\">// 热启动</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),                             <span class=\"comment\">// 当开启HMR的时候使用该插件会显示模块的相对路径</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()                      <span class=\"comment\">// 模块热替换插件</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>webpack开发配置<code>pro.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./base.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)               <span class=\"comment\">// 拷贝资源插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)              <span class=\"comment\">// 压缩js插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)             <span class=\"comment\">// 清理文件插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(config, &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>,<span class=\"string\">'build'</span>,<span class=\"string\">'dist/img'</span>],&#123;</span><br><span class=\"line\">            root: cwd,</span><br><span class=\"line\">            verbose: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UglifyJSPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CopyWebpackPlugin([                                         <span class=\"comment\">// 复制图片文件夹</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">from</span>: path.join(cwd, <span class=\"string\">'src/img'</span>),</span><br><span class=\"line\">                to: path.join(cwd, <span class=\"string\">'dist/img'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据模式匹配获取文件列表\"><a href=\"#根据模式匹配获取文件列表\" class=\"headerlink\" title=\"根据模式匹配获取文件列表\"></a>根据模式匹配获取文件列表</h2><p>结合<a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇（一）》</a>和<a href=\"https://segmentfault.com/a/1190000004516832\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇（二）》</a>这两篇文章，应该很容易完成配置，但是我也发现一个问题，就是在<code>view</code>配置多级目录的时候类似<code>view/question/question.html</code>，打包配置会出问题，就仅局限于当前目录。</p>\n<p>于是参考了<a href=\"https://github.com/kisnows\" target=\"_blank\" rel=\"noopener\">kisnows 抹桥</a>的<a href=\"https://github.com/kisnows/spart\" target=\"_blank\" rel=\"noopener\">Spart</a>项目webpack配置，对入口和html生成配置做了调整。</p>\n<p><code>getEntry.js</code>如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsPath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entrys = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(jsPath)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/src\\/(\\S+)$/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileReg = <span class=\"regexp\">/src\\/js\\/(\\S+).js$/</span></span><br><span class=\"line\">    entryFiles.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pathname = v.match(reg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> filename = v.match(fileReg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      entrys[filename] = <span class=\"string\">`./src/<span class=\"subst\">$&#123;pathname&#125;</span>`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> entrys</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getEntry.js</code>输出结果如下（举个栗子）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'page/about'</span>: <span class=\"string\">'./src/js/page/about.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'page/index'</span>: <span class=\"string\">'./src/js/page/index.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'page/question/question'</span>: <span class=\"string\">'./src/js/page/question/question.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getHtml.js</code>如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlPath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pluginList = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlFileList = glob.sync(htmlPath)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/src\\/(\\S+)$/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileReg = <span class=\"regexp\">/src\\/view\\/(\\S+).html$/</span></span><br><span class=\"line\">    htmlFileList.forEach(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pathname = v.match(reg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = path.basename(v, path.extname(v))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> shortname = v.match(fileReg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        pluginList.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                filename: <span class=\"string\">`<span class=\"subst\">$&#123;pathname&#125;</span>`</span>,</span><br><span class=\"line\">                template: <span class=\"string\">`./src/<span class=\"subst\">$&#123;pathname&#125;</span>`</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">                chunks: [<span class=\"string\">'vendors'</span>, <span class=\"string\">`page/<span class=\"subst\">$&#123;shortname&#125;</span>`</span>],</span><br><span class=\"line\">                hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                minify: process.env.NODE_ENV !== <span class=\"string\">'production'</span> ? <span class=\"literal\">false</span> : &#123;</span><br><span class=\"line\">                  removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  minifyCSS: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pluginList</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getHtml.js</code>输出结果如下（举个栗子）:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/about.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/about.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/about'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/index.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/index.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/index'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/question/question.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/question/question.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/question/question'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何在-webpack-中引入未模块化的库，如-Zepto\"><a href=\"#如何在-webpack-中引入未模块化的库，如-Zepto\" class=\"headerlink\" title=\"如何在 webpack 中引入未模块化的库，如 Zepto\"></a><a href=\"https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\" target=\"_blank\" rel=\"noopener\">如何在 webpack 中引入未模块化的库，如 Zepto</a></h2><p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm i -D script-loader exports-loader</span><br></pre></td></tr></table></figure>\n<p>引入script-loader与exports-loader，然后参考以上的配置</p>\n<h2 id=\"NodeJs中process-cwd-与-dirname的区别\"><a href=\"#NodeJs中process-cwd-与-dirname的区别\" class=\"headerlink\" title=\"NodeJs中process.cwd()与__dirname的区别\"></a><a href=\"https://www.cnblogs.com/tim100/p/6590733.html\" target=\"_blank\" rel=\"noopener\">NodeJs中process.cwd()与__dirname的区别</a></h2><p><code>process.cwd()</code> 是当前执行node命令时候的文件夹地址 ——工作目录，就是说 <code>process.cwd()</code> 返回的是当前Node.js进程执行时的工作目录</p>\n<p><code>__dirname</code> 是被执行的js文件的地址 ——文件所在目录，等同于 <code>__filename</code> 的 <code>path.dirname()</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">基于webpack的前端工程化开发之多页站点篇（一）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004516832\" target=\"_blank\" rel=\"noopener\">基于webpack的前端工程化开发之多页站点篇（二）</a></li>\n<li><a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack概念</a></li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a></li>\n<li><a href=\"https://www.cnblogs.com/tim100/p/6590733.html\" target=\"_blank\" rel=\"noopener\">NodeJs中process.cwd()与__dirname的区别</a></li>\n<li><a href=\"https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\" target=\"_blank\" rel=\"noopener\">如何在 webpack 中引入未模块化的库，如 Zepto</a></li>\n<li><a href=\"https://blog.kisnows.com/archives/\" target=\"_blank\" rel=\"noopener\">抹桥的博客</a></li>\n</ul>\n</blockquote>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>其实在配置的过程中，有考虑到一个问题，就是后端童鞋不一定会用你这一套东西，就好像<a href=\"https://github.com/kisnows\" target=\"_blank\" rel=\"noopener\">@抹桥</a>说的那样，感觉这是为了用 webpack 而用 webpack 的节奏，还不如直接用gulp来的方便。可能确实也可能如此，但后面又想一想，思路通了就做一下吧，不能总是半途而废，于是就有了这篇文章。</p>\n<p>配置的时候，参照了很多文章，自身水平有限，如有冒犯，请通知我！</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>平时工作中，公司项目没有做前后端分离，用的还是grunt+seajs比较旧的技术，基本是后端主导，前端只负责样式和效果，没办法有更多尝试。不过，前端技术日新月异，不能因为环境而局限自己想折腾的心，于是，在看过<a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇》</a>这篇文章之后，开始尝试。</p>\n<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/webpack-multiplepage\" target=\"_blank\" rel=\"noopener\">webpack-multiplepage前端工程化多页面配置</a></p>\n<h1 id=\"项目依赖\"><a href=\"#项目依赖\" class=\"headerlink\" title=\"项目依赖\"></a>项目依赖</h1><p><code>npm init</code> 初始化项目</p>\n<p><code>npm install plugins --save-dev</code> 安装依赖</p>\n<p><code>package.json</code> 依赖声明如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,                    <span class=\"comment\">// babel转译核心</span></span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,                   <span class=\"comment\">// webpack使用转换ES6</span></span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.1\"</span>,               <span class=\"comment\">// 转码规则，按需转译</span></span><br><span class=\"line\">    <span class=\"string\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.18\"</span>,          <span class=\"comment\">// 清理文件</span></span><br><span class=\"line\">    <span class=\"string\">\"copy-webpack-plugin\"</span>: <span class=\"string\">\"^4.5.0\"</span>,            <span class=\"comment\">// 复制文件</span></span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.9\"</span>,                    <span class=\"comment\">// 将css装载到js</span></span><br><span class=\"line\">    <span class=\"string\">\"exports-loader\"</span>: <span class=\"string\">\"^0.7.0\"</span>,                 <span class=\"comment\">// 模块化，导出指定对象</span></span><br><span class=\"line\">    <span class=\"string\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^3.0.2\"</span>,    <span class=\"comment\">// 将css分离成文件</span></span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.11\"</span>,                   <span class=\"comment\">// 解析项目中的url引入</span></span><br><span class=\"line\">    <span class=\"string\">\"glob\"</span>: <span class=\"string\">\"^7.1.2\"</span>,                           <span class=\"comment\">// 根据模式匹配获取文件列表的node模块</span></span><br><span class=\"line\">    <span class=\"string\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,                    <span class=\"comment\">// 解析html文件的url</span></span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,           <span class=\"comment\">// 处理html文件</span></span><br><span class=\"line\">    <span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^4.7.2\"</span>,                      <span class=\"comment\">// 编译sass</span></span><br><span class=\"line\">    <span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.7\"</span>,                    <span class=\"comment\">// 将sass文件编译成css</span></span><br><span class=\"line\">    <span class=\"string\">\"script-loader\"</span>: <span class=\"string\">\"^0.7.2\"</span>,                  <span class=\"comment\">// 全局上下文执行一次 JS 脚本</span></span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^0.20.1\"</span>,                  <span class=\"comment\">// css插入到页面的style标签</span></span><br><span class=\"line\">    <span class=\"string\">\"uglifyjs-webpack-plugin\"</span>: <span class=\"string\">\"^1.1.8\"</span>,        <span class=\"comment\">// 压缩js</span></span><br><span class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^1.0.1\"</span>,                     <span class=\"comment\">// url-loader封装了file-loader，将小图片生成dataURl</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.9.1\"</span>,                        <span class=\"comment\">// webpack核心</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.11.1\"</span>,            <span class=\"comment\">// 热更新服务</span></span><br><span class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^4.1.1\"</span>                   <span class=\"comment\">// 合并配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>npm run dev</code> 执行开发环境，点击进入<code>view</code>文件夹</p>\n<p><code>npm run build</code> 执行打包发布</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">- website</span><br><span class=\"line\">    - config             #webpack配置目录</span><br><span class=\"line\">        - util           #入口文件逻辑</span><br><span class=\"line\">        base.js          #基本配置</span><br><span class=\"line\">        dev.js           #开发配置</span><br><span class=\"line\">        pro.js           #发布配置</span><br><span class=\"line\">    - src                #代码开发目录</span><br><span class=\"line\">        - scss           #sass文件目录</span><br><span class=\"line\">        - css            #css目录，按照页面（模块）、通用、第三方三个级别进行组织</span><br><span class=\"line\">            + page       #页面级css目录</span><br><span class=\"line\">        + img            #图片资源</span><br><span class=\"line\">        - js             #JS脚本，按照page、components进行组织</span><br><span class=\"line\">            + page       #页面级js目录</span><br><span class=\"line\">        + view           #HTML模板</span><br><span class=\"line\">    - dist               #webpack编译打包输出目录，无需建立目录可由webpack根据配置自动生成</span><br><span class=\"line\">        + css</span><br><span class=\"line\">        + js</span><br><span class=\"line\">        + view</span><br><span class=\"line\">    + node_modules       #所使用的nodejs模块</span><br><span class=\"line\">    .gitignore           #忽略项</span><br><span class=\"line\">    package.json         #项目配置</span><br><span class=\"line\">    package-lock.json    #版本锁定，类似yarn</span><br><span class=\"line\">    README.md            #项目说明</span><br></pre></td></tr></table></figure>\n<p>项目目录有个局限性，就是开发目录里<code>js</code>中固定需要<code>page</code>文件夹放置页面级的js逻辑，与<code>view</code>中的<code>.html</code>文件一一对应。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><p>在src/js/page目录下建立index.js文件，在src/view目录下建立index.html文件。入口js和模板文件名对应。</p>\n<p>index.js文件如下（这里已默认引入<code>zepto</code>，可直接使用<code>$</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"scss/variable.scss\"</span>);</span><br><span class=\"line\">$(<span class=\"string\">\".gb-body\"</span>).text(<span class=\"string\">\"测试的一段话\"</span>);</span><br></pre></td></tr></table></figure>\n<p>index.html 内容如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>测试首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        描述：head中无需再引入css以及facicon，webpack将根据入口JS文件的要求自动实现按需加载或者生成style标签</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gb-body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        描述：body中同样无需单独引入JS文件，webpack会根据入口JS文件自动实现按需加载或者生成script标签，还可以生成对应的hash值</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h1><p>webpack配置<code>base.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)                                                <span class=\"comment\">// 引入node模块，获取路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()                                                   <span class=\"comment\">// 当前Node.js进程执行时的工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)                                          <span class=\"comment\">// 引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>)            <span class=\"comment\">// 分离css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getEntry = <span class=\"built_in\">require</span>(<span class=\"string\">'./util/getEntry.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> getHtml = <span class=\"built_in\">require</span>(<span class=\"string\">'./util/getHtml.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> entryList = getEntry(path.resolve(cwd, <span class=\"string\">'src/js/page/**/*.js'</span>))        <span class=\"comment\">// 获取入口文件配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlPluginList = getHtml(path.resolve(cwd, <span class=\"string\">'src/view/**/*.html'</span>))     <span class=\"comment\">// 生成html配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunksList = <span class=\"built_in\">Object</span>.keys(entryList)                                   <span class=\"comment\">// 获取公共代码列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽取公共模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chunkPlugin = <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'vendors'</span>,</span><br><span class=\"line\">    chunks: chunksList,</span><br><span class=\"line\">    minChunks: chunksList.length</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 分离css配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractPlugin = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'css/[name].[contenthash].css'</span>,</span><br><span class=\"line\">    disable: process.env.NODE_ENV === <span class=\"string\">\"development\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> plugins = [</span><br><span class=\"line\">    <span class=\"comment\">// 自动加载模块</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $: <span class=\"string\">'zepto'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    extractPlugin,</span><br><span class=\"line\">    chunkPlugin</span><br><span class=\"line\">].concat(htmlPluginList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    entry: entryList,</span><br><span class=\"line\">    <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(cwd, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'js/[name].js'</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">'js/[id].chunk.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 解析别名</span></span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>],</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            <span class=\"string\">'@'</span>: path.join(cwd, <span class=\"string\">'src'</span>),</span><br><span class=\"line\">            <span class=\"string\">'css'</span>: path.join(cwd, <span class=\"string\">'src/css'</span>),</span><br><span class=\"line\">            <span class=\"string\">'scss'</span>: path.join(cwd, <span class=\"string\">'src/scss'</span>),</span><br><span class=\"line\">            <span class=\"string\">'js'</span>: path.join(cwd, <span class=\"string\">'src/js'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            <span class=\"comment\">// 处理html文件url</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(html)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        attrs: [<span class=\"string\">':data-src'</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理css文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                use: extractPlugin.extract(&#123;</span><br><span class=\"line\">                    use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">                    fallback: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理scss文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">                use: extractPlugin.extract(&#123;</span><br><span class=\"line\">                    use: [<span class=\"string\">'css-loader'</span>,<span class=\"string\">'sass-loader'</span>],</span><br><span class=\"line\">                    fallback: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// es6转译</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [<span class=\"string\">'babel-preset-env'</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 图片加载器，雷同file-loader，更适合图片，可以将较小的图片转成base64，减少http请求</span></span><br><span class=\"line\">            <span class=\"comment\">// 如下配置，将小于8192byte的图片转成base64码</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        limit: <span class=\"number\">8192</span>,</span><br><span class=\"line\">                        name: <span class=\"string\">'./img/[hash].[ext]'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 处理字体文件</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.(woff|woff2|ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'./fonts/[name].[ext]'</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// exports-loader模块化zepto</span></span><br><span class=\"line\">            <span class=\"comment\">// https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'zepto'</span>),</span><br><span class=\"line\">                use: [<span class=\"string\">'exports-loader?window.Zepto'</span>,<span class=\"string\">'script-loader'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: plugins</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack开发配置<code>dev.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)                                    <span class=\"comment\">// webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)                                <span class=\"comment\">// 合并插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./base.js'</span>)                                   <span class=\"comment\">// 基础配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(config, &#123;</span><br><span class=\"line\">    devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">    devServer: &#123;                                                      <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">        contentBase: <span class=\"string\">'./src'</span>,                                         <span class=\"comment\">// 基于哪个目录</span></span><br><span class=\"line\">        host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        port: <span class=\"number\">9090</span>,</span><br><span class=\"line\">        inline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        hot: <span class=\"literal\">true</span>                                                     <span class=\"comment\">// 热启动</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),                             <span class=\"comment\">// 当开启HMR的时候使用该插件会显示模块的相对路径</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()                      <span class=\"comment\">// 模块热替换插件</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>webpack开发配置<code>pro.js</code>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./base.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)               <span class=\"comment\">// 拷贝资源插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)              <span class=\"comment\">// 压缩js插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)             <span class=\"comment\">// 清理文件插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(config, &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>,<span class=\"string\">'build'</span>,<span class=\"string\">'dist/img'</span>],&#123;</span><br><span class=\"line\">            root: cwd,</span><br><span class=\"line\">            verbose: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UglifyJSPlugin(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CopyWebpackPlugin([                                         <span class=\"comment\">// 复制图片文件夹</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">from</span>: path.join(cwd, <span class=\"string\">'src/img'</span>),</span><br><span class=\"line\">                to: path.join(cwd, <span class=\"string\">'dist/img'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据模式匹配获取文件列表\"><a href=\"#根据模式匹配获取文件列表\" class=\"headerlink\" title=\"根据模式匹配获取文件列表\"></a>根据模式匹配获取文件列表</h2><p>结合<a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇（一）》</a>和<a href=\"https://segmentfault.com/a/1190000004516832\" target=\"_blank\" rel=\"noopener\">《基于webpack的前端工程化开发之多页站点篇（二）》</a>这两篇文章，应该很容易完成配置，但是我也发现一个问题，就是在<code>view</code>配置多级目录的时候类似<code>view/question/question.html</code>，打包配置会出问题，就仅局限于当前目录。</p>\n<p>于是参考了<a href=\"https://github.com/kisnows\" target=\"_blank\" rel=\"noopener\">kisnows 抹桥</a>的<a href=\"https://github.com/kisnows/spart\" target=\"_blank\" rel=\"noopener\">Spart</a>项目webpack配置，对入口和html生成配置做了调整。</p>\n<p><code>getEntry.js</code>如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsPath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entrys = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entryFiles = glob.sync(jsPath)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/src\\/(\\S+)$/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileReg = <span class=\"regexp\">/src\\/js\\/(\\S+).js$/</span></span><br><span class=\"line\">    entryFiles.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pathname = v.match(reg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> filename = v.match(fileReg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">      entrys[filename] = <span class=\"string\">`./src/<span class=\"subst\">$&#123;pathname&#125;</span>`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> entrys</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getEntry.js</code>输出结果如下（举个栗子）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'page/about'</span>: <span class=\"string\">'./src/js/page/about.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'page/index'</span>: <span class=\"string\">'./src/js/page/index.js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'page/question/question'</span>: <span class=\"string\">'./src/js/page/question/question.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getHtml.js</code>如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cwd = process.cwd()</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">htmlPath</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pluginList = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlFileList = glob.sync(htmlPath)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/src\\/(\\S+)$/</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileReg = <span class=\"regexp\">/src\\/view\\/(\\S+).html$/</span></span><br><span class=\"line\">    htmlFileList.forEach(<span class=\"function\">(<span class=\"params\">v</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pathname = v.match(reg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = path.basename(v, path.extname(v))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> shortname = v.match(fileReg)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        pluginList.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                filename: <span class=\"string\">`<span class=\"subst\">$&#123;pathname&#125;</span>`</span>,</span><br><span class=\"line\">                template: <span class=\"string\">`./src/<span class=\"subst\">$&#123;pathname&#125;</span>`</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">                chunks: [<span class=\"string\">'vendors'</span>, <span class=\"string\">`page/<span class=\"subst\">$&#123;shortname&#125;</span>`</span>],</span><br><span class=\"line\">                hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                minify: process.env.NODE_ENV !== <span class=\"string\">'production'</span> ? <span class=\"literal\">false</span> : &#123;</span><br><span class=\"line\">                  removeAttributeQuotes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                  minifyCSS: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pluginList</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>getHtml.js</code>输出结果如下（举个栗子）:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/about.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/about.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/about'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/index.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/index.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/index'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'view/question/question.html'</span>,</span><br><span class=\"line\">        template: <span class=\"string\">'./src/view/question/question.html'</span>,</span><br><span class=\"line\">        inject: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">        chunks: [ <span class=\"string\">'page/vendors'</span>, <span class=\"string\">'page/question/question'</span> ],</span><br><span class=\"line\">        hash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        minify: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何在-webpack-中引入未模块化的库，如-Zepto\"><a href=\"#如何在-webpack-中引入未模块化的库，如-Zepto\" class=\"headerlink\" title=\"如何在 webpack 中引入未模块化的库，如 Zepto\"></a><a href=\"https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\" target=\"_blank\" rel=\"noopener\">如何在 webpack 中引入未模块化的库，如 Zepto</a></h2><p>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm i -D script-loader exports-loader</span><br></pre></td></tr></table></figure>\n<p>引入script-loader与exports-loader，然后参考以上的配置</p>\n<h2 id=\"NodeJs中process-cwd-与-dirname的区别\"><a href=\"#NodeJs中process-cwd-与-dirname的区别\" class=\"headerlink\" title=\"NodeJs中process.cwd()与__dirname的区别\"></a><a href=\"https://www.cnblogs.com/tim100/p/6590733.html\" target=\"_blank\" rel=\"noopener\">NodeJs中process.cwd()与__dirname的区别</a></h2><p><code>process.cwd()</code> 是当前执行node命令时候的文件夹地址 ——工作目录，就是说 <code>process.cwd()</code> 返回的是当前Node.js进程执行时的工作目录</p>\n<p><code>__dirname</code> 是被执行的js文件的地址 ——文件所在目录，等同于 <code>__filename</code> 的 <code>path.dirname()</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004511992\" target=\"_blank\" rel=\"noopener\">基于webpack的前端工程化开发之多页站点篇（一）</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004516832\" target=\"_blank\" rel=\"noopener\">基于webpack的前端工程化开发之多页站点篇（二）</a></li>\n<li><a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack概念</a></li>\n<li><a href=\"https://www.sass.hk/guide/\" target=\"_blank\" rel=\"noopener\">sass</a></li>\n<li><a href=\"https://www.cnblogs.com/tim100/p/6590733.html\" target=\"_blank\" rel=\"noopener\">NodeJs中process.cwd()与__dirname的区别</a></li>\n<li><a href=\"https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/\" target=\"_blank\" rel=\"noopener\">如何在 webpack 中引入未模块化的库，如 Zepto</a></li>\n<li><a href=\"https://blog.kisnows.com/archives/\" target=\"_blank\" rel=\"noopener\">抹桥的博客</a></li>\n</ul>\n</blockquote>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>其实在配置的过程中，有考虑到一个问题，就是后端童鞋不一定会用你这一套东西，就好像<a href=\"https://github.com/kisnows\" target=\"_blank\" rel=\"noopener\">@抹桥</a>说的那样，感觉这是为了用 webpack 而用 webpack 的节奏，还不如直接用gulp来的方便。可能确实也可能如此，但后面又想一想，思路通了就做一下吧，不能总是半途而废，于是就有了这篇文章。</p>\n<p>配置的时候，参照了很多文章，自身水平有限，如有冒犯，请通知我！</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"vue-music 移动端音乐webApp学习总结","date":"2018-02-01T16:00:00.000Z","_content":"\n# github地址\n\n[vue-music](https://github.com/ChenXiaoMian/vue-music)\n\n## 技术栈\n\n- [x] vue-cli脚手架(vue + vuex + vue router + es6)\n- [x] axios、jsonp\n- [x] better-scroll、lyric-parser\n- [x] vue-lazyload\n\n## 完成组件\n\n基础组件\n\n- [x] confirm：确认对话框组件\n- [x] listview：通讯录列表组件\n- [x] loading：加载态组件\n- [x] no-result：无结果展示组件\n- [x] progress-bar：进度条组件\n- [x] progress-circle：圆形进度条组件\n- [x] scroll：移动端滚动组件\n- [x] search-box：搜索框组件\n- [x] search-list：搜索列表组件\n- [x] slider：轮播图组件\n- [x] switches：开关切换组件\n- [x] top-tip：顶部消息提示组件\n- [x] song-list：歌曲列表组件\n\n业务组件\n\n- [x] add-song：添加歌曲到列表组件\n- [x] disc：歌单详情页组件\n- [x] m-header：页面头部组件\n- [x] music-list：歌曲列表页面组件\n- [x] player：播放器内核组件\n- [x] playlist：播放列表组件\n- [x] rank：排行榜页面组件\n- [x] recommend：推荐页面组件\n- [x] search：搜索页面组件\n- [x] singer：歌手页面组件\n- [x] singer-detail：歌手详情页组件\n- [x] suggest：搜索提示列表组件\n- [x] tab：顶部导航栏组件\n- [x] top-list：排行榜详情页组件\n- [x] user-center：用户中心页组件\n\n## 知识点整理\n\n### 前端如何独立解决跨域问题？\n\n解决跨域问题常用的解决方案有两个：\n\n* JSONP：利用script标签可跨域的特点，在跨域脚本中可以直接回调当前脚本的函数。\n* CORS：服务器设置HTTP响应头中Access-Control-Allow-Origin值，解除跨域限制。\n\n但是这两个跨域方案都存在一个致命的缺陷，严重依赖后端的协助。\n\n如何独立解决跨域问题？\n\n一般的做法是通过本地配置nginx反向代理进行处理的，除此之外，还可以通过nodejs来进行代理接口。\n\n#### JSONP原理及封装\n\n[jsonp原理](https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html)其实就是通过`<script>`标签`src`属性的跨域能力，在远程服务器上设法把数据装进json格式的文件里，供客户端调用和进一步处理，客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。\n\njsonp封装\n```javascript\n// npm install jsonp --save\nimport originJSONP from 'jsonp'\n\n// url拼接参数\nexport default function jsonp(url,data,option){\n    url += (url.indexOf('?') < 0 ? '?' : '&') + param(data);\n    // 返回promise对象\n    return new Promise((resolve,reject)=>{\n        originJSONP(url,option,(err,data)=>{\n            if(!err){\n                resolve(data);\n            }else{\n                reject(err);\n            }\n        })\n    })\n}\n// obj对象拼接成字符串\nfunction param(data){\n    let url = '';\n    for(var k in data){\n        let value = data[k] !== undefined ? data[k] : '';\n        url += `&${k}=${encodeURIComponent(value)}`;\n    }\n    return url ? url.substring(1) : ''\n}\n```\n\n#### nodejs代理接口\n\n请求数据遇到hosts和referer限制？前端是无法修改request.headers，因此可以通过nodejs手动代理请求。\n\n```javascript\nvar express = require('express');\nvar axios = require('axios');\n\nvar app = express();\nvar apiRoutes = express.Router();\n\napiRoutes.get('/getDiscList',function(req,res){\n  var url = 'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg';\n  axios.get(url,{\n    headers: {\n      referer: 'https://y.qq.com/portal/playlist.html',\n      host: 'y.qq.com'\n    },\n    params: req.query\n  }).then((response)=>{\n    res.json(response.data);\n  }).catch((e)=>{\n    console.log(e);\n  });\n});\n\napp.use('/api',apiRoutes);\n```\n\n参考：\n> * [nodejs服务实现反向代理，解决本地开发接口请求跨域问题](https://www.cnblogs.com/canfoo/p/6912306.html)\n> * [前端开发如何独立解决跨域问题](https://segmentfault.com/a/1190000010719058)\n\n### 通讯录组件右侧快速入口(数组排序)\n\n开发歌手列表的时候，需要按热门及字母的顺序来显示，右侧则需要一个快速入口的索引列表（类似通讯录）。思路就是先将歌手数据前10条添加到热门数组中，另外将剩余的数据按字母归类放置在各自的数组里，最后对字母进行排序操作。\n\n```javascript\n_normalizeSinger (list) {\n    let map = {\n        hot: {\n            title: HOT_NAME,\n            items: []\n        }\n    }\n    list.forEach((item,index)=>{\n    // 取前10条添加到热门数组\n    if(index < HOT_SINGER_LEN){\n        map.hot.items.push(new Singer({\n            id: item.Fsinger_mid,\n            name: item.Fsinger_name\n        }))\n    }\n    // 按字母归类\n    const key = item.Findex\n    if(!map[key]){\n        map[key] = {\n            title: key,\n            items: []\n        }\n    }\n    map[key].items.push(new Singer({\n        id: item.Fsinger_mid,\n        name: item.Fsinger_name\n    }))\n    })\n    // 处理map得到有序列表\n    let hot = [];\n    let ret = [];\n    for(let key in map){\n        let val = map[key]\n        if(val.title.match(/[a-zA-Z]/)){\n            ret.push(val)\n        }else if(val.title === HOT_NAME){\n            hot.push(val)\n        }\n    }\n    // 排序操作\n    ret.sort((a, b)=>{\n        return a.title.charCodeAt(0) - b.title.charCodeAt(0)\n    })\n\n    return hot.concat(ret);\n}\n```\n\n### 工厂模式运用（歌手数据，歌曲数据）\n\n歌手页面循环数据的时候，需要获取每个歌手的姓名，ID及头像，这时候就运用到工厂模式。歌曲数据类也一样，多了`getLyric()`处理歌词的原型继承方法。\n\n```javascript\n// singer.js\nexport default class Singer {\n    constructor({id, name}) {\n        this.id = id\n        this.name = name\n        this.avatar = `https://y.gtimg.cn/music/photo_new/T001R300x300M000${id}.jpg?max_age=2592000`\n    }\n}\n// song.js\nexport default class Song{\n    constructor({id,mid,singer,name,album,duration,image,url}){\n        this.id = id,\n        this.mid = mid,\n        this.singer = singer,\n        this.name = name,\n        this.album = album,\n        this.duration = duration,\n        this.image = image,\n        this.url = url\n    }\n    getLyric () {\n        if (this.lyric) {\n            return Promise.resolve(this.lyric)\n        }\n        return new Promise((resolve,reject)=>{\n            getLyric(this.mid).then((res)=>{\n                if(res.retcode === ERR_OK){\n                    this.lyric = Base64.decode(res.lyric)\n                    resolve(this.lyric)\n                }else{\n                    reject('no lyric')\n                }\n            })\n        })\n    }\n}\n```\n\n[constructor](http://es6.ruanyifeng.com/#docs/class#constructor-方法)方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\n```javascript\nclass Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。具体参照[Class 的基本语法](http://es6.ruanyifeng.com/#docs/class)\n\n\n### vue组件之间的通信（scroll组件为例）\n\n#### 子组件向父组件派生事件\n\n```javascript\n// 子组件\nimport BScroll from 'better-scroll'\nexport default {\n    props: {\n        probeType: {\n            type: Number,\n            default: 1\n        },\n        click: {\n            type: Boolean,\n            default: true\n        },\n        data: {\n            type: Array,\n            default: null\n        },\n        listenScroll: {\n            type: Boolean,\n            default: false\n        },\n        pullup: {\n            type: Boolean,\n            default: false\n        },\n        beforeScroll: {\n            type: Boolean,\n            default: false\n        },\n        refreshDelay: {\n            type: Number,\n            default: 20\n        }\n    },\n    mounted () {\n        setTimeout(() => {\n            this._initScroll()\n        },20)\n    },\n    methods: {\n        _initScroll () {\n            if(!this.$refs.wrapper){\n                return\n            }\n            this.scroll = new BScroll(this.$refs.wrapper,{\n                probeType: this.probeType,\n                click: this.click\n            })\n            if(this.listenScroll){\n                let me = this\n                this.scroll.on('scroll',(pos)=>{\n                    me.$emit('scroll',pos)\n                })\n            }\n            if(this.pullup){\n                this.scroll.on('scrollEnd',()=>{\n                    if(this.scroll.y <= (this.scroll.maxScrollY + 50)) {\n                        this.$emit('scrollToEnd')\n                    }\n                })\n            }\n            if(this.beforeScroll){\n                this.scroll.on('beforeScrollStart',()=>{\n                    this.$emit('beforeScroll')\n                })\n            }\n        },\n        enable () {\n            this.scroll && this.scroll.enable()\n        },\n        disable () {\n            this.scroll && this.scroll.disable()\n        },\n        refresh () {\n            this.scroll && this.scroll.refresh()\n        },\n        scrollTo () {\n            this.scroll && this.scroll.scrollTo.apply(this.scroll,arguments)\n        },\n        scrollToElement () {\n            this.scroll && this.scroll.scrollToElement.apply(this.scroll,arguments)\n        }\n    },\n    watch: {\n        data () {\n            setTimeout(()=>{\n                this.refresh()\n            },this.refreshDelay)\n        }\n    }\n}\n```\n```html\n<!-- 父组件 -->\n<scroll class=\"listview\" :data=\"data\" ref=\"listview\" :listenScroll=\"listenScroll\" @scroll=\"scroll\" :probeType=\"probeType\">\n<!-- ... -->\n</scroll>\n```\n\n#### 父组件调用子组件方法\n\n```javascript\nmethods: {\n    refresh () {\n        this.$refs.listview.refresh()\n    }\n}\n```\n\n## vscode+eslint用法\n\n不管是多人合作还是个人项目，代码规范是很重要的。这样做不仅可以很大程度地避免基本语法错误，也保证了代码的可读性。\n\n首先在vscode安装eslint插件，安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 > 首选项 > 设置 打开 VSCode 配置文件,添加如下配置\n\n```json\n{\n    \"workbench.colorTheme\": \"Default Light+\",\n    \"files.autoSave\":\"off\",\n    \"eslint.validate\": [\n       \"javascript\",\n       \"javascriptreact\",\n       \"html\",\n       { \"language\": \"vue\", \"autoFix\": true }\n     ],\n     \"eslint.options\": {\n        \"plugins\": [\"html\"]\n     },\n     // 这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。\n     \"eslint.autoFixOnSave\": true\n}\n```\n\n参考:\n\n> * [ESLint的用法](https://juejin.im/post/59097cd7a22b9d0065fb61d2#heading-8)\n> * [vscode插件和配置推荐](https://github.com/varHarrie/YmxvZw/issues/10)\n\n## 总结一下\n\n由于课程内容太多，很多细节也没法做记录，只记录了印象比较深刻的几个点，另外的部分只能等回头想起来或者用到的时候翻源码或者视频来巩固了。这门课让我收获了很多，感觉做起项目来思路也清晰了不少，特别是组件的拆分，vuex的使用，动画交互及很多工具类的写法。嗯，文采有限...\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","source":"_posts/vue-music 移动端音乐webApp学习总结.md","raw":"---\ntitle: vue-music 移动端音乐webApp学习总结\ndate: 2018-02-02\ncategories: vue\ntags: [vue,vuex,vue router,axios,jsonp]\n---\n\n# github地址\n\n[vue-music](https://github.com/ChenXiaoMian/vue-music)\n\n## 技术栈\n\n- [x] vue-cli脚手架(vue + vuex + vue router + es6)\n- [x] axios、jsonp\n- [x] better-scroll、lyric-parser\n- [x] vue-lazyload\n\n## 完成组件\n\n基础组件\n\n- [x] confirm：确认对话框组件\n- [x] listview：通讯录列表组件\n- [x] loading：加载态组件\n- [x] no-result：无结果展示组件\n- [x] progress-bar：进度条组件\n- [x] progress-circle：圆形进度条组件\n- [x] scroll：移动端滚动组件\n- [x] search-box：搜索框组件\n- [x] search-list：搜索列表组件\n- [x] slider：轮播图组件\n- [x] switches：开关切换组件\n- [x] top-tip：顶部消息提示组件\n- [x] song-list：歌曲列表组件\n\n业务组件\n\n- [x] add-song：添加歌曲到列表组件\n- [x] disc：歌单详情页组件\n- [x] m-header：页面头部组件\n- [x] music-list：歌曲列表页面组件\n- [x] player：播放器内核组件\n- [x] playlist：播放列表组件\n- [x] rank：排行榜页面组件\n- [x] recommend：推荐页面组件\n- [x] search：搜索页面组件\n- [x] singer：歌手页面组件\n- [x] singer-detail：歌手详情页组件\n- [x] suggest：搜索提示列表组件\n- [x] tab：顶部导航栏组件\n- [x] top-list：排行榜详情页组件\n- [x] user-center：用户中心页组件\n\n## 知识点整理\n\n### 前端如何独立解决跨域问题？\n\n解决跨域问题常用的解决方案有两个：\n\n* JSONP：利用script标签可跨域的特点，在跨域脚本中可以直接回调当前脚本的函数。\n* CORS：服务器设置HTTP响应头中Access-Control-Allow-Origin值，解除跨域限制。\n\n但是这两个跨域方案都存在一个致命的缺陷，严重依赖后端的协助。\n\n如何独立解决跨域问题？\n\n一般的做法是通过本地配置nginx反向代理进行处理的，除此之外，还可以通过nodejs来进行代理接口。\n\n#### JSONP原理及封装\n\n[jsonp原理](https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html)其实就是通过`<script>`标签`src`属性的跨域能力，在远程服务器上设法把数据装进json格式的文件里，供客户端调用和进一步处理，客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。\n\njsonp封装\n```javascript\n// npm install jsonp --save\nimport originJSONP from 'jsonp'\n\n// url拼接参数\nexport default function jsonp(url,data,option){\n    url += (url.indexOf('?') < 0 ? '?' : '&') + param(data);\n    // 返回promise对象\n    return new Promise((resolve,reject)=>{\n        originJSONP(url,option,(err,data)=>{\n            if(!err){\n                resolve(data);\n            }else{\n                reject(err);\n            }\n        })\n    })\n}\n// obj对象拼接成字符串\nfunction param(data){\n    let url = '';\n    for(var k in data){\n        let value = data[k] !== undefined ? data[k] : '';\n        url += `&${k}=${encodeURIComponent(value)}`;\n    }\n    return url ? url.substring(1) : ''\n}\n```\n\n#### nodejs代理接口\n\n请求数据遇到hosts和referer限制？前端是无法修改request.headers，因此可以通过nodejs手动代理请求。\n\n```javascript\nvar express = require('express');\nvar axios = require('axios');\n\nvar app = express();\nvar apiRoutes = express.Router();\n\napiRoutes.get('/getDiscList',function(req,res){\n  var url = 'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg';\n  axios.get(url,{\n    headers: {\n      referer: 'https://y.qq.com/portal/playlist.html',\n      host: 'y.qq.com'\n    },\n    params: req.query\n  }).then((response)=>{\n    res.json(response.data);\n  }).catch((e)=>{\n    console.log(e);\n  });\n});\n\napp.use('/api',apiRoutes);\n```\n\n参考：\n> * [nodejs服务实现反向代理，解决本地开发接口请求跨域问题](https://www.cnblogs.com/canfoo/p/6912306.html)\n> * [前端开发如何独立解决跨域问题](https://segmentfault.com/a/1190000010719058)\n\n### 通讯录组件右侧快速入口(数组排序)\n\n开发歌手列表的时候，需要按热门及字母的顺序来显示，右侧则需要一个快速入口的索引列表（类似通讯录）。思路就是先将歌手数据前10条添加到热门数组中，另外将剩余的数据按字母归类放置在各自的数组里，最后对字母进行排序操作。\n\n```javascript\n_normalizeSinger (list) {\n    let map = {\n        hot: {\n            title: HOT_NAME,\n            items: []\n        }\n    }\n    list.forEach((item,index)=>{\n    // 取前10条添加到热门数组\n    if(index < HOT_SINGER_LEN){\n        map.hot.items.push(new Singer({\n            id: item.Fsinger_mid,\n            name: item.Fsinger_name\n        }))\n    }\n    // 按字母归类\n    const key = item.Findex\n    if(!map[key]){\n        map[key] = {\n            title: key,\n            items: []\n        }\n    }\n    map[key].items.push(new Singer({\n        id: item.Fsinger_mid,\n        name: item.Fsinger_name\n    }))\n    })\n    // 处理map得到有序列表\n    let hot = [];\n    let ret = [];\n    for(let key in map){\n        let val = map[key]\n        if(val.title.match(/[a-zA-Z]/)){\n            ret.push(val)\n        }else if(val.title === HOT_NAME){\n            hot.push(val)\n        }\n    }\n    // 排序操作\n    ret.sort((a, b)=>{\n        return a.title.charCodeAt(0) - b.title.charCodeAt(0)\n    })\n\n    return hot.concat(ret);\n}\n```\n\n### 工厂模式运用（歌手数据，歌曲数据）\n\n歌手页面循环数据的时候，需要获取每个歌手的姓名，ID及头像，这时候就运用到工厂模式。歌曲数据类也一样，多了`getLyric()`处理歌词的原型继承方法。\n\n```javascript\n// singer.js\nexport default class Singer {\n    constructor({id, name}) {\n        this.id = id\n        this.name = name\n        this.avatar = `https://y.gtimg.cn/music/photo_new/T001R300x300M000${id}.jpg?max_age=2592000`\n    }\n}\n// song.js\nexport default class Song{\n    constructor({id,mid,singer,name,album,duration,image,url}){\n        this.id = id,\n        this.mid = mid,\n        this.singer = singer,\n        this.name = name,\n        this.album = album,\n        this.duration = duration,\n        this.image = image,\n        this.url = url\n    }\n    getLyric () {\n        if (this.lyric) {\n            return Promise.resolve(this.lyric)\n        }\n        return new Promise((resolve,reject)=>{\n            getLyric(this.mid).then((res)=>{\n                if(res.retcode === ERR_OK){\n                    this.lyric = Base64.decode(res.lyric)\n                    resolve(this.lyric)\n                }else{\n                    reject('no lyric')\n                }\n            })\n        })\n    }\n}\n```\n\n[constructor](http://es6.ruanyifeng.com/#docs/class#constructor-方法)方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。\n\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\n```javascript\nclass Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。具体参照[Class 的基本语法](http://es6.ruanyifeng.com/#docs/class)\n\n\n### vue组件之间的通信（scroll组件为例）\n\n#### 子组件向父组件派生事件\n\n```javascript\n// 子组件\nimport BScroll from 'better-scroll'\nexport default {\n    props: {\n        probeType: {\n            type: Number,\n            default: 1\n        },\n        click: {\n            type: Boolean,\n            default: true\n        },\n        data: {\n            type: Array,\n            default: null\n        },\n        listenScroll: {\n            type: Boolean,\n            default: false\n        },\n        pullup: {\n            type: Boolean,\n            default: false\n        },\n        beforeScroll: {\n            type: Boolean,\n            default: false\n        },\n        refreshDelay: {\n            type: Number,\n            default: 20\n        }\n    },\n    mounted () {\n        setTimeout(() => {\n            this._initScroll()\n        },20)\n    },\n    methods: {\n        _initScroll () {\n            if(!this.$refs.wrapper){\n                return\n            }\n            this.scroll = new BScroll(this.$refs.wrapper,{\n                probeType: this.probeType,\n                click: this.click\n            })\n            if(this.listenScroll){\n                let me = this\n                this.scroll.on('scroll',(pos)=>{\n                    me.$emit('scroll',pos)\n                })\n            }\n            if(this.pullup){\n                this.scroll.on('scrollEnd',()=>{\n                    if(this.scroll.y <= (this.scroll.maxScrollY + 50)) {\n                        this.$emit('scrollToEnd')\n                    }\n                })\n            }\n            if(this.beforeScroll){\n                this.scroll.on('beforeScrollStart',()=>{\n                    this.$emit('beforeScroll')\n                })\n            }\n        },\n        enable () {\n            this.scroll && this.scroll.enable()\n        },\n        disable () {\n            this.scroll && this.scroll.disable()\n        },\n        refresh () {\n            this.scroll && this.scroll.refresh()\n        },\n        scrollTo () {\n            this.scroll && this.scroll.scrollTo.apply(this.scroll,arguments)\n        },\n        scrollToElement () {\n            this.scroll && this.scroll.scrollToElement.apply(this.scroll,arguments)\n        }\n    },\n    watch: {\n        data () {\n            setTimeout(()=>{\n                this.refresh()\n            },this.refreshDelay)\n        }\n    }\n}\n```\n```html\n<!-- 父组件 -->\n<scroll class=\"listview\" :data=\"data\" ref=\"listview\" :listenScroll=\"listenScroll\" @scroll=\"scroll\" :probeType=\"probeType\">\n<!-- ... -->\n</scroll>\n```\n\n#### 父组件调用子组件方法\n\n```javascript\nmethods: {\n    refresh () {\n        this.$refs.listview.refresh()\n    }\n}\n```\n\n## vscode+eslint用法\n\n不管是多人合作还是个人项目，代码规范是很重要的。这样做不仅可以很大程度地避免基本语法错误，也保证了代码的可读性。\n\n首先在vscode安装eslint插件，安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 > 首选项 > 设置 打开 VSCode 配置文件,添加如下配置\n\n```json\n{\n    \"workbench.colorTheme\": \"Default Light+\",\n    \"files.autoSave\":\"off\",\n    \"eslint.validate\": [\n       \"javascript\",\n       \"javascriptreact\",\n       \"html\",\n       { \"language\": \"vue\", \"autoFix\": true }\n     ],\n     \"eslint.options\": {\n        \"plugins\": [\"html\"]\n     },\n     // 这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。\n     \"eslint.autoFixOnSave\": true\n}\n```\n\n参考:\n\n> * [ESLint的用法](https://juejin.im/post/59097cd7a22b9d0065fb61d2#heading-8)\n> * [vscode插件和配置推荐](https://github.com/varHarrie/YmxvZw/issues/10)\n\n## 总结一下\n\n由于课程内容太多，很多细节也没法做记录，只记录了印象比较深刻的几个点，另外的部分只能等回头想起来或者用到的时候翻源码或者视频来巩固了。这门课让我收获了很多，感觉做起项目来思路也清晰了不少，特别是组件的拆分，vuex的使用，动画交互及很多工具类的写法。嗯，文采有限...\n\n谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。","slug":"vue-music 移动端音乐webApp学习总结","published":1,"updated":"2018-04-11T15:01:30.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g93002hfc92jx7ye5n4","content":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/vue-music\" target=\"_blank\" rel=\"noopener\">vue-music</a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li>[x] vue-cli脚手架(vue + vuex + vue router + es6)</li>\n<li>[x] axios、jsonp</li>\n<li>[x] better-scroll、lyric-parser</li>\n<li>[x] vue-lazyload</li>\n</ul>\n<h2 id=\"完成组件\"><a href=\"#完成组件\" class=\"headerlink\" title=\"完成组件\"></a>完成组件</h2><p>基础组件</p>\n<ul>\n<li>[x] confirm：确认对话框组件</li>\n<li>[x] listview：通讯录列表组件</li>\n<li>[x] loading：加载态组件</li>\n<li>[x] no-result：无结果展示组件</li>\n<li>[x] progress-bar：进度条组件</li>\n<li>[x] progress-circle：圆形进度条组件</li>\n<li>[x] scroll：移动端滚动组件</li>\n<li>[x] search-box：搜索框组件</li>\n<li>[x] search-list：搜索列表组件</li>\n<li>[x] slider：轮播图组件</li>\n<li>[x] switches：开关切换组件</li>\n<li>[x] top-tip：顶部消息提示组件</li>\n<li>[x] song-list：歌曲列表组件</li>\n</ul>\n<p>业务组件</p>\n<ul>\n<li>[x] add-song：添加歌曲到列表组件</li>\n<li>[x] disc：歌单详情页组件</li>\n<li>[x] m-header：页面头部组件</li>\n<li>[x] music-list：歌曲列表页面组件</li>\n<li>[x] player：播放器内核组件</li>\n<li>[x] playlist：播放列表组件</li>\n<li>[x] rank：排行榜页面组件</li>\n<li>[x] recommend：推荐页面组件</li>\n<li>[x] search：搜索页面组件</li>\n<li>[x] singer：歌手页面组件</li>\n<li>[x] singer-detail：歌手详情页组件</li>\n<li>[x] suggest：搜索提示列表组件</li>\n<li>[x] tab：顶部导航栏组件</li>\n<li>[x] top-list：排行榜详情页组件</li>\n<li>[x] user-center：用户中心页组件</li>\n</ul>\n<h2 id=\"知识点整理\"><a href=\"#知识点整理\" class=\"headerlink\" title=\"知识点整理\"></a>知识点整理</h2><h3 id=\"前端如何独立解决跨域问题？\"><a href=\"#前端如何独立解决跨域问题？\" class=\"headerlink\" title=\"前端如何独立解决跨域问题？\"></a>前端如何独立解决跨域问题？</h3><p>解决跨域问题常用的解决方案有两个：</p>\n<ul>\n<li>JSONP：利用script标签可跨域的特点，在跨域脚本中可以直接回调当前脚本的函数。</li>\n<li>CORS：服务器设置HTTP响应头中Access-Control-Allow-Origin值，解除跨域限制。</li>\n</ul>\n<p>但是这两个跨域方案都存在一个致命的缺陷，严重依赖后端的协助。</p>\n<p>如何独立解决跨域问题？</p>\n<p>一般的做法是通过本地配置nginx反向代理进行处理的，除此之外，还可以通过nodejs来进行代理接口。</p>\n<h4 id=\"JSONP原理及封装\"><a href=\"#JSONP原理及封装\" class=\"headerlink\" title=\"JSONP原理及封装\"></a>JSONP原理及封装</h4><p><a href=\"https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">jsonp原理</a>其实就是通过<code>&lt;script&gt;</code>标签<code>src</code>属性的跨域能力，在远程服务器上设法把数据装进json格式的文件里，供客户端调用和进一步处理，客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。</p>\n<p>jsonp封装<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install jsonp --save</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> originJSONP <span class=\"keyword\">from</span> <span class=\"string\">'jsonp'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url拼接参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,data,option</span>)</span>&#123;</span><br><span class=\"line\">    url += (url.indexOf(<span class=\"string\">'?'</span>) &lt; <span class=\"number\">0</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span>) + param(data);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        originJSONP(url,option,(err,data)=&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// obj对象拼接成字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">param</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = data[k] !== <span class=\"literal\">undefined</span> ? data[k] : <span class=\"string\">''</span>;</span><br><span class=\"line\">        url += <span class=\"string\">`&amp;<span class=\"subst\">$&#123;k&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(value)&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url ? url.substring(<span class=\"number\">1</span>) : <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"nodejs代理接口\"><a href=\"#nodejs代理接口\" class=\"headerlink\" title=\"nodejs代理接口\"></a>nodejs代理接口</h4><p>请求数据遇到hosts和referer限制？前端是无法修改request.headers，因此可以通过nodejs手动代理请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> apiRoutes = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">apiRoutes.get(<span class=\"string\">'/getDiscList'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span>;</span><br><span class=\"line\">  axios.get(url,&#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      referer: <span class=\"string\">'https://y.qq.com/portal/playlist.html'</span>,</span><br><span class=\"line\">      host: <span class=\"string\">'y.qq.com'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    params: req.query</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.json(response.data);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>,apiRoutes);</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/canfoo/p/6912306.html\" target=\"_blank\" rel=\"noopener\">nodejs服务实现反向代理，解决本地开发接口请求跨域问题</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010719058\" target=\"_blank\" rel=\"noopener\">前端开发如何独立解决跨域问题</a></li>\n</ul>\n</blockquote>\n<h3 id=\"通讯录组件右侧快速入口-数组排序\"><a href=\"#通讯录组件右侧快速入口-数组排序\" class=\"headerlink\" title=\"通讯录组件右侧快速入口(数组排序)\"></a>通讯录组件右侧快速入口(数组排序)</h3><p>开发歌手列表的时候，需要按热门及字母的顺序来显示，右侧则需要一个快速入口的索引列表（类似通讯录）。思路就是先将歌手数据前10条添加到热门数组中，另外将剩余的数据按字母归类放置在各自的数组里，最后对字母进行排序操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">_normalizeSinger (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;</span><br><span class=\"line\">        hot: &#123;</span><br><span class=\"line\">            title: HOT_NAME,</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取前10条添加到热门数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; HOT_SINGER_LEN)&#123;</span><br><span class=\"line\">        map.hot.items.push(<span class=\"keyword\">new</span> Singer(&#123;</span><br><span class=\"line\">            id: item.Fsinger_mid,</span><br><span class=\"line\">            name: item.Fsinger_name</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按字母归类</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = item.Findex</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map[key])&#123;</span><br><span class=\"line\">        map[key] = &#123;</span><br><span class=\"line\">            title: key,</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    map[key].items.push(<span class=\"keyword\">new</span> Singer(&#123;</span><br><span class=\"line\">        id: item.Fsinger_mid,</span><br><span class=\"line\">        name: item.Fsinger_name</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 处理map得到有序列表</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hot = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> map)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = map[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val.title.match(<span class=\"regexp\">/[a-zA-Z]/</span>))&#123;</span><br><span class=\"line\">            ret.push(val)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val.title === HOT_NAME)&#123;</span><br><span class=\"line\">            hot.push(val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序操作</span></span><br><span class=\"line\">    ret.sort(<span class=\"function\">(<span class=\"params\">a, b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.title.charCodeAt(<span class=\"number\">0</span>) - b.title.charCodeAt(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hot.concat(ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"工厂模式运用（歌手数据，歌曲数据）\"><a href=\"#工厂模式运用（歌手数据，歌曲数据）\" class=\"headerlink\" title=\"工厂模式运用（歌手数据，歌曲数据）\"></a>工厂模式运用（歌手数据，歌曲数据）</h3><p>歌手页面循环数据的时候，需要获取每个歌手的姓名，ID及头像，这时候就运用到工厂模式。歌曲数据类也一样，多了<code>getLyric()</code>处理歌词的原型继承方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// singer.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;id, name&#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.avatar = <span class=\"string\">`https://y.gtimg.cn/music/photo_new/T001R300x300M000<span class=\"subst\">$&#123;id&#125;</span>.jpg?max_age=2592000`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// song.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Song</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;id,mid,singer,name,album,duration,image,url&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mid = mid,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.singer = singer,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.album = album,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.duration = duration,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.image = image,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getLyric () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lyric) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.lyric)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            getLyric(<span class=\"keyword\">this</span>.mid).then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.retcode === ERR_OK)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.lyric = Base64.decode(res.lyric)</span><br><span class=\"line\">                    resolve(<span class=\"keyword\">this</span>.lyric)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(<span class=\"string\">'no lyric'</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/class#constructor-方法\" target=\"_blank\" rel=\"noopener\">constructor</a>方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</p>\n<p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toValue() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;&#125;,</span><br><span class=\"line\">  toString() &#123;&#125;,</span><br><span class=\"line\">  toValue() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。具体参照<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">Class 的基本语法</a></p>\n<h3 id=\"vue组件之间的通信（scroll组件为例）\"><a href=\"#vue组件之间的通信（scroll组件为例）\" class=\"headerlink\" title=\"vue组件之间的通信（scroll组件为例）\"></a>vue组件之间的通信（scroll组件为例）</h3><h4 id=\"子组件向父组件派生事件\"><a href=\"#子组件向父组件派生事件\" class=\"headerlink\" title=\"子组件向父组件派生事件\"></a>子组件向父组件派生事件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">'better-scroll'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        probeType: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        click: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        listenScroll: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        pullup: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeScroll: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        refreshDelay: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._initScroll()</span><br><span class=\"line\">        &#125;,<span class=\"number\">20</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        _initScroll () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.$refs.wrapper)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"keyword\">this</span>.$refs.wrapper,&#123;</span><br><span class=\"line\">                probeType: <span class=\"keyword\">this</span>.probeType,</span><br><span class=\"line\">                click: <span class=\"keyword\">this</span>.click</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.listenScroll)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> me = <span class=\"keyword\">this</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'scroll'</span>,(pos)=&gt;&#123;</span><br><span class=\"line\">                    me.$emit(<span class=\"string\">'scroll'</span>,pos)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.pullup)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'scrollEnd'</span>,()=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.scroll.y &lt;= (<span class=\"keyword\">this</span>.scroll.maxScrollY + <span class=\"number\">50</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'scrollToEnd'</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.beforeScroll)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'beforeScrollStart'</span>,()=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'beforeScroll'</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enable () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.enable()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        disable () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.disable()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        refresh () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.refresh()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollTo () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.scrollTo.apply(<span class=\"keyword\">this</span>.scroll,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollToElement () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.scrollToElement.apply(<span class=\"keyword\">this</span>.scroll,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.refresh()</span><br><span class=\"line\">            &#125;,<span class=\"keyword\">this</span>.refreshDelay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listview\"</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"listview\"</span> <span class=\"attr\">:listenScroll</span>=<span class=\"string\">\"listenScroll\"</span> @<span class=\"attr\">scroll</span>=<span class=\"string\">\"scroll\"</span> <span class=\"attr\">:probeType</span>=<span class=\"string\">\"probeType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件调用子组件方法\"><a href=\"#父组件调用子组件方法\" class=\"headerlink\" title=\"父组件调用子组件方法\"></a>父组件调用子组件方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    refresh () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.listview.refresh()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vscode-eslint用法\"><a href=\"#vscode-eslint用法\" class=\"headerlink\" title=\"vscode+eslint用法\"></a>vscode+eslint用法</h2><p>不管是多人合作还是个人项目，代码规范是很重要的。这样做不仅可以很大程度地避免基本语法错误，也保证了代码的可读性。</p>\n<p>首先在vscode安装eslint插件，安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 &gt; 首选项 &gt; 设置 打开 VSCode 配置文件,添加如下配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"Default Light+\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>:<span class=\"string\">\"off\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">       <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">       &#123; <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>, <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">     ],</span><br><span class=\"line\">     <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     // 这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。</span><br><span class=\"line\">     \"eslint.autoFixOnSave\": true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/59097cd7a22b9d0065fb61d2#heading-8\" target=\"_blank\" rel=\"noopener\">ESLint的用法</a></li>\n<li><a href=\"https://github.com/varHarrie/YmxvZw/issues/10\" target=\"_blank\" rel=\"noopener\">vscode插件和配置推荐</a></li>\n</ul>\n</blockquote>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><p>由于课程内容太多，很多细节也没法做记录，只记录了印象比较深刻的几个点，另外的部分只能等回头想起来或者用到的时候翻源码或者视频来巩固了。这门课让我收获了很多，感觉做起项目来思路也清晰了不少，特别是组件的拆分，vuex的使用，动画交互及很多工具类的写法。嗯，文采有限…</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github地址\"><a href=\"#github地址\" class=\"headerlink\" title=\"github地址\"></a>github地址</h1><p><a href=\"https://github.com/ChenXiaoMian/vue-music\" target=\"_blank\" rel=\"noopener\">vue-music</a></p>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li>[x] vue-cli脚手架(vue + vuex + vue router + es6)</li>\n<li>[x] axios、jsonp</li>\n<li>[x] better-scroll、lyric-parser</li>\n<li>[x] vue-lazyload</li>\n</ul>\n<h2 id=\"完成组件\"><a href=\"#完成组件\" class=\"headerlink\" title=\"完成组件\"></a>完成组件</h2><p>基础组件</p>\n<ul>\n<li>[x] confirm：确认对话框组件</li>\n<li>[x] listview：通讯录列表组件</li>\n<li>[x] loading：加载态组件</li>\n<li>[x] no-result：无结果展示组件</li>\n<li>[x] progress-bar：进度条组件</li>\n<li>[x] progress-circle：圆形进度条组件</li>\n<li>[x] scroll：移动端滚动组件</li>\n<li>[x] search-box：搜索框组件</li>\n<li>[x] search-list：搜索列表组件</li>\n<li>[x] slider：轮播图组件</li>\n<li>[x] switches：开关切换组件</li>\n<li>[x] top-tip：顶部消息提示组件</li>\n<li>[x] song-list：歌曲列表组件</li>\n</ul>\n<p>业务组件</p>\n<ul>\n<li>[x] add-song：添加歌曲到列表组件</li>\n<li>[x] disc：歌单详情页组件</li>\n<li>[x] m-header：页面头部组件</li>\n<li>[x] music-list：歌曲列表页面组件</li>\n<li>[x] player：播放器内核组件</li>\n<li>[x] playlist：播放列表组件</li>\n<li>[x] rank：排行榜页面组件</li>\n<li>[x] recommend：推荐页面组件</li>\n<li>[x] search：搜索页面组件</li>\n<li>[x] singer：歌手页面组件</li>\n<li>[x] singer-detail：歌手详情页组件</li>\n<li>[x] suggest：搜索提示列表组件</li>\n<li>[x] tab：顶部导航栏组件</li>\n<li>[x] top-list：排行榜详情页组件</li>\n<li>[x] user-center：用户中心页组件</li>\n</ul>\n<h2 id=\"知识点整理\"><a href=\"#知识点整理\" class=\"headerlink\" title=\"知识点整理\"></a>知识点整理</h2><h3 id=\"前端如何独立解决跨域问题？\"><a href=\"#前端如何独立解决跨域问题？\" class=\"headerlink\" title=\"前端如何独立解决跨域问题？\"></a>前端如何独立解决跨域问题？</h3><p>解决跨域问题常用的解决方案有两个：</p>\n<ul>\n<li>JSONP：利用script标签可跨域的特点，在跨域脚本中可以直接回调当前脚本的函数。</li>\n<li>CORS：服务器设置HTTP响应头中Access-Control-Allow-Origin值，解除跨域限制。</li>\n</ul>\n<p>但是这两个跨域方案都存在一个致命的缺陷，严重依赖后端的协助。</p>\n<p>如何独立解决跨域问题？</p>\n<p>一般的做法是通过本地配置nginx反向代理进行处理的，除此之外，还可以通过nodejs来进行代理接口。</p>\n<h4 id=\"JSONP原理及封装\"><a href=\"#JSONP原理及封装\" class=\"headerlink\" title=\"JSONP原理及封装\"></a>JSONP原理及封装</h4><p><a href=\"https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">jsonp原理</a>其实就是通过<code>&lt;script&gt;</code>标签<code>src</code>属性的跨域能力，在远程服务器上设法把数据装进json格式的文件里，供客户端调用和进一步处理，客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了。</p>\n<p>jsonp封装<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install jsonp --save</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> originJSONP <span class=\"keyword\">from</span> <span class=\"string\">'jsonp'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url拼接参数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,data,option</span>)</span>&#123;</span><br><span class=\"line\">    url += (url.indexOf(<span class=\"string\">'?'</span>) &lt; <span class=\"number\">0</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span>) + param(data);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        originJSONP(url,option,(err,data)=&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                reject(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// obj对象拼接成字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">param</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = data[k] !== <span class=\"literal\">undefined</span> ? data[k] : <span class=\"string\">''</span>;</span><br><span class=\"line\">        url += <span class=\"string\">`&amp;<span class=\"subst\">$&#123;k&#125;</span>=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(value)&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url ? url.substring(<span class=\"number\">1</span>) : <span class=\"string\">''</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"nodejs代理接口\"><a href=\"#nodejs代理接口\" class=\"headerlink\" title=\"nodejs代理接口\"></a>nodejs代理接口</h4><p>请求数据遇到hosts和referer限制？前端是无法修改request.headers，因此可以通过nodejs手动代理请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">'axios'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> apiRoutes = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">apiRoutes.get(<span class=\"string\">'/getDiscList'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"string\">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span>;</span><br><span class=\"line\">  axios.get(url,&#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      referer: <span class=\"string\">'https://y.qq.com/portal/playlist.html'</span>,</span><br><span class=\"line\">      host: <span class=\"string\">'y.qq.com'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    params: req.query</span><br><span class=\"line\">  &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.json(response.data);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>,apiRoutes);</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/canfoo/p/6912306.html\" target=\"_blank\" rel=\"noopener\">nodejs服务实现反向代理，解决本地开发接口请求跨域问题</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010719058\" target=\"_blank\" rel=\"noopener\">前端开发如何独立解决跨域问题</a></li>\n</ul>\n</blockquote>\n<h3 id=\"通讯录组件右侧快速入口-数组排序\"><a href=\"#通讯录组件右侧快速入口-数组排序\" class=\"headerlink\" title=\"通讯录组件右侧快速入口(数组排序)\"></a>通讯录组件右侧快速入口(数组排序)</h3><p>开发歌手列表的时候，需要按热门及字母的顺序来显示，右侧则需要一个快速入口的索引列表（类似通讯录）。思路就是先将歌手数据前10条添加到热门数组中，另外将剩余的数据按字母归类放置在各自的数组里，最后对字母进行排序操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">_normalizeSinger (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;</span><br><span class=\"line\">        hot: &#123;</span><br><span class=\"line\">            title: HOT_NAME,</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取前10条添加到热门数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; HOT_SINGER_LEN)&#123;</span><br><span class=\"line\">        map.hot.items.push(<span class=\"keyword\">new</span> Singer(&#123;</span><br><span class=\"line\">            id: item.Fsinger_mid,</span><br><span class=\"line\">            name: item.Fsinger_name</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按字母归类</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = item.Findex</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map[key])&#123;</span><br><span class=\"line\">        map[key] = &#123;</span><br><span class=\"line\">            title: key,</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    map[key].items.push(<span class=\"keyword\">new</span> Singer(&#123;</span><br><span class=\"line\">        id: item.Fsinger_mid,</span><br><span class=\"line\">        name: item.Fsinger_name</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 处理map得到有序列表</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hot = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> map)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val = map[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val.title.match(<span class=\"regexp\">/[a-zA-Z]/</span>))&#123;</span><br><span class=\"line\">            ret.push(val)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val.title === HOT_NAME)&#123;</span><br><span class=\"line\">            hot.push(val)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序操作</span></span><br><span class=\"line\">    ret.sort(<span class=\"function\">(<span class=\"params\">a, b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.title.charCodeAt(<span class=\"number\">0</span>) - b.title.charCodeAt(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hot.concat(ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"工厂模式运用（歌手数据，歌曲数据）\"><a href=\"#工厂模式运用（歌手数据，歌曲数据）\" class=\"headerlink\" title=\"工厂模式运用（歌手数据，歌曲数据）\"></a>工厂模式运用（歌手数据，歌曲数据）</h3><p>歌手页面循环数据的时候，需要获取每个歌手的姓名，ID及头像，这时候就运用到工厂模式。歌曲数据类也一样，多了<code>getLyric()</code>处理歌词的原型继承方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// singer.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;id, name&#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.avatar = <span class=\"string\">`https://y.gtimg.cn/music/photo_new/T001R300x300M000<span class=\"subst\">$&#123;id&#125;</span>.jpg?max_age=2592000`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// song.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Song</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;id,mid,singer,name,album,duration,image,url&#125;)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mid = mid,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.singer = singer,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.album = album,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.duration = duration,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.image = image,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getLyric () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lyric) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.lyric)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            getLyric(<span class=\"keyword\">this</span>.mid).then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res.retcode === ERR_OK)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.lyric = Base64.decode(res.lyric)</span><br><span class=\"line\">                    resolve(<span class=\"keyword\">this</span>.lyric)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    reject(<span class=\"string\">'no lyric'</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/class#constructor-方法\" target=\"_blank\" rel=\"noopener\">constructor</a>方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。</p>\n<p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toValue() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;&#125;,</span><br><span class=\"line\">  toString() &#123;&#125;,</span><br><span class=\"line\">  toValue() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。具体参照<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">Class 的基本语法</a></p>\n<h3 id=\"vue组件之间的通信（scroll组件为例）\"><a href=\"#vue组件之间的通信（scroll组件为例）\" class=\"headerlink\" title=\"vue组件之间的通信（scroll组件为例）\"></a>vue组件之间的通信（scroll组件为例）</h3><h4 id=\"子组件向父组件派生事件\"><a href=\"#子组件向父组件派生事件\" class=\"headerlink\" title=\"子组件向父组件派生事件\"></a>子组件向父组件派生事件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> BScroll <span class=\"keyword\">from</span> <span class=\"string\">'better-scroll'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        probeType: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        click: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        listenScroll: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        pullup: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeScroll: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        refreshDelay: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._initScroll()</span><br><span class=\"line\">        &#125;,<span class=\"number\">20</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        _initScroll () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.$refs.wrapper)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll = <span class=\"keyword\">new</span> BScroll(<span class=\"keyword\">this</span>.$refs.wrapper,&#123;</span><br><span class=\"line\">                probeType: <span class=\"keyword\">this</span>.probeType,</span><br><span class=\"line\">                click: <span class=\"keyword\">this</span>.click</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.listenScroll)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> me = <span class=\"keyword\">this</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'scroll'</span>,(pos)=&gt;&#123;</span><br><span class=\"line\">                    me.$emit(<span class=\"string\">'scroll'</span>,pos)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.pullup)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'scrollEnd'</span>,()=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.scroll.y &lt;= (<span class=\"keyword\">this</span>.scroll.maxScrollY + <span class=\"number\">50</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'scrollToEnd'</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.beforeScroll)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scroll.on(<span class=\"string\">'beforeScrollStart'</span>,()=&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'beforeScroll'</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enable () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.enable()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        disable () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.disable()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        refresh () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.refresh()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollTo () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.scrollTo.apply(<span class=\"keyword\">this</span>.scroll,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        scrollToElement () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.scroll &amp;&amp; <span class=\"keyword\">this</span>.scroll.scrollToElement.apply(<span class=\"keyword\">this</span>.scroll,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\">        data () &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.refresh()</span><br><span class=\"line\">            &#125;,<span class=\"keyword\">this</span>.refreshDelay)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listview\"</span> <span class=\"attr\">:data</span>=<span class=\"string\">\"data\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"listview\"</span> <span class=\"attr\">:listenScroll</span>=<span class=\"string\">\"listenScroll\"</span> @<span class=\"attr\">scroll</span>=<span class=\"string\">\"scroll\"</span> <span class=\"attr\">:probeType</span>=<span class=\"string\">\"probeType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ... --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"父组件调用子组件方法\"><a href=\"#父组件调用子组件方法\" class=\"headerlink\" title=\"父组件调用子组件方法\"></a>父组件调用子组件方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    refresh () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs.listview.refresh()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vscode-eslint用法\"><a href=\"#vscode-eslint用法\" class=\"headerlink\" title=\"vscode+eslint用法\"></a>vscode+eslint用法</h2><p>不管是多人合作还是个人项目，代码规范是很重要的。这样做不仅可以很大程度地避免基本语法错误，也保证了代码的可读性。</p>\n<p>首先在vscode安装eslint插件，安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，依次点击 文件 &gt; 首选项 &gt; 设置 打开 VSCode 配置文件,添加如下配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"Default Light+\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>:<span class=\"string\">\"off\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">       <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">       &#123; <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>, <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">     ],</span><br><span class=\"line\">     <span class=\"attr\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     // 这样每次保存的时候就可以根据根目录下.eslintrc.js你配置的eslint规则来检查和做一些简单的fix。</span><br><span class=\"line\">     \"eslint.autoFixOnSave\": true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://juejin.im/post/59097cd7a22b9d0065fb61d2#heading-8\" target=\"_blank\" rel=\"noopener\">ESLint的用法</a></li>\n<li><a href=\"https://github.com/varHarrie/YmxvZw/issues/10\" target=\"_blank\" rel=\"noopener\">vscode插件和配置推荐</a></li>\n</ul>\n</blockquote>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><p>由于课程内容太多，很多细节也没法做记录，只记录了印象比较深刻的几个点，另外的部分只能等回头想起来或者用到的时候翻源码或者视频来巩固了。这门课让我收获了很多，感觉做起项目来思路也清晰了不少，特别是组件的拆分，vuex的使用，动画交互及很多工具类的写法。嗯，文采有限…</p>\n<p>谢谢您的品读，此处抛砖引玉，希望大家共同探讨学习。</p>\n"},{"title":"我的前端笔记—HTML&CSS篇","date":"2018-04-13T16:00:00.000Z","_content":"\n## PC端基础meta标签\n\n```html\n<!-- 页面关键词-->\n<meta name=\"keywords\" content=\"your tags\" />\n<!-- 页面描述-->\n<meta name=\"description\" content=\"150 words\" />\n<!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。-->\n<meta name=\"robots\" content=\"index,follow\" />\n<!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n -->\n<!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。-->\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n<!-- 清除缓存 -->\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta http-equiv=\"expires\" content=\"0\">   \n```\n\n## H5基本meta标签\n\n```html\n<!-- 设置缩放 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\" />\n<!-- \n    width    设置viewport宽度，为一个正整数，或字符串‘device-width’\n    device-width  设备宽度\n    height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置\n    initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数\n    minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数\n    maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数\n    user-scalable    是否允许手动缩放\n-->\n<!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） -->\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 -->\n<meta name=\"format-detection\"content=\"telephone=no, email=no\" />\n\n<!-- 其他meta标签 -->\n\n<!-- 启用360浏览器的极速模式(webkit) -->\n<meta name=\"renderer\" content=\"webkit\">\n<!-- 避免IE使用兼容模式 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n```\n\n## 移动端如何定义字体font-family\n\n```css\n@ --------------------------------------中文字体的英文名称\n@ 宋体      SimSun\n@ 黑体      SimHei\n@ 微信雅黑   Microsoft Yahei\n@ 微软正黑体 Microsoft JhengHei\n@ 新宋体    NSimSun\n@ 新细明体  MingLiU\n@ 细明体    MingLiU\n@ 标楷体    DFKai-SB\n@ 仿宋     FangSong\n@ 楷体     KaiTi\n@ 仿宋_GB2312  FangSong_GB2312\n@ 楷体_GB2312  KaiTi_GB2312  \n@\n@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica\n\nbody { font-family: Microsoft Yahei,SimSun,Helvetica; } \n```\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n```css\na,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}\n```\n\n## 部分android系统中元素被点击时产生的边框怎么去掉\n\n```css\na,button,input,textarea{\n-webkit-tap-highlight-color: rgba(0,0,0,0;);\n-webkit-user-modify:read-write-plaintext-only; \n}\n```\n\n## 禁止ios和android用户选中文字\n\n```css\n.css{-webkit-user-select:none}\n```\n\n## 打电话发短信写邮件怎么实现\n\n```html\n<a href=\"tel:0755-10086\">打电话给:0755-10086</a>\n<a href=\"sms:10086\">发短信给: 10086</a>\n<a href=\"mailto:peun@foxmail.com\">peun@foxmail.com</a>\n```\n\n## css实现单行文本缩略显示\n\n```css\noverflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n/* 当然还需要加宽度width属来兼容部分浏览。*/\n```\n\n## css实现多行文本缩略显示\n\n```css\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\ntext-overflow: ellipsis;\nword-break: break-all; /* 追加这一行代码 */\n```\n\n## placeholder的字体颜色大小\n\n```css\ninput::-webkit-input-placeholder { \n    /* WebKit browsers */ \n    font-size:14px;\n    color: #333;\n}\ninput:focus::-webkit-input-placeholder{\n    color:#EEEEEE;\n}\ninput::-moz-placeholder { \n    /* Mozilla Firefox 19+ */ \n    font-size:14px;\n    color: #333;\n} \ninput:-ms-input-placeholder { \n    /* Internet Explorer 10+ */ \n    font-size:14px;\n    color: #333;\n}\n```\n\n## 常见移动设备的 CSS3 Media Query 整理\n\n```css\n/**\n * iPhone 4/4s landscape & portrait\n */\n@media only screen\nand (min-device-width: 320px)\nand (max-device-width: 480px)\nand (-webkit-device-pixel-ratio: 2)\nand (device-aspect-ratio: 2/3) {\n\n}\n\n/**\n * iPhone 4/4s landscape\n */\n@media only screen\nand (min-device-width: 320px)\nand (max-device-width: 480px)\nand (-webkit-device-pixel-ratio: 2)\nand (device-aspect-ratio: 2/3)\nand (orientation:landscape) {\n\n}\n\n/**\n *  iPhone 5/5s landscape & portrait\n */\n@media only screen\nand (min-device-width: 414px)\nand (max-device-width: 736px)\nand (-webkit-min-device-pixel-ratio: 3) {\n\n}\n\n/**\n * iPhone 6 Portrait\n */\n@media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (orientation : portrait) { \n    //iPhone 6 Portrait\n}\n\n/**\n * 宽度小于等于 320px \n */\n@media screen and (max-width: 320px) {\n    \n}\n\n/**\n * 宽度大于等于 320px \n */\n@media screen and (min-width: 320px){\n    \n}\n```\n\n## CSS3 盒阴影\n\n`box-shadow` 属性接受值最多由五个不同的部分组成。\n\n`offset-x`  必需。水平阴影的位置。允许负值。\n`offset-y`  必需。垂直阴影的位置。允许负值。\n`blur`      可选。模糊距离。\n`spread`    可选。阴影的尺寸。\n`color`     可选。阴影的颜色。请参阅 CSS 颜色值。\n`position`  可选。将外部阴影 (outset) 改为内部阴影。\n\n```css\nbox-shadow: offset-x offset-y blur spread color position;\n/* blur */\n.right { box-shadow: 0px 0px 50px 0px rgba(0,0,0,0.5) }\n/* 多重阴影 */\n.foo {\n    box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5) inset, /* inner shadow */\n    20px 20px 10px 0px rgba(0,0,0,0.5); /* outer shadow */\n}\n/* 大杂烩 */\n.simple {\n    box-shadow: 0px 0px 0px 40px indianred;\n}\n.multiple {\n    box-shadow: 20px 20px 0px 20px lightcoral,\n                -20px -20px 0px 20px mediumvioletred,\n                0px 0px 0px 40px rgb(200,200,200);\n}\n/* 弹出效果 */\n.popup {\n    transform: scale(1);\n    box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.3);\n    transition: box-shadow 0.5s, transform 0.5s;\n}\n.popup:hover {\n    transform: scale(1.3);\n    box-shadow: 0px 0px 50px 10px rgba(0, 0, 0, 0.3);\n    transition: box-shadow 0.5s, transform 0.5s;\n}\n```\n\n## CSS画出三角形\n\n```css\n.tip {\n    border-color: transparent transparent rgb(0,0,0) transparent;\n    border-width: 10px 100px 150px 100px;\n    width: 0;\n}\n```\n\n## CSS画出有边框的三角形\n\n```css\n.find-div-body {\n    position: relative;\n    top:30px;\n    right:0px;\n    width:400px;\n    height:200px;\n    padding:8px;\n    background-color: #FFFFFF;\n    border: #cccccc solid 1px;\n    border-radius: 3px;\n}\n.find-div-body:before {\n    box-sizing: content-box;\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    top: -16px;\n    right:41px;\n    padding:0;\n    border-bottom:8px solid #FFFFFF;\n    border-top:8px solid transparent;\n    border-left:8px solid transparent;\n    border-right:8px solid transparent;\n    display: block;\n    content:'';\n    z-index: 12;\n}\n.find-div-body:after {\n    box-sizing: content-box;\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    top: -18px;\n    right:40px;\n    padding:0;\n    border-bottom:9px solid #cccccc;\n    border-top:9px solid transparent;\n    border-left:9px solid transparent;\n    border-right:9px solid transparent;\n    display: block;\n    content:'';\n    z-index:10\n}\n```\n\n## 移动web 1像素边框\n\n```css\n.div::after {\n    content: '';\n    width: 200%;\n    height: 200%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid #bfbfbf;\n    border-radius: 4px;\n    -webkit-transform: scale(0.5,0.5);\n    transform: scale(0.5,0.5);\n    -webkit-transform-origin: top left;\n}\n```\n\n## flex布局\n\n```css\n/* ============================================================\n   flex：定义布局为盒模型\n   flex-v：盒模型垂直布局\n   flex-1：子元素占据剩余的空间\n   flex-align-center：子元素垂直居中\n   flex-pack-center：子元素水平居中\n   flex-pack-justify：子元素两端对齐\n   兼容性：ios 4+、android 2.3+、winphone8+\n   ============================================================ */\n.flex{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\n.flex-v{-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\n.flex-1{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;}\n.flex-align-center{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}\n.flex-pack-center{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n.flex-pack-justify{-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\n```\n\n## CSS实现背景透明文字不透明\n\n```css\n.parent{\n    background:rgba(0,0,0,0.2) none repeat scroll !important; /*实现FF背景透明，文字不透明*/\n    background:#000;\n    filter:Alpha(opacity=20);/*实现IE背景透明*/ \n    width:500px;\n    height:500px;\n    color:#F30;\n    font-size:32px;\n    font-weight:bold;\n}\n.parent p{\n    position:relative; /*实现IE文字不透明*/\n}\n```\n\n## IE各个版本hack\n\n```css\n/*类内部hack：*/\n.header {_width:100px;}            /* IE6专用*/\n.header {*+width:100px;}        /* IE7专用*/\n.header {*width:100px;}            /* IE6、IE7共用*/\n.header {width:100px\\0;}        /* IE8、IE9共用*/\n.header {width:100px\\9;}        /* IE6、IE7、IE8、IE9共用*/\n.header {width:330px\\9\\0;}    /* IE9专用*/\n\n/*选择器Hack：*/\n*html .header{}        /*IE6*/ \n*+html .header{}    /*IE7*/\n```\n\n## 用条件注释判断浏览器版本解决页面兼容问题\n\n```html\n<!DOCTYPE html> \n<html> \n<head> \n<title> 用条件注释判断浏览器版本,解决兼容问题 </title> \n<meta charset=\"utf-8\"/> \n</head> \n<body> \n<!--[if IE]>只有IE6,7,8,9浏览器显示(IE10标准模式不支持)<hr/><![endif]--> \n<!--[if !IE]><!-->只有非IE浏览器显示(不包括IE10)<hr/><!--><![endif]--> \n<!--[if IE 9]>IE9浏览器显示<hr/><![endif]--> \n<!--[if IE 8]>IE8浏览器显示<hr/><![endif]--> \n<!--[if IE 7]>IE7浏览器显示<hr/><![endif]--> \n<!--[if IE 6]>IE6浏览器显示<hr/><![endif]--> \n<!--[if lt IE 10]>IE10以下版本浏览器显示(不包括IE10)<hr/><![endif]--> \n<!--[if lte IE 9]>IE9及IE9以下版本浏览器显示(包括IE9)<hr/><![endif]--> \n<!--[if gt IE 6]>IE6以上版本浏览器显示(不含IE6)<hr/><![endif]--> \n<!--[if gte IE 7]>IE7及IE7以上版本浏览器显示(包含IE7)<hr/><![endif]--> \n</body> \n</html>\n```\n\n## 参考\n\n[【原】移动web资源整理](http://www.cnblogs.com/PeunZhang/p/3407453.html)\n[面试的信心来源于过硬的基础](https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader12)\n[box-shadow属性详解](http://www.iyangqiong.com/web/318.html)\n[text-overflow:ellipsis 文字超出省略号代替不起作用解决方法](http://yunkus.com/text-overflow-ellipsis-do-not-work/)\n[有谁能详细讲一下css如何画出一个三角形？怎么想都想不懂？](https://www.zhihu.com/question/35180018)\n[移动web 1像素边框 瞧瞧大公司是怎么做的](https://segmentfault.com/a/1190000007604842)\n[移动端重构系列4——重置样式](https://www.w3cplus.com/mobile/mobile-terminal-refactoring-reset-style.html)\n\n注：笔记借鉴了其他文章，只用于个人学习收集，如有冒犯，请通知我。\n\n将会持续更新~","source":"_posts/我的前端笔记—HTML&CSS篇.md","raw":"---\ntitle: 我的前端笔记—HTML&CSS篇\ndate: 2018-04-14\ncategories: 前端\ntags: [meta, css3, 移动端]\n---\n\n## PC端基础meta标签\n\n```html\n<!-- 页面关键词-->\n<meta name=\"keywords\" content=\"your tags\" />\n<!-- 页面描述-->\n<meta name=\"description\" content=\"150 words\" />\n<!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。-->\n<meta name=\"robots\" content=\"index,follow\" />\n<!--\n    all：文件将被检索，且页面上的链接可以被查询；\n    none：文件将不被检索，且页面上的链接不可以被查询；\n    index：文件将被检索；\n    follow：页面上的链接可以被查询；\n    noindex：文件将不被检索；\n    nofollow：页面上的链接不可以被查询。\n -->\n<!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。-->\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n<!-- 清除缓存 -->\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta http-equiv=\"expires\" content=\"0\">   \n```\n\n## H5基本meta标签\n\n```html\n<!-- 设置缩放 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\" />\n<!-- \n    width    设置viewport宽度，为一个正整数，或字符串‘device-width’\n    device-width  设备宽度\n    height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置\n    initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数\n    minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数\n    maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数\n    user-scalable    是否允许手动缩放\n-->\n<!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） -->\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 -->\n<meta name=\"format-detection\"content=\"telephone=no, email=no\" />\n\n<!-- 其他meta标签 -->\n\n<!-- 启用360浏览器的极速模式(webkit) -->\n<meta name=\"renderer\" content=\"webkit\">\n<!-- 避免IE使用兼容模式 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n```\n\n## 移动端如何定义字体font-family\n\n```css\n@ --------------------------------------中文字体的英文名称\n@ 宋体      SimSun\n@ 黑体      SimHei\n@ 微信雅黑   Microsoft Yahei\n@ 微软正黑体 Microsoft JhengHei\n@ 新宋体    NSimSun\n@ 新细明体  MingLiU\n@ 细明体    MingLiU\n@ 标楷体    DFKai-SB\n@ 仿宋     FangSong\n@ 楷体     KaiTi\n@ 仿宋_GB2312  FangSong_GB2312\n@ 楷体_GB2312  KaiTi_GB2312  \n@\n@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica\n\nbody { font-family: Microsoft Yahei,SimSun,Helvetica; } \n```\n\n## ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\n\n```css\na,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0;)}\n```\n\n## 部分android系统中元素被点击时产生的边框怎么去掉\n\n```css\na,button,input,textarea{\n-webkit-tap-highlight-color: rgba(0,0,0,0;);\n-webkit-user-modify:read-write-plaintext-only; \n}\n```\n\n## 禁止ios和android用户选中文字\n\n```css\n.css{-webkit-user-select:none}\n```\n\n## 打电话发短信写邮件怎么实现\n\n```html\n<a href=\"tel:0755-10086\">打电话给:0755-10086</a>\n<a href=\"sms:10086\">发短信给: 10086</a>\n<a href=\"mailto:peun@foxmail.com\">peun@foxmail.com</a>\n```\n\n## css实现单行文本缩略显示\n\n```css\noverflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n/* 当然还需要加宽度width属来兼容部分浏览。*/\n```\n\n## css实现多行文本缩略显示\n\n```css\ndisplay: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3;\noverflow: hidden;\ntext-overflow: ellipsis;\nword-break: break-all; /* 追加这一行代码 */\n```\n\n## placeholder的字体颜色大小\n\n```css\ninput::-webkit-input-placeholder { \n    /* WebKit browsers */ \n    font-size:14px;\n    color: #333;\n}\ninput:focus::-webkit-input-placeholder{\n    color:#EEEEEE;\n}\ninput::-moz-placeholder { \n    /* Mozilla Firefox 19+ */ \n    font-size:14px;\n    color: #333;\n} \ninput:-ms-input-placeholder { \n    /* Internet Explorer 10+ */ \n    font-size:14px;\n    color: #333;\n}\n```\n\n## 常见移动设备的 CSS3 Media Query 整理\n\n```css\n/**\n * iPhone 4/4s landscape & portrait\n */\n@media only screen\nand (min-device-width: 320px)\nand (max-device-width: 480px)\nand (-webkit-device-pixel-ratio: 2)\nand (device-aspect-ratio: 2/3) {\n\n}\n\n/**\n * iPhone 4/4s landscape\n */\n@media only screen\nand (min-device-width: 320px)\nand (max-device-width: 480px)\nand (-webkit-device-pixel-ratio: 2)\nand (device-aspect-ratio: 2/3)\nand (orientation:landscape) {\n\n}\n\n/**\n *  iPhone 5/5s landscape & portrait\n */\n@media only screen\nand (min-device-width: 414px)\nand (max-device-width: 736px)\nand (-webkit-min-device-pixel-ratio: 3) {\n\n}\n\n/**\n * iPhone 6 Portrait\n */\n@media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (orientation : portrait) { \n    //iPhone 6 Portrait\n}\n\n/**\n * 宽度小于等于 320px \n */\n@media screen and (max-width: 320px) {\n    \n}\n\n/**\n * 宽度大于等于 320px \n */\n@media screen and (min-width: 320px){\n    \n}\n```\n\n## CSS3 盒阴影\n\n`box-shadow` 属性接受值最多由五个不同的部分组成。\n\n`offset-x`  必需。水平阴影的位置。允许负值。\n`offset-y`  必需。垂直阴影的位置。允许负值。\n`blur`      可选。模糊距离。\n`spread`    可选。阴影的尺寸。\n`color`     可选。阴影的颜色。请参阅 CSS 颜色值。\n`position`  可选。将外部阴影 (outset) 改为内部阴影。\n\n```css\nbox-shadow: offset-x offset-y blur spread color position;\n/* blur */\n.right { box-shadow: 0px 0px 50px 0px rgba(0,0,0,0.5) }\n/* 多重阴影 */\n.foo {\n    box-shadow: 20px 20px 10px 0px rgba(0,0,0,0.5) inset, /* inner shadow */\n    20px 20px 10px 0px rgba(0,0,0,0.5); /* outer shadow */\n}\n/* 大杂烩 */\n.simple {\n    box-shadow: 0px 0px 0px 40px indianred;\n}\n.multiple {\n    box-shadow: 20px 20px 0px 20px lightcoral,\n                -20px -20px 0px 20px mediumvioletred,\n                0px 0px 0px 40px rgb(200,200,200);\n}\n/* 弹出效果 */\n.popup {\n    transform: scale(1);\n    box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.3);\n    transition: box-shadow 0.5s, transform 0.5s;\n}\n.popup:hover {\n    transform: scale(1.3);\n    box-shadow: 0px 0px 50px 10px rgba(0, 0, 0, 0.3);\n    transition: box-shadow 0.5s, transform 0.5s;\n}\n```\n\n## CSS画出三角形\n\n```css\n.tip {\n    border-color: transparent transparent rgb(0,0,0) transparent;\n    border-width: 10px 100px 150px 100px;\n    width: 0;\n}\n```\n\n## CSS画出有边框的三角形\n\n```css\n.find-div-body {\n    position: relative;\n    top:30px;\n    right:0px;\n    width:400px;\n    height:200px;\n    padding:8px;\n    background-color: #FFFFFF;\n    border: #cccccc solid 1px;\n    border-radius: 3px;\n}\n.find-div-body:before {\n    box-sizing: content-box;\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    top: -16px;\n    right:41px;\n    padding:0;\n    border-bottom:8px solid #FFFFFF;\n    border-top:8px solid transparent;\n    border-left:8px solid transparent;\n    border-right:8px solid transparent;\n    display: block;\n    content:'';\n    z-index: 12;\n}\n.find-div-body:after {\n    box-sizing: content-box;\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    top: -18px;\n    right:40px;\n    padding:0;\n    border-bottom:9px solid #cccccc;\n    border-top:9px solid transparent;\n    border-left:9px solid transparent;\n    border-right:9px solid transparent;\n    display: block;\n    content:'';\n    z-index:10\n}\n```\n\n## 移动web 1像素边框\n\n```css\n.div::after {\n    content: '';\n    width: 200%;\n    height: 200%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid #bfbfbf;\n    border-radius: 4px;\n    -webkit-transform: scale(0.5,0.5);\n    transform: scale(0.5,0.5);\n    -webkit-transform-origin: top left;\n}\n```\n\n## flex布局\n\n```css\n/* ============================================================\n   flex：定义布局为盒模型\n   flex-v：盒模型垂直布局\n   flex-1：子元素占据剩余的空间\n   flex-align-center：子元素垂直居中\n   flex-pack-center：子元素水平居中\n   flex-pack-justify：子元素两端对齐\n   兼容性：ios 4+、android 2.3+、winphone8+\n   ============================================================ */\n.flex{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\n.flex-v{-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\n.flex-1{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;}\n.flex-align-center{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}\n.flex-pack-center{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\n.flex-pack-justify{-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\n```\n\n## CSS实现背景透明文字不透明\n\n```css\n.parent{\n    background:rgba(0,0,0,0.2) none repeat scroll !important; /*实现FF背景透明，文字不透明*/\n    background:#000;\n    filter:Alpha(opacity=20);/*实现IE背景透明*/ \n    width:500px;\n    height:500px;\n    color:#F30;\n    font-size:32px;\n    font-weight:bold;\n}\n.parent p{\n    position:relative; /*实现IE文字不透明*/\n}\n```\n\n## IE各个版本hack\n\n```css\n/*类内部hack：*/\n.header {_width:100px;}            /* IE6专用*/\n.header {*+width:100px;}        /* IE7专用*/\n.header {*width:100px;}            /* IE6、IE7共用*/\n.header {width:100px\\0;}        /* IE8、IE9共用*/\n.header {width:100px\\9;}        /* IE6、IE7、IE8、IE9共用*/\n.header {width:330px\\9\\0;}    /* IE9专用*/\n\n/*选择器Hack：*/\n*html .header{}        /*IE6*/ \n*+html .header{}    /*IE7*/\n```\n\n## 用条件注释判断浏览器版本解决页面兼容问题\n\n```html\n<!DOCTYPE html> \n<html> \n<head> \n<title> 用条件注释判断浏览器版本,解决兼容问题 </title> \n<meta charset=\"utf-8\"/> \n</head> \n<body> \n<!--[if IE]>只有IE6,7,8,9浏览器显示(IE10标准模式不支持)<hr/><![endif]--> \n<!--[if !IE]><!-->只有非IE浏览器显示(不包括IE10)<hr/><!--><![endif]--> \n<!--[if IE 9]>IE9浏览器显示<hr/><![endif]--> \n<!--[if IE 8]>IE8浏览器显示<hr/><![endif]--> \n<!--[if IE 7]>IE7浏览器显示<hr/><![endif]--> \n<!--[if IE 6]>IE6浏览器显示<hr/><![endif]--> \n<!--[if lt IE 10]>IE10以下版本浏览器显示(不包括IE10)<hr/><![endif]--> \n<!--[if lte IE 9]>IE9及IE9以下版本浏览器显示(包括IE9)<hr/><![endif]--> \n<!--[if gt IE 6]>IE6以上版本浏览器显示(不含IE6)<hr/><![endif]--> \n<!--[if gte IE 7]>IE7及IE7以上版本浏览器显示(包含IE7)<hr/><![endif]--> \n</body> \n</html>\n```\n\n## 参考\n\n[【原】移动web资源整理](http://www.cnblogs.com/PeunZhang/p/3407453.html)\n[面试的信心来源于过硬的基础](https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader12)\n[box-shadow属性详解](http://www.iyangqiong.com/web/318.html)\n[text-overflow:ellipsis 文字超出省略号代替不起作用解决方法](http://yunkus.com/text-overflow-ellipsis-do-not-work/)\n[有谁能详细讲一下css如何画出一个三角形？怎么想都想不懂？](https://www.zhihu.com/question/35180018)\n[移动web 1像素边框 瞧瞧大公司是怎么做的](https://segmentfault.com/a/1190000007604842)\n[移动端重构系列4——重置样式](https://www.w3cplus.com/mobile/mobile-terminal-refactoring-reset-style.html)\n\n注：笔记借鉴了其他文章，只用于个人学习收集，如有冒犯，请通知我。\n\n将会持续更新~","slug":"我的前端笔记—HTML&CSS篇","published":1,"updated":"2018-04-14T17:02:27.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjta92g94002ifc92xt7go9p4","content":"<h2 id=\"PC端基础meta标签\"><a href=\"#PC端基础meta标签\" class=\"headerlink\" title=\"PC端基础meta标签\"></a>PC端基础meta标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面关键词--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"your tags\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面描述--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"150 words\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    all：文件将被检索，且页面上的链接可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    none：文件将不被检索，且页面上的链接不可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    index：文件将被检索；</span></span><br><span class=\"line\"><span class=\"comment\">    follow：页面上的链接可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    noindex：文件将不被检索；</span></span><br><span class=\"line\"><span class=\"comment\">    nofollow：页面上的链接不可以被查询。</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 清除缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"H5基本meta标签\"><a href=\"#H5基本meta标签\" class=\"headerlink\" title=\"H5基本meta标签\"></a>H5基本meta标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 设置缩放 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">    width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></span><br><span class=\"line\"><span class=\"comment\">    device-width  设备宽度</span></span><br><span class=\"line\"><span class=\"comment\">    height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span></span><br><span class=\"line\"><span class=\"comment\">    initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    user-scalable    是否允许手动缩放</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no, email=no\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其他meta标签 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端如何定义字体font-family\"><a href=\"#移动端如何定义字体font-family\" class=\"headerlink\" title=\"移动端如何定义字体font-family\"></a>移动端如何定义字体font-family</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@ --------------------------------------中文字体的英文名称</span><br><span class=\"line\">@ 宋体      SimSun</span><br><span class=\"line\">@ 黑体      SimHei</span><br><span class=\"line\">@ 微信雅黑   Microsoft Yahei</span><br><span class=\"line\">@ 微软正黑体 Microsoft JhengHei</span><br><span class=\"line\">@ 新宋体    NSimSun</span><br><span class=\"line\">@ 新细明体  MingLiU</span><br><span class=\"line\">@ 细明体    MingLiU</span><br><span class=\"line\">@ 标楷体    DFKai-SB</span><br><span class=\"line\">@ 仿宋     FangSong</span><br><span class=\"line\">@ 楷体     KaiTi</span><br><span class=\"line\">@ 仿宋_GB2312  FangSong_GB2312</span><br><span class=\"line\">@ 楷体_GB2312  KaiTi_GB2312  </span><br><span class=\"line\">@</span><br><span class=\"line\">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123; <span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">Yahei</span>,<span class=\"selector-tag\">SimSun</span>,<span class=\"selector-tag\">Helvetica</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>&#123;<span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0;)&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"部分android系统中元素被点击时产生的边框怎么去掉\"><a href=\"#部分android系统中元素被点击时产生的边框怎么去掉\" class=\"headerlink\" title=\"部分android系统中元素被点击时产生的边框怎么去掉\"></a>部分android系统中元素被点击时产生的边框怎么去掉</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0;);</span><br><span class=\"line\"><span class=\"attribute\">-webkit-user-modify</span>:read-write-plaintext-only; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.css</span>&#123;<span class=\"attribute\">-webkit-user-select</span>:none&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打电话发短信写邮件怎么实现\"><a href=\"#打电话发短信写邮件怎么实现\" class=\"headerlink\" title=\"打电话发短信写邮件怎么实现\"></a>打电话发短信写邮件怎么实现</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:0755-10086\"</span>&gt;</span>打电话给:0755-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:peun@foxmail.com\"</span>&gt;</span>peun@foxmail.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"css实现单行文本缩略显示\"><a href=\"#css实现单行文本缩略显示\" class=\"headerlink\" title=\"css实现单行文本缩略显示\"></a>css实现单行文本缩略显示</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 当然还需要加宽度width属来兼容部分浏览。*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"css实现多行文本缩略显示\"><a href=\"#css实现多行文本缩略显示\" class=\"headerlink\" title=\"css实现多行文本缩略显示\"></a>css实现多行文本缩略显示</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-line-clamp</span>: 3;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>; <span class=\"comment\">/* 追加这一行代码 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"placeholder的字体颜色大小\"><a href=\"#placeholder的字体颜色大小\" class=\"headerlink\" title=\"placeholder的字体颜色大小\"></a>placeholder的字体颜色大小</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* WebKit browsers */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#EEEEEE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-moz-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 19+ */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-ms-input-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* Internet Explorer 10+ */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见移动设备的-CSS3-Media-Query-整理\"><a href=\"#常见移动设备的-CSS3-Media-Query-整理\" class=\"headerlink\" title=\"常见移动设备的 CSS3 Media Query 整理\"></a>常见移动设备的 CSS3 Media Query 整理</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 4/4s landscape &amp; portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">320px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">480px</span>)</span><br><span class=\"line\">and (-webkit-device-pixel-ratio: <span class=\"number\">2</span>)</span><br><span class=\"line\">and (device-aspect-ratio: <span class=\"number\">2</span>/<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 4/4s landscape</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">320px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">480px</span>)</span><br><span class=\"line\">and (-webkit-device-pixel-ratio: <span class=\"number\">2</span>)</span><br><span class=\"line\">and (device-aspect-ratio: <span class=\"number\">2</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\">and (orientation:landscape) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  iPhone 5/5s landscape &amp; portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">414px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">736px</span>)</span><br><span class=\"line\">and (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 6 Portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-device-width: <span class=\"number\">375px</span>) and (max-device-width: <span class=\"number\">667px</span>) and (orientation : portrait) &#123; </span><br><span class=\"line\">    //iPhone 6 Portrait</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宽度小于等于 320px </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">320px</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宽度大于等于 320px </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">320px</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS3-盒阴影\"><a href=\"#CSS3-盒阴影\" class=\"headerlink\" title=\"CSS3 盒阴影\"></a>CSS3 盒阴影</h2><p><code>box-shadow</code> 属性接受值最多由五个不同的部分组成。</p>\n<p><code>offset-x</code>  必需。水平阴影的位置。允许负值。<br><code>offset-y</code>  必需。垂直阴影的位置。允许负值。<br><code>blur</code>      可选。模糊距离。<br><code>spread</code>    可选。阴影的尺寸。<br><code>color</code>     可选。阴影的颜色。请参阅 CSS 颜色值。<br><code>position</code>  可选。将外部阴影 (outset) 改为内部阴影。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: <span class=\"selector-tag\">offset-x</span> <span class=\"selector-tag\">offset-y</span> <span class=\"selector-tag\">blur</span> <span class=\"selector-tag\">spread</span> <span class=\"selector-tag\">color</span> <span class=\"selector-tag\">position</span>;</span><br><span class=\"line\"><span class=\"comment\">/* blur */</span></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123; <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">50px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5) &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 多重阴影 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5) inset, <span class=\"comment\">/* inner shadow */</span></span><br><span class=\"line\">    <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5); <span class=\"comment\">/* outer shadow */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 大杂烩 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.simple</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">40px</span> indianred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.multiple</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">0px</span> <span class=\"number\">20px</span> lightcoral,</span><br><span class=\"line\">                -<span class=\"number\">20px</span> -<span class=\"number\">20px</span> <span class=\"number\">0px</span> <span class=\"number\">20px</span> mediumvioletred,</span><br><span class=\"line\">                <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">40px</span> <span class=\"built_in\">rgb</span>(200,200,200);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 弹出效果 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.popup</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: box-shadow <span class=\"number\">0.5s</span>, transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.popup</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.3);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">50px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: box-shadow <span class=\"number\">0.5s</span>, transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS画出三角形\"><a href=\"#CSS画出三角形\" class=\"headerlink\" title=\"CSS画出三角形\"></a>CSS画出三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tip</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: transparent transparent <span class=\"built_in\">rgb</span>(0,0,0) transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span> <span class=\"number\">100px</span> <span class=\"number\">150px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS画出有边框的三角形\"><a href=\"#CSS画出有边框的三角形\" class=\"headerlink\" title=\"CSS画出有边框的三角形\"></a>CSS画出有边框的三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.find-div-body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">#cccccc</span> solid <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.find-div-body</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">41px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">8px</span> solid <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">12</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.find-div-body</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">9px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动web-1像素边框\"><a href=\"#移动web-1像素边框\" class=\"headerlink\" title=\"移动web 1像素边框\"></a>移动web 1像素边框</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#bfbfbf</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(0.5,0.5);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0.5,0.5);</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform-origin</span>: top left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   flex：定义布局为盒模型</span></span><br><span class=\"line\"><span class=\"comment\">   flex-v：盒模型垂直布局</span></span><br><span class=\"line\"><span class=\"comment\">   flex-1：子元素占据剩余的空间</span></span><br><span class=\"line\"><span class=\"comment\">   flex-align-center：子元素垂直居中</span></span><br><span class=\"line\"><span class=\"comment\">   flex-pack-center：子元素水平居中</span></span><br><span class=\"line\"><span class=\"comment\">   flex-pack-justify：子元素两端对齐</span></span><br><span class=\"line\"><span class=\"comment\">   兼容性：ios 4+、android 2.3+、winphone8+</span></span><br><span class=\"line\"><span class=\"comment\">   ============================================================ */</span></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span>&#123;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-v</span>&#123;<span class=\"attribute\">-webkit-box-orient</span>:vertical;<span class=\"attribute\">-webkit-flex-direction</span>:column;<span class=\"attribute\">-ms-flex-direction</span>:column;<span class=\"attribute\">flex-direction</span>:column;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-1</span>&#123;<span class=\"attribute\">-webkit-box-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">-webkit-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">-ms-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">flex</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-align-center</span>&#123;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-pack-center</span>&#123;<span class=\"attribute\">-webkit-box-pack</span>:center;<span class=\"attribute\">-webkit-justify-content</span>:center;<span class=\"attribute\">-ms-flex-pack</span>:center;<span class=\"attribute\">justify-content</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-pack-justify</span>&#123;<span class=\"attribute\">-webkit-box-pack</span>:justify;<span class=\"attribute\">-webkit-justify-content</span>:space-between;<span class=\"attribute\">-ms-flex-pack</span>:justify;<span class=\"attribute\">justify-content</span>:space-between;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS实现背景透明文字不透明\"><a href=\"#CSS实现背景透明文字不透明\" class=\"headerlink\" title=\"CSS实现背景透明文字不透明\"></a>CSS实现背景透明文字不透明</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(0,0,0,0.2) none repeat scroll <span class=\"meta\">!important</span>; <span class=\"comment\">/*实现FF背景透明，文字不透明*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>:<span class=\"built_in\">Alpha</span>(opacity=20);<span class=\"comment\">/*实现IE背景透明*/</span> </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#F30</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">32px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative; <span class=\"comment\">/*实现IE文字不透明*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE各个版本hack\"><a href=\"#IE各个版本hack\" class=\"headerlink\" title=\"IE各个版本hack\"></a>IE各个版本hack</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*类内部hack：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">_width</span>:<span class=\"number\">100px</span>;&#125;            <span class=\"comment\">/* IE6专用*/</span></span><br><span class=\"line\">.header &#123;*+width:100px;&#125;        /* IE7专用*/</span><br><span class=\"line\">.header &#123;*width:100px;&#125;            /* IE6、IE7共用*/</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>\\<span class=\"number\">0</span>;&#125;        <span class=\"comment\">/* IE8、IE9共用*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>\\<span class=\"number\">9</span>;&#125;        <span class=\"comment\">/* IE6、IE7、IE8、IE9共用*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">330px</span>\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;&#125;    <span class=\"comment\">/* IE9专用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*选择器Hack：*/</span></span><br><span class=\"line\">*<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.header</span>&#123;&#125;        <span class=\"comment\">/*IE6*/</span> </span><br><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.header</span>&#123;&#125;    <span class=\"comment\">/*IE7*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"用条件注释判断浏览器版本解决页面兼容问题\"><a href=\"#用条件注释判断浏览器版本解决页面兼容问题\" class=\"headerlink\" title=\"用条件注释判断浏览器版本解决页面兼容问题\"></a>用条件注释判断浏览器版本解决页面兼容问题</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span> 用条件注释判断浏览器版本,解决兼容问题 <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE]&gt;只有IE6,7,8,9浏览器显示(IE10标准模式不支持)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if !IE]&gt;&lt;!--&gt;</span>只有非IE浏览器显示(不包括IE10)<span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span><span class=\"comment\">&lt;!--&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 9]&gt;IE9浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 8]&gt;IE8浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 7]&gt;IE7浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 6]&gt;IE6浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 10]&gt;IE10以下版本浏览器显示(不包括IE10)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 9]&gt;IE9及IE9以下版本浏览器显示(包括IE9)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 6]&gt;IE6以上版本浏览器显示(不含IE6)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 7]&gt;IE7及IE7以上版本浏览器显示(包含IE7)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html\" target=\"_blank\" rel=\"noopener\">【原】移动web资源整理</a><br><a href=\"https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader12\" target=\"_blank\" rel=\"noopener\">面试的信心来源于过硬的基础</a><br><a href=\"http://www.iyangqiong.com/web/318.html\" target=\"_blank\" rel=\"noopener\">box-shadow属性详解</a><br><a href=\"http://yunkus.com/text-overflow-ellipsis-do-not-work/\" target=\"_blank\" rel=\"noopener\">text-overflow:ellipsis 文字超出省略号代替不起作用解决方法</a><br><a href=\"https://www.zhihu.com/question/35180018\" target=\"_blank\" rel=\"noopener\">有谁能详细讲一下css如何画出一个三角形？怎么想都想不懂？</a><br><a href=\"https://segmentfault.com/a/1190000007604842\" target=\"_blank\" rel=\"noopener\">移动web 1像素边框 瞧瞧大公司是怎么做的</a><br><a href=\"https://www.w3cplus.com/mobile/mobile-terminal-refactoring-reset-style.html\" target=\"_blank\" rel=\"noopener\">移动端重构系列4——重置样式</a></p>\n<p>注：笔记借鉴了其他文章，只用于个人学习收集，如有冒犯，请通知我。</p>\n<p>将会持续更新~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PC端基础meta标签\"><a href=\"#PC端基础meta标签\" class=\"headerlink\" title=\"PC端基础meta标签\"></a>PC端基础meta标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面关键词--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"your tags\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面描述--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"150 words\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    all：文件将被检索，且页面上的链接可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    none：文件将不被检索，且页面上的链接不可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    index：文件将被检索；</span></span><br><span class=\"line\"><span class=\"comment\">    follow：页面上的链接可以被查询；</span></span><br><span class=\"line\"><span class=\"comment\">    noindex：文件将不被检索；</span></span><br><span class=\"line\"><span class=\"comment\">    nofollow：页面上的链接不可以被查询。</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 清除缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"H5基本meta标签\"><a href=\"#H5基本meta标签\" class=\"headerlink\" title=\"H5基本meta标签\"></a>H5基本meta标签</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 设置缩放 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">    width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span></span><br><span class=\"line\"><span class=\"comment\">    device-width  设备宽度</span></span><br><span class=\"line\"><span class=\"comment\">    height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span></span><br><span class=\"line\"><span class=\"comment\">    initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span></span><br><span class=\"line\"><span class=\"comment\">    user-scalable    是否允许手动缩放</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span><span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no, email=no\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其他meta标签 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"HandheldFriendly\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MobileOptimized\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"320\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"screen-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-orientation\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"portrait\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"full-screen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- UC应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"browsermode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"application\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-tap-highlight\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"移动端如何定义字体font-family\"><a href=\"#移动端如何定义字体font-family\" class=\"headerlink\" title=\"移动端如何定义字体font-family\"></a>移动端如何定义字体font-family</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@ --------------------------------------中文字体的英文名称</span><br><span class=\"line\">@ 宋体      SimSun</span><br><span class=\"line\">@ 黑体      SimHei</span><br><span class=\"line\">@ 微信雅黑   Microsoft Yahei</span><br><span class=\"line\">@ 微软正黑体 Microsoft JhengHei</span><br><span class=\"line\">@ 新宋体    NSimSun</span><br><span class=\"line\">@ 新细明体  MingLiU</span><br><span class=\"line\">@ 细明体    MingLiU</span><br><span class=\"line\">@ 标楷体    DFKai-SB</span><br><span class=\"line\">@ 仿宋     FangSong</span><br><span class=\"line\">@ 楷体     KaiTi</span><br><span class=\"line\">@ 仿宋_GB2312  FangSong_GB2312</span><br><span class=\"line\">@ 楷体_GB2312  KaiTi_GB2312  </span><br><span class=\"line\">@</span><br><span class=\"line\">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123; <span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">Yahei</span>,<span class=\"selector-tag\">SimSun</span>,<span class=\"selector-tag\">Helvetica</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"><a href=\"#ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\" class=\"headerlink\" title=\"ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉\"></a>ios系统中元素被触摸时产生的半透明灰色遮罩怎么去掉</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>&#123;<span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0;)&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"部分android系统中元素被点击时产生的边框怎么去掉\"><a href=\"#部分android系统中元素被点击时产生的边框怎么去掉\" class=\"headerlink\" title=\"部分android系统中元素被点击时产生的边框怎么去掉\"></a>部分android系统中元素被点击时产生的边框怎么去掉</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>,<span class=\"selector-tag\">button</span>,<span class=\"selector-tag\">input</span>,<span class=\"selector-tag\">textarea</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">-webkit-tap-highlight-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0;);</span><br><span class=\"line\"><span class=\"attribute\">-webkit-user-modify</span>:read-write-plaintext-only; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁止ios和android用户选中文字\"><a href=\"#禁止ios和android用户选中文字\" class=\"headerlink\" title=\"禁止ios和android用户选中文字\"></a>禁止ios和android用户选中文字</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.css</span>&#123;<span class=\"attribute\">-webkit-user-select</span>:none&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打电话发短信写邮件怎么实现\"><a href=\"#打电话发短信写邮件怎么实现\" class=\"headerlink\" title=\"打电话发短信写邮件怎么实现\"></a>打电话发短信写邮件怎么实现</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:0755-10086\"</span>&gt;</span>打电话给:0755-10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:10086\"</span>&gt;</span>发短信给: 10086<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:peun@foxmail.com\"</span>&gt;</span>peun@foxmail.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"css实现单行文本缩略显示\"><a href=\"#css实现单行文本缩略显示\" class=\"headerlink\" title=\"css实现单行文本缩略显示\"></a>css实现单行文本缩略显示</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">nowrap</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 当然还需要加宽度width属来兼容部分浏览。*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"css实现多行文本缩略显示\"><a href=\"#css实现多行文本缩略显示\" class=\"headerlink\" title=\"css实现多行文本缩略显示\"></a>css实现多行文本缩略显示</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-line-clamp</span>: 3;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span>: <span class=\"selector-tag\">ellipsis</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>; <span class=\"comment\">/* 追加这一行代码 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"placeholder的字体颜色大小\"><a href=\"#placeholder的字体颜色大小\" class=\"headerlink\" title=\"placeholder的字体颜色大小\"></a>placeholder的字体颜色大小</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* WebKit browsers */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span><span class=\"selector-pseudo\">::-webkit-input-placeholder</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#EEEEEE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-moz-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* Mozilla Firefox 19+ */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-ms-input-placeholder</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">/* Internet Explorer 10+ */</span> </span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见移动设备的-CSS3-Media-Query-整理\"><a href=\"#常见移动设备的-CSS3-Media-Query-整理\" class=\"headerlink\" title=\"常见移动设备的 CSS3 Media Query 整理\"></a>常见移动设备的 CSS3 Media Query 整理</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 4/4s landscape &amp; portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">320px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">480px</span>)</span><br><span class=\"line\">and (-webkit-device-pixel-ratio: <span class=\"number\">2</span>)</span><br><span class=\"line\">and (device-aspect-ratio: <span class=\"number\">2</span>/<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 4/4s landscape</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">320px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">480px</span>)</span><br><span class=\"line\">and (-webkit-device-pixel-ratio: <span class=\"number\">2</span>)</span><br><span class=\"line\">and (device-aspect-ratio: <span class=\"number\">2</span>/<span class=\"number\">3</span>)</span><br><span class=\"line\">and (orientation:landscape) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  iPhone 5/5s landscape &amp; portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen</span><br><span class=\"line\">and (min-device-width: <span class=\"number\">414px</span>)</span><br><span class=\"line\">and (max-device-width: <span class=\"number\">736px</span>)</span><br><span class=\"line\">and (-webkit-min-device-pixel-ratio: <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * iPhone 6 Portrait</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> only screen and (min-device-width: <span class=\"number\">375px</span>) and (max-device-width: <span class=\"number\">667px</span>) and (orientation : portrait) &#123; </span><br><span class=\"line\">    //iPhone 6 Portrait</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宽度小于等于 320px </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">320px</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宽度大于等于 320px </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">320px</span>)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS3-盒阴影\"><a href=\"#CSS3-盒阴影\" class=\"headerlink\" title=\"CSS3 盒阴影\"></a>CSS3 盒阴影</h2><p><code>box-shadow</code> 属性接受值最多由五个不同的部分组成。</p>\n<p><code>offset-x</code>  必需。水平阴影的位置。允许负值。<br><code>offset-y</code>  必需。垂直阴影的位置。允许负值。<br><code>blur</code>      可选。模糊距离。<br><code>spread</code>    可选。阴影的尺寸。<br><code>color</code>     可选。阴影的颜色。请参阅 CSS 颜色值。<br><code>position</code>  可选。将外部阴影 (outset) 改为内部阴影。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-shadow</span>: <span class=\"selector-tag\">offset-x</span> <span class=\"selector-tag\">offset-y</span> <span class=\"selector-tag\">blur</span> <span class=\"selector-tag\">spread</span> <span class=\"selector-tag\">color</span> <span class=\"selector-tag\">position</span>;</span><br><span class=\"line\"><span class=\"comment\">/* blur */</span></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123; <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">50px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5) &#125;</span><br><span class=\"line\"><span class=\"comment\">/* 多重阴影 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5) inset, <span class=\"comment\">/* inner shadow */</span></span><br><span class=\"line\">    <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5); <span class=\"comment\">/* outer shadow */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 大杂烩 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.simple</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">40px</span> indianred;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.multiple</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">20px</span> <span class=\"number\">20px</span> <span class=\"number\">0px</span> <span class=\"number\">20px</span> lightcoral,</span><br><span class=\"line\">                -<span class=\"number\">20px</span> -<span class=\"number\">20px</span> <span class=\"number\">0px</span> <span class=\"number\">20px</span> mediumvioletred,</span><br><span class=\"line\">                <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">40px</span> <span class=\"built_in\">rgb</span>(200,200,200);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 弹出效果 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.popup</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: box-shadow <span class=\"number\">0.5s</span>, transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.popup</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.3);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">50px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.3);</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: box-shadow <span class=\"number\">0.5s</span>, transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS画出三角形\"><a href=\"#CSS画出三角形\" class=\"headerlink\" title=\"CSS画出三角形\"></a>CSS画出三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tip</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: transparent transparent <span class=\"built_in\">rgb</span>(0,0,0) transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">10px</span> <span class=\"number\">100px</span> <span class=\"number\">150px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS画出有边框的三角形\"><a href=\"#CSS画出有边框的三角形\" class=\"headerlink\" title=\"CSS画出有边框的三角形\"></a>CSS画出有边框的三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.find-div-body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">#cccccc</span> solid <span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.find-div-body</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">41px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">8px</span> solid <span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>:<span class=\"number\">8px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">12</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.find-div-body</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: -<span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">9px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>:<span class=\"number\">9px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动web-1像素边框\"><a href=\"#移动web-1像素边框\" class=\"headerlink\" title=\"移动web 1像素边框\"></a>移动web 1像素边框</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#bfbfbf</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(0.5,0.5);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0.5,0.5);</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform-origin</span>: top left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   flex：定义布局为盒模型</span></span><br><span class=\"line\"><span class=\"comment\">   flex-v：盒模型垂直布局</span></span><br><span class=\"line\"><span class=\"comment\">   flex-1：子元素占据剩余的空间</span></span><br><span class=\"line\"><span class=\"comment\">   flex-align-center：子元素垂直居中</span></span><br><span class=\"line\"><span class=\"comment\">   flex-pack-center：子元素水平居中</span></span><br><span class=\"line\"><span class=\"comment\">   flex-pack-justify：子元素两端对齐</span></span><br><span class=\"line\"><span class=\"comment\">   兼容性：ios 4+、android 2.3+、winphone8+</span></span><br><span class=\"line\"><span class=\"comment\">   ============================================================ */</span></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span>&#123;<span class=\"attribute\">display</span>:-webkit-box;<span class=\"attribute\">display</span>:-webkit-flex;<span class=\"attribute\">display</span>:-ms-flexbox;<span class=\"attribute\">display</span>:flex;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-v</span>&#123;<span class=\"attribute\">-webkit-box-orient</span>:vertical;<span class=\"attribute\">-webkit-flex-direction</span>:column;<span class=\"attribute\">-ms-flex-direction</span>:column;<span class=\"attribute\">flex-direction</span>:column;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-1</span>&#123;<span class=\"attribute\">-webkit-box-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">-webkit-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">-ms-flex</span>:<span class=\"number\">1</span>;<span class=\"attribute\">flex</span>:<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-align-center</span>&#123;<span class=\"attribute\">-webkit-box-align</span>:center;<span class=\"attribute\">-webkit-align-items</span>:center;<span class=\"attribute\">-ms-flex-align</span>:center;<span class=\"attribute\">align-items</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-pack-center</span>&#123;<span class=\"attribute\">-webkit-box-pack</span>:center;<span class=\"attribute\">-webkit-justify-content</span>:center;<span class=\"attribute\">-ms-flex-pack</span>:center;<span class=\"attribute\">justify-content</span>:center;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-pack-justify</span>&#123;<span class=\"attribute\">-webkit-box-pack</span>:justify;<span class=\"attribute\">-webkit-justify-content</span>:space-between;<span class=\"attribute\">-ms-flex-pack</span>:justify;<span class=\"attribute\">justify-content</span>:space-between;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS实现背景透明文字不透明\"><a href=\"#CSS实现背景透明文字不透明\" class=\"headerlink\" title=\"CSS实现背景透明文字不透明\"></a>CSS实现背景透明文字不透明</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(0,0,0,0.2) none repeat scroll <span class=\"meta\">!important</span>; <span class=\"comment\">/*实现FF背景透明，文字不透明*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">filter</span>:<span class=\"built_in\">Alpha</span>(opacity=20);<span class=\"comment\">/*实现IE背景透明*/</span> </span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#F30</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">32px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative; <span class=\"comment\">/*实现IE文字不透明*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IE各个版本hack\"><a href=\"#IE各个版本hack\" class=\"headerlink\" title=\"IE各个版本hack\"></a>IE各个版本hack</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*类内部hack：*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">_width</span>:<span class=\"number\">100px</span>;&#125;            <span class=\"comment\">/* IE6专用*/</span></span><br><span class=\"line\">.header &#123;*+width:100px;&#125;        /* IE7专用*/</span><br><span class=\"line\">.header &#123;*width:100px;&#125;            /* IE6、IE7共用*/</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>\\<span class=\"number\">0</span>;&#125;        <span class=\"comment\">/* IE8、IE9共用*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>\\<span class=\"number\">9</span>;&#125;        <span class=\"comment\">/* IE6、IE7、IE8、IE9共用*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;<span class=\"attribute\">width</span>:<span class=\"number\">330px</span>\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;&#125;    <span class=\"comment\">/* IE9专用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*选择器Hack：*/</span></span><br><span class=\"line\">*<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.header</span>&#123;&#125;        <span class=\"comment\">/*IE6*/</span> </span><br><span class=\"line\">*+<span class=\"selector-tag\">html</span> <span class=\"selector-class\">.header</span>&#123;&#125;    <span class=\"comment\">/*IE7*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"用条件注释判断浏览器版本解决页面兼容问题\"><a href=\"#用条件注释判断浏览器版本解决页面兼容问题\" class=\"headerlink\" title=\"用条件注释判断浏览器版本解决页面兼容问题\"></a>用条件注释判断浏览器版本解决页面兼容问题</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span> 用条件注释判断浏览器版本,解决兼容问题 <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE]&gt;只有IE6,7,8,9浏览器显示(IE10标准模式不支持)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if !IE]&gt;&lt;!--&gt;</span>只有非IE浏览器显示(不包括IE10)<span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span><span class=\"comment\">&lt;!--&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 9]&gt;IE9浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 8]&gt;IE8浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 7]&gt;IE7浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 6]&gt;IE6浏览器显示&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 10]&gt;IE10以下版本浏览器显示(不包括IE10)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 9]&gt;IE9及IE9以下版本浏览器显示(包括IE9)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 6]&gt;IE6以上版本浏览器显示(不含IE6)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 7]&gt;IE7及IE7以上版本浏览器显示(包含IE7)&lt;hr/&gt;&lt;![endif]--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/PeunZhang/p/3407453.html\" target=\"_blank\" rel=\"noopener\">【原】移动web资源整理</a><br><a href=\"https://segmentfault.com/a/1190000013331105?utm_source=index-hottest#articleHeader12\" target=\"_blank\" rel=\"noopener\">面试的信心来源于过硬的基础</a><br><a href=\"http://www.iyangqiong.com/web/318.html\" target=\"_blank\" rel=\"noopener\">box-shadow属性详解</a><br><a href=\"http://yunkus.com/text-overflow-ellipsis-do-not-work/\" target=\"_blank\" rel=\"noopener\">text-overflow:ellipsis 文字超出省略号代替不起作用解决方法</a><br><a href=\"https://www.zhihu.com/question/35180018\" target=\"_blank\" rel=\"noopener\">有谁能详细讲一下css如何画出一个三角形？怎么想都想不懂？</a><br><a href=\"https://segmentfault.com/a/1190000007604842\" target=\"_blank\" rel=\"noopener\">移动web 1像素边框 瞧瞧大公司是怎么做的</a><br><a href=\"https://www.w3cplus.com/mobile/mobile-terminal-refactoring-reset-style.html\" target=\"_blank\" rel=\"noopener\">移动端重构系列4——重置样式</a></p>\n<p>注：笔记借鉴了其他文章，只用于个人学习收集，如有冒犯，请通知我。</p>\n<p>将会持续更新~</p>\n"}],"PostAsset":[{"_id":"source/_posts/传统网站如何巧使webpack解决问题/1.jpg","post":"cjta92g7p000mfc92rq86iue9","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/传统网站如何巧使webpack解决问题/2.jpg","post":"cjta92g7p000mfc92rq86iue9","slug":"2.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjta92g6o0000fc926o2mal9f","category_id":"cjta92g720003fc92r0wtujh8","_id":"cjta92g7d000cfc928nieuka9"},{"post_id":"cjta92g6y0002fc92b0rh6flj","category_id":"cjta92g790008fc928s26kz52","_id":"cjta92g7p000kfc923ofg2jvs"},{"post_id":"cjta92g750005fc92po35ular","category_id":"cjta92g720003fc92r0wtujh8","_id":"cjta92g7s000ofc92mpovr0xc"},{"post_id":"cjta92g7n000hfc92uggf673x","category_id":"cjta92g720003fc92r0wtujh8","_id":"cjta92g7t000rfc9233v6gvyj"},{"post_id":"cjta92g760006fc92mbh1lap6","category_id":"cjta92g7o000jfc92dkgkthrl","_id":"cjta92g7u000tfc92vl9khm5s"},{"post_id":"cjta92g780007fc92ri4632s3","category_id":"cjta92g7s000pfc92qt9hksvp","_id":"cjta92g7w000yfc923lnelw8a"},{"post_id":"cjta92g7a000afc92cn67c6xd","category_id":"cjta92g7s000pfc92qt9hksvp","_id":"cjta92g7y0011fc929uqhs6sw"},{"post_id":"cjta92g7c000bfc926ca6imz8","category_id":"cjta92g7v000xfc9220zzbpmt","_id":"cjta92g7z0015fc92hjn0v34q"},{"post_id":"cjta92g7g000ffc92arelrstk","category_id":"cjta92g7y0013fc92jxbg2vba","_id":"cjta92g800018fc92qfzjkxio"},{"post_id":"cjta92g7p000mfc92rq86iue9","category_id":"cjta92g7z0016fc92yrnc5b0r","_id":"cjta92g81001cfc92k6869a9r"},{"post_id":"cjta92g7r000nfc925yj666fs","category_id":"cjta92g800019fc92z26ckas9","_id":"cjta92g83001gfc92cr6ng8fx"},{"post_id":"cjta92g90002ffc92bopp8goo","category_id":"cjta92g7z0016fc92yrnc5b0r","_id":"cjta92g97002lfc92m317z6z3"},{"post_id":"cjta92g93002hfc92jx7ye5n4","category_id":"cjta92g7y0013fc92jxbg2vba","_id":"cjta92g97002mfc92u2ke5pjc"},{"post_id":"cjta92g8t0029fc9265voquea","category_id":"cjta92g8y002cfc920gu0ivp4","_id":"cjta92g99002pfc926ty6h0pe"},{"post_id":"cjta92g8w002bfc929ebgos33","category_id":"cjta92g95002jfc92137u1hin","_id":"cjta92g99002qfc92vqyu4awr"},{"post_id":"cjta92g94002ifc92xt7go9p4","category_id":"cjta92g98002nfc92kw2b0rkh","_id":"cjta92g9a002sfc92jl106av8"}],"PostTag":[{"post_id":"cjta92g6o0000fc926o2mal9f","tag_id":"cjta92g740004fc92ry80gbqo","_id":"cjta92g7j000gfc92j1eh9xkl"},{"post_id":"cjta92g6o0000fc926o2mal9f","tag_id":"cjta92g790009fc92xtbntkii","_id":"cjta92g7o000ifc921pmp14e6"},{"post_id":"cjta92g6y0002fc92b0rh6flj","tag_id":"cjta92g7e000efc92l3rrls51","_id":"cjta92g7u000sfc92e4is9p3l"},{"post_id":"cjta92g6y0002fc92b0rh6flj","tag_id":"cjta92g7p000lfc92j83kzwap","_id":"cjta92g7u000ufc92znl5wzto"},{"post_id":"cjta92g750005fc92po35ular","tag_id":"cjta92g740004fc92ry80gbqo","_id":"cjta92g7w0010fc920zfq00ze"},{"post_id":"cjta92g750005fc92po35ular","tag_id":"cjta92g7v000wfc927bchlsg2","_id":"cjta92g7y0012fc9203sjtnb6"},{"post_id":"cjta92g760006fc92mbh1lap6","tag_id":"cjta92g7w000zfc92fluavzpj","_id":"cjta92g81001bfc92a0l2v6iq"},{"post_id":"cjta92g760006fc92mbh1lap6","tag_id":"cjta92g7y0014fc92uo61qfnz","_id":"cjta92g82001dfc92et7n0liw"},{"post_id":"cjta92g760006fc92mbh1lap6","tag_id":"cjta92g800017fc923zlo0ex0","_id":"cjta92g82001ffc92mi4abllh"},{"post_id":"cjta92g780007fc92ri4632s3","tag_id":"cjta92g740004fc92ry80gbqo","_id":"cjta92g83001ifc92ik4jve88"},{"post_id":"cjta92g780007fc92ri4632s3","tag_id":"cjta92g81001afc922akgtudp","_id":"cjta92g84001jfc92efmbndcw"},{"post_id":"cjta92g780007fc92ri4632s3","tag_id":"cjta92g82001efc92s5895bb2","_id":"cjta92g84001lfc92gcqr1sv7"},{"post_id":"cjta92g7a000afc92cn67c6xd","tag_id":"cjta92g740004fc92ry80gbqo","_id":"cjta92g84001mfc9266rqy8tn"},{"post_id":"cjta92g7a000afc92cn67c6xd","tag_id":"cjta92g83001hfc92ivx6btkv","_id":"cjta92g85001ofc92zurv2urx"},{"post_id":"cjta92g7c000bfc926ca6imz8","tag_id":"cjta92g84001kfc92f6t3f2ag","_id":"cjta92g86001qfc924bcrqatk"},{"post_id":"cjta92g7c000bfc926ca6imz8","tag_id":"cjta92g85001nfc92n7xf0895","_id":"cjta92g86001rfc922r02uzsd"},{"post_id":"cjta92g7g000ffc92arelrstk","tag_id":"cjta92g85001pfc92gfn6ej07","_id":"cjta92g88001wfc92bpqrqkxc"},{"post_id":"cjta92g7g000ffc92arelrstk","tag_id":"cjta92g86001sfc921myeq3tf","_id":"cjta92g88001xfc92mdxn1sqn"},{"post_id":"cjta92g7g000ffc92arelrstk","tag_id":"cjta92g87001tfc92wx244bnt","_id":"cjta92g89001zfc929ybe8qqf"},{"post_id":"cjta92g7g000ffc92arelrstk","tag_id":"cjta92g87001ufc92qp20klyi","_id":"cjta92g890020fc92yf8thsgx"},{"post_id":"cjta92g7n000hfc92uggf673x","tag_id":"cjta92g740004fc92ry80gbqo","_id":"cjta92g8a0022fc92n2t9cc1a"},{"post_id":"cjta92g7n000hfc92uggf673x","tag_id":"cjta92g87001vfc925zhcpjhd","_id":"cjta92g8a0023fc92pgtbdjd0"},{"post_id":"cjta92g7p000mfc92rq86iue9","tag_id":"cjta92g87001tfc92wx244bnt","_id":"cjta92g8b0025fc92wvowfqnp"},{"post_id":"cjta92g7p000mfc92rq86iue9","tag_id":"cjta92g890021fc922bxz3u1l","_id":"cjta92g8b0026fc92puwq1xkl"},{"post_id":"cjta92g7r000nfc925yj666fs","tag_id":"cjta92g8a0024fc9265v90cxz","_id":"cjta92g8b0027fc92kq2hzfwx"},{"post_id":"cjta92g8t0029fc9265voquea","tag_id":"cjta92g8y002dfc92l3ruofa8","_id":"cjta92g9b002ufc92kj8xnptk"},{"post_id":"cjta92g8t0029fc9265voquea","tag_id":"cjta92g96002kfc92rvrzez5n","_id":"cjta92g9c002vfc92vdstxwtr"},{"post_id":"cjta92g8t0029fc9265voquea","tag_id":"cjta92g98002ofc92tj4585g8","_id":"cjta92g9d002xfc928r6ngwj0"},{"post_id":"cjta92g8t0029fc9265voquea","tag_id":"cjta92g9a002rfc92mckgrvvt","_id":"cjta92g9d002yfc921dr9zo1n"},{"post_id":"cjta92g8w002bfc929ebgos33","tag_id":"cjta92g8y002dfc92l3ruofa8","_id":"cjta92g9f0031fc92scncggsl"},{"post_id":"cjta92g8w002bfc929ebgos33","tag_id":"cjta92g9c002wfc92dfsze3xm","_id":"cjta92g9g0032fc925glsbzr8"},{"post_id":"cjta92g8w002bfc929ebgos33","tag_id":"cjta92g9e002zfc92cvmnakcb","_id":"cjta92g9h0034fc92osixys5z"},{"post_id":"cjta92g90002ffc92bopp8goo","tag_id":"cjta92g87001tfc92wx244bnt","_id":"cjta92g9i0036fc92zyu4kjg5"},{"post_id":"cjta92g90002ffc92bopp8goo","tag_id":"cjta92g9f0030fc922jyox2kk","_id":"cjta92g9j0037fc92bvxt3ssi"},{"post_id":"cjta92g90002ffc92bopp8goo","tag_id":"cjta92g9g0033fc92aesdyxmx","_id":"cjta92g9k0039fc92ixl8nu4b"},{"post_id":"cjta92g93002hfc92jx7ye5n4","tag_id":"cjta92g85001pfc92gfn6ej07","_id":"cjta92g9n003dfc921chde2ft"},{"post_id":"cjta92g93002hfc92jx7ye5n4","tag_id":"cjta92g9h0035fc92sqifmoi1","_id":"cjta92g9n003efc927k8cyaqe"},{"post_id":"cjta92g93002hfc92jx7ye5n4","tag_id":"cjta92g9j0038fc92xa7z9ulz","_id":"cjta92g9p003gfc923e8642a0"},{"post_id":"cjta92g93002hfc92jx7ye5n4","tag_id":"cjta92g9l003afc9282hwusuw","_id":"cjta92g9q003hfc92eeto3ghz"},{"post_id":"cjta92g93002hfc92jx7ye5n4","tag_id":"cjta92g9m003bfc92ca8d6ynt","_id":"cjta92g9r003jfc92sll0dv54"},{"post_id":"cjta92g94002ifc92xt7go9p4","tag_id":"cjta92g9m003cfc92p092hsxo","_id":"cjta92g9t003kfc92nd761bcr"},{"post_id":"cjta92g94002ifc92xt7go9p4","tag_id":"cjta92g9o003ffc92mjz3lzmq","_id":"cjta92g9t003lfc920mxjrcp6"},{"post_id":"cjta92g94002ifc92xt7go9p4","tag_id":"cjta92g9q003ifc92pgevik9u","_id":"cjta92g9u003mfc9296ejnt2h"}],"Tag":[{"name":"javascript","_id":"cjta92g740004fc92ry80gbqo"},{"name":"高阶函数","_id":"cjta92g790009fc92xtbntkii"},{"name":"html5","_id":"cjta92g7e000efc92l3rrls51"},{"name":"表单验证","_id":"cjta92g7p000lfc92j83kzwap"},{"name":"闭包","_id":"cjta92g7v000wfc927bchlsg2"},{"name":"node","_id":"cjta92g7w000zfc92fluavzpj"},{"name":"path","_id":"cjta92g7y0014fc92uo61qfnz"},{"name":"回调","_id":"cjta92g800017fc923zlo0ex0"},{"name":"apply","_id":"cjta92g81001afc922akgtudp"},{"name":"push","_id":"cjta92g82001efc92s5895bb2"},{"name":"this","_id":"cjta92g83001hfc92ivx6btkv"},{"name":"underscore","_id":"cjta92g84001kfc92f6t3f2ag"},{"name":"sortBy","_id":"cjta92g85001nfc92n7xf0895"},{"name":"vue","_id":"cjta92g85001pfc92gfn6ej07"},{"name":"vue-cli","_id":"cjta92g86001sfc921myeq3tf"},{"name":"webpack","_id":"cjta92g87001tfc92wx244bnt"},{"name":"alias","_id":"cjta92g87001ufc92qp20klyi"},{"name":"设计模式","_id":"cjta92g87001vfc925zhcpjhd"},{"name":"打包","_id":"cjta92g890021fc922bxz3u1l"},{"name":"php","_id":"cjta92g8a0024fc9265v90cxz"},{"name":"react","_id":"cjta92g8y002dfc92l3ruofa8"},{"name":"react native","_id":"cjta92g96002kfc92rvrzez5n"},{"name":"app","_id":"cjta92g98002ofc92tj4585g8"},{"name":"android","_id":"cjta92g9a002rfc92mckgrvvt"},{"name":"redux","_id":"cjta92g9c002wfc92dfsze3xm"},{"name":"react-router","_id":"cjta92g9e002zfc92cvmnakcb"},{"name":"多页面","_id":"cjta92g9f0030fc922jyox2kk"},{"name":"工程化","_id":"cjta92g9g0033fc92aesdyxmx"},{"name":"vuex","_id":"cjta92g9h0035fc92sqifmoi1"},{"name":"vue router","_id":"cjta92g9j0038fc92xa7z9ulz"},{"name":"axios","_id":"cjta92g9l003afc9282hwusuw"},{"name":"jsonp","_id":"cjta92g9m003bfc92ca8d6ynt"},{"name":"meta","_id":"cjta92g9m003cfc92p092hsxo"},{"name":"css3","_id":"cjta92g9o003ffc92mjz3lzmq"},{"name":"移动端","_id":"cjta92g9q003ifc92pgevik9u"}]}}